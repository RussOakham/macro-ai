version: '3.8'

services:
  express-api:
    build:
      context: ../..
      dockerfile: apps/express-api/Dockerfile
      target: production # Use production stage
    container_name: macro-ai-express-api-prod
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - APP_ENV=${APP_ENV:-production}
      - SERVER_PORT=3000
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_COGNITO_REGION=${AWS_COGNITO_REGION:-us-east-1}
      # Environment variables will be injected by ECS task definition
      - API_KEY=${API_KEY}
      - COOKIE_ENCRYPTION_KEY=${COOKIE_ENCRYPTION_KEY}
      - AWS_COGNITO_USER_POOL_ID=${AWS_COGNITO_USER_POOL_ID}
      - AWS_COGNITO_USER_POOL_CLIENT_ID=${AWS_COGNITO_USER_POOL_CLIENT_ID}
      - AWS_COGNITO_USER_POOL_SECRET_KEY=${AWS_COGNITO_USER_POOL_SECRET_KEY}
      - AWS_COGNITO_ACCESS_KEY=${AWS_COGNITO_ACCESS_KEY}
      - AWS_COGNITO_SECRET_KEY=${AWS_COGNITO_SECRET_KEY}
      - RELATIONAL_DATABASE_URL=${RELATIONAL_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_ORGANIZATION=${OPENAI_ORGANIZATION}
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - macro-ai-network

networks:
  macro-ai-network:
    driver: bridge

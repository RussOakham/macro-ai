# syntax=docker/dockerfile:1
FROM node:20-alpine AS base
RUN apk update && apk add --no-cache libc6-compat
RUN corepack enable

FROM base AS builder
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk update && apk add --no-cache libc6-compat

# Set pnpm home and path
ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="$PNPM_HOME:$PATH"

# Set working directory
WORKDIR /macro-ai
# Use BuildKit cache mount for pnpm global packages
RUN --mount=type=cache,target=/root/.local/share/pnpm \
    pnpm add -g turbo
COPY . .
# Use BuildKit cache mount for turbo cache during prune
RUN --mount=type=cache,target=.turbo \
    --mount=type=cache,target=/root/.local/share/pnpm \
    /root/.local/share/pnpm/turbo prune @repo/express-api --docker

# Build stage - install ALL dependencies including dev dependencies for building
FROM base AS builder-full

WORKDIR /macro-ai

# First install ALL dependencies (including dev dependencies needed for build)
COPY --from=builder /macro-ai/out/json/ .
RUN --mount=type=cache,target=/root/.local/share/pnpm \
    pnpm install --frozen-lockfile

# Build the project and its dependencies
COPY --from=builder /macro-ai/out/full/ .

# Use BuildKit cache mount for turbo cache during build
RUN --mount=type=cache,target=.turbo \
    --mount=type=cache,target=/root/.local/share/pnpm \
    pnpm run prebuild:docker-image && pnpm run build:docker-image

# Production dependencies stage - install ONLY production dependencies
FROM base AS installer
RUN apk update && apk add --no-cache libc6-compat

WORKDIR /macro-ai

# Install ONLY production dependencies
COPY --from=builder /macro-ai/out/json/ .
RUN --mount=type=cache,target=/root/.local/share/pnpm \
    pnpm install --prod --frozen-lockfile --ignore-scripts

# ECS-compatible stage with health check tools
FROM node:20-alpine AS ecs-runner
RUN apk add --no-cache curl libc6-compat
WORKDIR /macro-ai

# Copy built application from build stage and production dependencies from installer stage
COPY --from=builder-full /macro-ai/apps/express-api/dist ./apps/express-api/dist
COPY --from=installer /macro-ai/node_modules ./node_modules
COPY --from=installer /macro-ai/apps/express-api/node_modules ./apps/express-api/node_modules
COPY --from=installer /macro-ai/package.json ./package.json
COPY --from=installer /macro-ai/apps/express-api/package.json ./apps/express-api/package.json

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs nodejs
USER nodejs

# Expose port
EXPOSE 3040

# Health check with curl for ECS compatibility
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3040/api/health || exit 1

# Start the application
CMD ["node", "apps/express-api/dist/index.js"]

# Pure distroless stage (smallest but limited health check options)
FROM gcr.io/distroless/nodejs20 AS distroless-runner
WORKDIR /macro-ai

# Copy built application from build stage and production dependencies from installer stage
COPY --from=builder-full --chown=1001:1001 /macro-ai/apps/express-api/dist ./apps/express-api/dist
COPY --from=installer --chown=1001:1001 /macro-ai/node_modules ./node_modules
COPY --from=installer --chown=1001:1001 /macro-ai/apps/express-api/node_modules ./apps/express-api/node_modules
COPY --from=installer --chown=1001:1001 /macro-ai/package.json ./package.json
COPY --from=installer --chown=1001:1001 /macro-ai/apps/express-api/package.json ./apps/express-api/package.json

# Set user to non-root (distroless uses numeric IDs)
USER 1001

# Expose port
EXPOSE 3040

# Health check using Node.js built-in http module
# Note: distroless doesn't have shell, so we use HEALTHCHECK with node directly
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["node", "-e", "require('http').get('http://localhost:3040/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]

# Start the application
CMD ["apps/express-api/dist/index.js"]


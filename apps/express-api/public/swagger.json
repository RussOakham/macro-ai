{
	"openapi": "3.0.0",
	"info": {
		"title": "Macro AI Express API",
		"version": "0.0.1",
		"description": "API documentation for Macro AI\n\t\t\t\t\n## Rate Limiting\nThis API implements rate limiting to protect against abuse:\n\n- **Global Rate Limit**: 100 requests per 15 minutes for all endpoints\n- **Authentication Rate Limit**: 10 requests per hour for authentication endpoints\n- **API Rate Limit**: 60 requests per minute for API endpoints\n\nRate limit headers are included in responses to help track usage.",
		"license": {
			"name": "MIT",
			"url": "https://spdx.org/licenses/MIT.html"
		}
	},
	"servers": [
		{
			"url": "http://localhost:3040/api",
			"description": "Development server"
		}
	],
	"components": {
		"securitySchemes": {
			"cookieAuth": {
				"type": "apiKey",
				"in": "cookie",
				"name": "macro-ai-accessToken"
			},
			"apiKey": {
				"type": "apiKey",
				"in": "header",
				"name": "x-api-key"
			}
		},
		"schemas": {
			"ErrorResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Error message"
					},
					"details": {
						"type": "object",
						"additionalProperties": {
							"nullable": true
						},
						"description": "Error details"
					}
				},
				"required": ["message"],
				"description": "Standard error response"
			},
			"RateLimitError": {
				"type": "object",
				"properties": {
					"status": {
						"type": "number",
						"description": "HTTP status code",
						"example": 429
					},
					"message": {
						"type": "string",
						"description": "Rate limit error message",
						"example": "Too many requests, please try again later."
					}
				},
				"required": ["status", "message"],
				"description": "Rate limit exceeded error response"
			},
			"ValidationError": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Validation error message",
						"example": "Validation Failed"
					},
					"details": {
						"type": "object",
						"additionalProperties": {
							"nullable": true
						},
						"description": "Detailed validation error information",
						"example": {
							"field": "email",
							"message": "Invalid email format"
						}
					}
				},
				"required": ["message"],
				"description": "Request validation error response"
			},
			"InternalServerError": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Internal server error message",
						"example": "Internal server error"
					}
				},
				"required": ["message"],
				"description": "Internal server error response"
			},
			"UnauthorizedError": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Unauthorized error message",
						"example": "Authentication required"
					}
				},
				"required": ["message"],
				"description": "Unauthorized access error response"
			},
			"NotFoundError": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Not found error message",
						"example": "Resource not found"
					}
				},
				"required": ["message"],
				"description": "Resource not found error response"
			},
			"ConflictError": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Conflict error message",
						"example": "Resource conflict"
					}
				},
				"required": ["message"],
				"description": "Resource conflict error response"
			},
			"ForbiddenError": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Forbidden error message",
						"example": "Forbidden"
					}
				},
				"required": ["message"],
				"description": "Forbidden access error response"
			},
			"CognitoCodeMismatchError": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Invalid verification code error message",
						"example": "Invalid verification code"
					}
				},
				"required": ["message"],
				"description": "Invalid verification code error response"
			},
			"CognitoExpiredCodeError": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Expired verification code error message",
						"example": "Verification code has expired"
					}
				},
				"required": ["message"],
				"description": "Expired verification code error response"
			},
			"CognitoUserNotConfirmedError": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "User not confirmed error message",
						"example": "User is not confirmed"
					}
				},
				"required": ["message"],
				"description": "User not confirmed error response"
			},
			"CognitoUsernameExistsError": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "User already exists error message",
						"example": "User already exists"
					}
				},
				"required": ["message"],
				"description": "User already exists error response"
			},
			"UserProfile": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"email": {
						"type": "string",
						"maxLength": 255
					},
					"emailVerified": {
						"type": "boolean",
						"nullable": true
					},
					"firstName": {
						"type": "string",
						"nullable": true,
						"maxLength": 255
					},
					"lastName": {
						"type": "string",
						"nullable": true,
						"maxLength": 255
					},
					"createdAt": {
						"type": "string",
						"nullable": true
					},
					"updatedAt": {
						"type": "string",
						"nullable": true
					},
					"lastLogin": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"id",
					"email",
					"emailVerified",
					"firstName",
					"lastName",
					"createdAt",
					"updatedAt",
					"lastLogin"
				]
			},
			"UpdateUserProfile": {
				"type": "object",
				"properties": {
					"firstName": {
						"type": "string",
						"description": "User first name"
					},
					"lastName": {
						"type": "string",
						"description": "User last name"
					}
				},
				"description": "Update user profile request"
			},
			"UserResponse": {
				"type": "object",
				"properties": {
					"user": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string",
								"format": "uuid"
							},
							"email": {
								"type": "string",
								"maxLength": 255
							},
							"emailVerified": {
								"type": "boolean",
								"nullable": true
							},
							"firstName": {
								"type": "string",
								"nullable": true,
								"maxLength": 255
							},
							"lastName": {
								"type": "string",
								"nullable": true,
								"maxLength": 255
							},
							"createdAt": {
								"type": "string",
								"nullable": true
							},
							"updatedAt": {
								"type": "string",
								"nullable": true
							},
							"lastLogin": {
								"type": "string",
								"nullable": true
							}
						},
						"required": [
							"id",
							"email",
							"emailVerified",
							"firstName",
							"lastName",
							"createdAt",
							"updatedAt",
							"lastLogin"
						],
						"description": "User profile data"
					}
				},
				"required": ["user"],
				"description": "User profile response"
			},
			"MessageBase": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Response message"
					}
				},
				"required": ["message"],
				"description": "Base response with a message"
			},
			"UserId": {
				"type": "string",
				"format": "uuid",
				"description": "User ID validation schema"
			},
			"AuthResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Response message"
					}
				},
				"required": ["message"],
				"description": "Generic authentication response"
			},
			"RegisterRequest": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"format": "email",
						"description": "User email address"
					},
					"password": {
						"type": "string",
						"minLength": 8,
						"pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])",
						"description": "User password"
					},
					"confirmPassword": {
						"type": "string",
						"minLength": 8,
						"pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])",
						"description": "Confirm password"
					}
				},
				"required": ["email", "password", "confirmPassword"],
				"description": "User registration request"
			},
			"RegisterResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Response message"
					},
					"user": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string",
								"description": "User ID"
							},
							"email": {
								"type": "string",
								"description": "User email address"
							}
						},
						"required": ["id", "email"]
					}
				},
				"required": ["message", "user"],
				"description": "User registration response"
			},
			"ConfirmRegistration": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"format": "email",
						"description": "User email address"
					},
					"code": {
						"type": "number",
						"description": "Verification code sent to email"
					}
				},
				"required": ["email", "code"],
				"description": "Confirm user registration with verification code"
			},
			"ResendConfirmationCode": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"format": "email",
						"description": "User email address"
					}
				},
				"required": ["email"],
				"description": "Request to resend confirmation code"
			},
			"LoginRequest": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"format": "email",
						"description": "User email address"
					},
					"password": {
						"type": "string",
						"minLength": 8,
						"pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])",
						"description": "User password"
					}
				},
				"required": ["email", "password"],
				"description": "User login request"
			},
			"TokenResponse": {
				"type": "object",
				"properties": {
					"accessToken": {
						"type": "string",
						"description": "JWT access token"
					},
					"refreshToken": {
						"type": "string",
						"description": "JWT refresh token"
					},
					"expiresIn": {
						"type": "number",
						"description": "Token expiration time in seconds"
					}
				},
				"required": ["accessToken", "refreshToken", "expiresIn"],
				"description": "Authentication tokens response"
			},
			"ForgotPasswordRequest": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"format": "email",
						"description": "User email address"
					}
				},
				"required": ["email"],
				"description": "Request to initiate password reset"
			},
			"ConfirmForgotPasswordRequest": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"format": "email",
						"description": "User email address"
					},
					"code": {
						"type": "string",
						"minLength": 6,
						"maxLength": 6,
						"description": "Verification code sent to email"
					},
					"newPassword": {
						"type": "string",
						"minLength": 8,
						"pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])",
						"description": "New password"
					},
					"confirmPassword": {
						"type": "string",
						"minLength": 8,
						"pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])",
						"description": "Confirm new password"
					}
				},
				"required": ["email", "code", "newPassword", "confirmPassword"],
				"description": "Request to confirm password reset with code"
			},
			"GetAuthUserResponse": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "User ID"
					},
					"email": {
						"type": "string",
						"description": "User email address"
					},
					"emailVerified": {
						"type": "boolean",
						"description": "Email verification status"
					}
				},
				"required": ["id", "email", "emailVerified"],
				"description": "Authenticated user information response"
			},
			"Chat": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"userId": {
						"type": "string",
						"format": "uuid"
					},
					"title": {
						"type": "string",
						"maxLength": 255
					},
					"createdAt": {
						"type": "string",
						"nullable": true
					},
					"updatedAt": {
						"type": "string",
						"nullable": true
					}
				},
				"required": ["id", "userId", "title", "createdAt", "updatedAt"]
			},
			"ChatMessage": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"chatId": {
						"type": "string",
						"format": "uuid"
					},
					"role": {
						"type": "string",
						"maxLength": 20
					},
					"content": {
						"type": "string"
					},
					"metadata": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number"
							},
							{
								"type": "boolean"
							},
							{
								"nullable": true
							},
							{
								"type": "object",
								"additionalProperties": {
									"nullable": true
								}
							},
							{
								"type": "array",
								"items": {
									"nullable": true
								}
							},
							{
								"nullable": true
							}
						]
					},
					"embedding": {
						"type": "array",
						"nullable": true,
						"items": {
							"type": "number"
						}
					},
					"createdAt": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"id",
					"chatId",
					"role",
					"content",
					"metadata",
					"embedding",
					"createdAt"
				]
			},
			"ChatVector": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"userId": {
						"type": "string",
						"format": "uuid"
					},
					"chatId": {
						"type": "string",
						"nullable": true,
						"format": "uuid"
					},
					"messageId": {
						"type": "string",
						"nullable": true,
						"format": "uuid"
					},
					"content": {
						"type": "string"
					},
					"embedding": {
						"type": "array",
						"nullable": true,
						"items": {
							"type": "number"
						}
					},
					"metadata": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number"
							},
							{
								"type": "boolean"
							},
							{
								"nullable": true
							},
							{
								"type": "object",
								"additionalProperties": {
									"nullable": true
								}
							},
							{
								"type": "array",
								"items": {
									"nullable": true
								}
							},
							{
								"nullable": true
							}
						]
					},
					"createdAt": {
						"type": "string",
						"nullable": true
					},
					"updatedAt": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"id",
					"userId",
					"chatId",
					"messageId",
					"content",
					"embedding",
					"metadata",
					"createdAt",
					"updatedAt"
				]
			},
			"CreateChatRequest": {
				"type": "object",
				"properties": {
					"title": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255,
						"description": "Chat title"
					}
				},
				"required": ["title"],
				"description": "Create new chat request"
			},
			"UpdateChatRequest": {
				"type": "object",
				"properties": {
					"title": {
						"type": "string",
						"minLength": 1,
						"maxLength": 255,
						"description": "Chat title"
					}
				},
				"required": ["title"],
				"description": "Update chat request"
			},
			"SendMessageRequest": {
				"type": "object",
				"properties": {
					"messages": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"role": {
									"type": "string",
									"enum": ["user", "assistant", "system"],
									"description": "Message role"
								},
								"content": {
									"type": "string",
									"minLength": 1,
									"maxLength": 10000,
									"description": "Message content"
								}
							},
							"required": ["role", "content"]
						},
						"minItems": 1,
						"description": "Array of conversation messages"
					}
				},
				"required": ["messages"],
				"description": "Send message request"
			},
			"SearchChatRequest": {
				"type": "object",
				"properties": {
					"query": {
						"type": "string",
						"minLength": 1,
						"maxLength": 1000,
						"description": "Search query"
					},
					"limit": {
						"type": "number",
						"minimum": 1,
						"maximum": 50,
						"default": 10,
						"description": "Maximum number of results"
					},
					"threshold": {
						"type": "number",
						"minimum": 0,
						"maximum": 1,
						"default": 0.7,
						"description": "Similarity threshold"
					}
				},
				"required": ["query"],
				"description": "Semantic search request"
			},
			"ChatResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Request success status"
					},
					"data": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string",
								"format": "uuid"
							},
							"userId": {
								"type": "string",
								"format": "uuid"
							},
							"title": {
								"type": "string",
								"maxLength": 255
							},
							"createdAt": {
								"type": "string",
								"nullable": true
							},
							"updatedAt": {
								"type": "string",
								"nullable": true
							}
						},
						"required": ["id", "userId", "title", "createdAt", "updatedAt"],
						"description": "Chat data"
					}
				},
				"required": ["success", "data"],
				"description": "Chat response"
			},
			"ChatListResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Request success status"
					},
					"data": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string",
									"format": "uuid"
								},
								"userId": {
									"type": "string",
									"format": "uuid"
								},
								"title": {
									"type": "string",
									"maxLength": 255
								},
								"createdAt": {
									"type": "string",
									"nullable": true
								},
								"updatedAt": {
									"type": "string",
									"nullable": true
								}
							},
							"required": ["id", "userId", "title", "createdAt", "updatedAt"],
							"description": "Chat conversation metadata"
						},
						"description": "List of chats"
					},
					"meta": {
						"type": "object",
						"properties": {
							"page": {
								"type": "number",
								"description": "Current page number"
							},
							"limit": {
								"type": "number",
								"description": "Items per page"
							},
							"total": {
								"type": "number",
								"description": "Total number of items"
							}
						},
						"required": ["page", "limit", "total"],
						"description": "Pagination metadata"
					}
				},
				"required": ["success", "data", "meta"],
				"description": "Chat list response"
			},
			"ChatWithMessagesResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Request success status"
					},
					"data": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string",
								"format": "uuid",
								"description": "Chat ID"
							},
							"userId": {
								"type": "string",
								"format": "uuid",
								"description": "User ID"
							},
							"title": {
								"type": "string",
								"description": "Chat title"
							},
							"createdAt": {
								"type": "string",
								"description": "Creation timestamp"
							},
							"updatedAt": {
								"type": "string",
								"description": "Last update timestamp"
							},
							"messages": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"format": "uuid"
										},
										"chatId": {
											"type": "string",
											"format": "uuid"
										},
										"role": {
											"type": "string",
											"maxLength": 20
										},
										"content": {
											"type": "string"
										},
										"metadata": {
											"anyOf": [
												{
													"type": "string"
												},
												{
													"type": "number"
												},
												{
													"type": "boolean"
												},
												{
													"nullable": true
												},
												{
													"type": "object",
													"additionalProperties": {
														"nullable": true
													}
												},
												{
													"type": "array",
													"items": {
														"nullable": true
													}
												},
												{
													"nullable": true
												}
											]
										},
										"embedding": {
											"type": "array",
											"nullable": true,
											"items": {
												"type": "number"
											}
										},
										"createdAt": {
											"type": "string",
											"nullable": true
										}
									},
									"required": [
										"id",
										"chatId",
										"role",
										"content",
										"metadata",
										"embedding",
										"createdAt"
									],
									"description": "Individual chat message"
								},
								"description": "Chat messages"
							}
						},
						"required": [
							"id",
							"userId",
							"title",
							"createdAt",
							"updatedAt",
							"messages"
						],
						"description": "Chat with messages"
					}
				},
				"required": ["success", "data"],
				"description": "Chat with messages response"
			},
			"StreamingEvent": {
				"oneOf": [
					{
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"enum": ["connected"],
								"description": "Connection established"
							},
							"message": {
								"type": "string",
								"description": "Connection message"
							}
						},
						"required": ["type", "message"]
					},
					{
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"enum": ["user_message"],
								"description": "User message saved"
							},
							"message": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string",
										"format": "uuid"
									},
									"chatId": {
										"type": "string",
										"format": "uuid"
									},
									"role": {
										"type": "string",
										"maxLength": 20
									},
									"content": {
										"type": "string"
									},
									"metadata": {
										"anyOf": [
											{
												"type": "string"
											},
											{
												"type": "number"
											},
											{
												"type": "boolean"
											},
											{
												"nullable": true
											},
											{
												"type": "object",
												"additionalProperties": {
													"nullable": true
												}
											},
											{
												"type": "array",
												"items": {
													"nullable": true
												}
											},
											{
												"nullable": true
											}
										]
									},
									"embedding": {
										"type": "array",
										"nullable": true,
										"items": {
											"type": "number"
										}
									},
									"createdAt": {
										"type": "string",
										"nullable": true
									}
								},
								"required": [
									"id",
									"chatId",
									"role",
									"content",
									"metadata",
									"embedding",
									"createdAt"
								],
								"description": "Saved user message"
							}
						},
						"required": ["type", "message"]
					},
					{
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"enum": ["stream_start"],
								"description": "AI response streaming started"
							},
							"messageId": {
								"type": "string",
								"format": "uuid",
								"description": "AI message ID"
							}
						},
						"required": ["type", "messageId"]
					},
					{
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"enum": ["chunk"],
								"description": "AI response chunk"
							},
							"content": {
								"type": "string",
								"description": "Chunk content"
							},
							"messageId": {
								"type": "string",
								"format": "uuid",
								"description": "AI message ID"
							}
						},
						"required": ["type", "content", "messageId"]
					},
					{
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"enum": ["stream_complete"],
								"description": "AI response streaming completed"
							},
							"messageId": {
								"type": "string",
								"format": "uuid",
								"description": "AI message ID"
							},
							"fullContent": {
								"type": "string",
								"description": "Complete AI response"
							}
						},
						"required": ["type", "messageId", "fullContent"]
					},
					{
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"enum": ["error"],
								"description": "Error occurred"
							},
							"error": {
								"type": "string",
								"description": "Error message"
							}
						},
						"required": ["type", "error"]
					}
				],
				"description": "Server-Sent Event for streaming chat"
			},
			"HealthResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Health status message",
						"example": "Api Health Status: OK"
					}
				},
				"required": ["message"],
				"description": "API health check response"
			},
			"SystemInfoResponse": {
				"type": "object",
				"properties": {
					"nodeVersion": {
						"type": "string",
						"description": "Node.js version",
						"example": "v18.17.0"
					},
					"platform": {
						"type": "string",
						"description": "Operating system platform",
						"example": "linux"
					},
					"architecture": {
						"type": "string",
						"description": "System architecture",
						"example": "x64"
					},
					"uptime": {
						"type": "number",
						"description": "System uptime in seconds",
						"example": 3600
					},
					"memoryUsage": {
						"type": "object",
						"properties": {
							"rss": {
								"type": "number",
								"description": "Resident Set Size in bytes",
								"example": 50331648
							},
							"heapTotal": {
								"type": "number",
								"description": "Total heap size in bytes",
								"example": 20971520
							},
							"heapUsed": {
								"type": "number",
								"description": "Used heap size in bytes",
								"example": 15728640
							},
							"external": {
								"type": "number",
								"description": "External memory usage in bytes",
								"example": 1048576
							}
						},
						"required": ["rss", "heapTotal", "heapUsed", "external"],
						"description": "Memory usage statistics"
					},
					"cpuUsage": {
						"type": "object",
						"properties": {
							"user": {
								"type": "number",
								"description": "User CPU time in microseconds",
								"example": 1000000
							},
							"system": {
								"type": "number",
								"description": "System CPU time in microseconds",
								"example": 500000
							}
						},
						"required": ["user", "system"],
						"description": "CPU usage statistics"
					},
					"timestamp": {
						"type": "string",
						"description": "ISO timestamp when the information was collected",
						"example": "2024-01-01T12:00:00.000Z"
					}
				},
				"required": [
					"nodeVersion",
					"platform",
					"architecture",
					"uptime",
					"memoryUsage",
					"cpuUsage",
					"timestamp"
				],
				"description": "System information response"
			},
			"DetailedHealthResponse": {
				"type": "object",
				"properties": {
					"status": {
						"type": "string",
						"enum": ["healthy", "unhealthy", "degraded"],
						"description": "Overall health status",
						"example": "healthy"
					},
					"message": {
						"type": "string",
						"description": "Health status message",
						"example": "API Health Status: HEALTHY"
					},
					"timestamp": {
						"type": "string",
						"description": "ISO timestamp when the health check was performed",
						"example": "2024-01-01T12:00:00.000Z"
					},
					"uptime": {
						"type": "number",
						"description": "Application uptime in seconds",
						"example": 3600
					},
					"version": {
						"type": "string",
						"description": "Application version",
						"example": "1.0.0"
					},
					"environment": {
						"type": "string",
						"description": "Environment name",
						"example": "production"
					},
					"checks": {
						"type": "object",
						"properties": {
							"database": {
								"type": "object",
								"properties": {
									"status": {
										"type": "string",
										"enum": ["healthy", "unhealthy", "unknown"],
										"description": "Database health status"
									},
									"responseTime": {
										"type": "number",
										"description": "Database response time in milliseconds"
									},
									"error": {
										"type": "string",
										"description": "Database error message if unhealthy"
									}
								},
								"required": ["status"]
							},
							"memory": {
								"type": "object",
								"properties": {
									"status": {
										"type": "string",
										"enum": ["healthy", "unhealthy"],
										"description": "Memory health status"
									},
									"usagePercent": {
										"type": "number",
										"description": "Memory usage percentage"
									},
									"usageMB": {
										"type": "number",
										"description": "Memory usage in megabytes"
									}
								},
								"required": ["status", "usagePercent", "usageMB"]
							},
							"disk": {
								"type": "object",
								"properties": {
									"status": {
										"type": "string",
										"enum": ["healthy", "unhealthy"],
										"description": "Disk health status"
									},
									"usagePercent": {
										"type": "number",
										"description": "Disk usage percentage"
									}
								},
								"required": ["status"]
							},
							"dependencies": {
								"type": "object",
								"properties": {
									"status": {
										"type": "string",
										"enum": ["healthy", "unhealthy", "degraded"],
										"description": "Dependencies health status"
									},
									"services": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string",
													"description": "Service name"
												},
												"status": {
													"type": "string",
													"enum": ["healthy", "unhealthy"],
													"description": "Service health status"
												},
												"responseTime": {
													"type": "number",
													"description": "Service response time in milliseconds"
												},
												"error": {
													"type": "string",
													"description": "Service error message if unhealthy"
												}
											},
											"required": ["name", "status"]
										}
									}
								},
								"required": ["status", "services"]
							}
						},
						"required": ["database", "memory", "disk", "dependencies"]
					}
				},
				"required": [
					"status",
					"message",
					"timestamp",
					"uptime",
					"version",
					"environment",
					"checks"
				],
				"description": "Detailed API health check response for ALB and monitoring"
			},
			"ReadinessResponse": {
				"type": "object",
				"properties": {
					"ready": {
						"type": "boolean",
						"description": "Whether the application is ready to receive traffic",
						"example": true
					},
					"message": {
						"type": "string",
						"description": "Readiness status message",
						"example": "Application is ready"
					},
					"timestamp": {
						"type": "string",
						"description": "ISO timestamp when the readiness check was performed",
						"example": "2024-01-01T12:00:00.000Z"
					},
					"checks": {
						"type": "object",
						"properties": {
							"database": {
								"type": "boolean",
								"description": "Database readiness status"
							},
							"dependencies": {
								"type": "boolean",
								"description": "Dependencies readiness status"
							},
							"configuration": {
								"type": "boolean",
								"description": "Configuration readiness status"
							}
						},
						"required": ["database", "dependencies", "configuration"]
					}
				},
				"required": ["ready", "message", "timestamp", "checks"],
				"description": "Application readiness probe response"
			},
			"LivenessResponse": {
				"type": "object",
				"properties": {
					"alive": {
						"type": "boolean",
						"description": "Whether the application is alive",
						"example": true
					},
					"message": {
						"type": "string",
						"description": "Liveness status message",
						"example": "Application is alive"
					},
					"timestamp": {
						"type": "string",
						"description": "ISO timestamp when the liveness check was performed",
						"example": "2024-01-01T12:00:00.000Z"
					},
					"uptime": {
						"type": "number",
						"description": "Application uptime in seconds",
						"example": 3600
					}
				},
				"required": ["alive", "message", "timestamp", "uptime"],
				"description": "Application liveness probe response"
			},
			"HealthErrorResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Error message",
						"example": "Api Status: Error"
					}
				},
				"required": ["message"],
				"description": "API health check error response"
			}
		},
		"parameters": {}
	},
	"paths": {
		"/auth/register": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Register new user",
				"description": "Creates a new user account with email and password. Sends confirmation email to verify the account.",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"format": "email",
										"description": "User email address"
									},
									"password": {
										"type": "string",
										"minLength": 8,
										"pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])",
										"description": "User password"
									},
									"confirmPassword": {
										"type": "string",
										"minLength": 8,
										"pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])",
										"description": "Confirm password"
									}
								},
								"required": ["email", "password", "confirmPassword"]
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "User registered successfully - confirmation email sent",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Response message"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"400": {
						"description": "Invalid request data - validation failed or passwords do not match",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Validation error message",
											"example": "Validation Failed"
										},
										"details": {
											"type": "object",
											"additionalProperties": {
												"nullable": true
											},
											"description": "Detailed validation error information",
											"example": {
												"field": "email",
												"message": "Invalid email format"
											}
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"409": {
						"description": "Conflict - User already exists (from database check)",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Conflict error message",
											"example": "Resource conflict"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"422": {
						"description": "User already exists in Cognito (UsernameExistsException)",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "User already exists error message",
											"example": "User already exists"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Too many registration attempts - rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Cognito or database error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/auth/confirm-registration": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Confirm user registration",
				"description": "Confirms user registration using the confirmation code sent via email.",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"format": "email",
										"description": "User email address"
									},
									"code": {
										"type": "number",
										"description": "Verification code sent to email"
									}
								},
								"required": ["email", "code"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "User registration confirmed successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Response message"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"400": {
						"description": "Invalid confirmation code (CodeMismatchException) or request data validation failed",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Invalid verification code error message",
											"example": "Invalid verification code"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - User already confirmed",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Forbidden error message",
											"example": "Forbidden"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Not found error message",
											"example": "Resource not found"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"410": {
						"description": "Verification code has expired (ExpiredCodeException)",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Expired verification code error message",
											"example": "Verification code has expired"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Too many confirmation attempts - rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Cognito or database error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/auth/resend-confirmation-code": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Resend confirmation code",
				"description": "Resends the confirmation code to the user's email address for account verification.",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"format": "email",
										"description": "User email address"
									}
								},
								"required": ["email"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Confirmation code resent successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Response message"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"400": {
						"description": "Invalid request data - validation failed or invalid email format",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Validation error message",
											"example": "Validation Failed"
										},
										"details": {
											"type": "object",
											"additionalProperties": {
												"nullable": true
											},
											"description": "Detailed validation error information",
											"example": {
												"field": "email",
												"message": "Invalid email format"
											}
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - User already confirmed",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Forbidden error message",
											"example": "Forbidden"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Not found error message",
											"example": "Resource not found"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Too many resend attempts - rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Cognito or database error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"tags": ["Authentication"],
				"summary": "User login",
				"description": "Authenticates a user with email and password, returning access tokens upon successful login.",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"format": "email",
										"description": "User email address"
									},
									"password": {
										"type": "string",
										"minLength": 8,
										"pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])",
										"description": "User password"
									}
								},
								"required": ["email", "password"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "User logged in successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Response message"
										},
										"tokens": {
											"type": "object",
											"properties": {
												"accessToken": {
													"type": "string",
													"description": "JWT access token"
												},
												"refreshToken": {
													"type": "string",
													"description": "JWT refresh token"
												},
												"expiresIn": {
													"type": "number",
													"description": "Token expiration time in seconds"
												}
											},
											"required": ["accessToken", "refreshToken", "expiresIn"],
											"description": "Authentication tokens"
										}
									},
									"required": ["message", "tokens"],
									"description": "Authentication response"
								}
							}
						}
					},
					"400": {
						"description": "Invalid credentials or request data",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Validation error message",
											"example": "Validation Failed"
										},
										"details": {
											"type": "object",
											"additionalProperties": {
												"nullable": true
											},
											"description": "Detailed validation error information",
											"example": {
												"field": "email",
												"message": "Invalid email format"
											}
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Invalid email or password",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - User not confirmed (UserNotConfirmedException)",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "User not confirmed error message",
											"example": "User is not confirmed"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Too many login attempts - rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Cognito or database error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/auth/forgot-password": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Initiate password reset",
				"description": "Initiates password reset process by sending a reset code to the user's email address.",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"format": "email",
										"description": "User email address"
									}
								},
								"required": ["email"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Password reset initiated successfully - reset code sent to email",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Response message"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"400": {
						"description": "Invalid request data - validation failed",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Validation error message",
											"example": "Validation Failed"
										},
										"details": {
											"type": "object",
											"additionalProperties": {
												"nullable": true
											},
											"description": "Detailed validation error information",
											"example": {
												"field": "email",
												"message": "Invalid email format"
											}
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Not found error message",
											"example": "Resource not found"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Too many password reset attempts - rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Cognito or database error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/auth/confirm-forgot-password": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Confirm password reset",
				"description": "Confirms password reset using the reset code and sets a new password.",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"format": "email",
										"description": "User email address"
									},
									"code": {
										"type": "string",
										"minLength": 6,
										"maxLength": 6,
										"description": "Verification code sent to email"
									},
									"newPassword": {
										"type": "string",
										"minLength": 8,
										"pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])",
										"description": "New password"
									},
									"confirmPassword": {
										"type": "string",
										"minLength": 8,
										"pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])",
										"description": "Confirm new password"
									}
								},
								"required": ["email", "code", "newPassword", "confirmPassword"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Password reset successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Response message"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"400": {
						"description": "Invalid reset code (CodeMismatchException) or request data validation failed",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Invalid verification code error message",
											"example": "Invalid verification code"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Not found error message",
											"example": "Resource not found"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"410": {
						"description": "Reset code has expired (ExpiredCodeException)",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Expired verification code error message",
											"example": "Verification code has expired"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Too many password reset attempts - rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Cognito or database error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/auth/logout": {
			"post": {
				"tags": ["Authentication"],
				"summary": "User logout",
				"description": "Logs out the authenticated user and invalidates their session.",
				"security": [
					{
						"cookieAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "User logged out successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Response message"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Cognito or database error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/auth/refresh": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Refresh access token",
				"description": "Refreshes the user's access token using a valid refresh token.",
				"responses": {
					"200": {
						"description": "Access token refreshed successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Response message"
										},
										"tokens": {
											"type": "object",
											"properties": {
												"accessToken": {
													"type": "string",
													"description": "JWT access token"
												},
												"refreshToken": {
													"type": "string",
													"description": "JWT refresh token"
												},
												"expiresIn": {
													"type": "number",
													"description": "Token expiration time in seconds"
												}
											},
											"required": ["accessToken", "refreshToken", "expiresIn"],
											"description": "Authentication tokens"
										}
									},
									"required": ["message", "tokens"],
									"description": "Authentication response"
								}
							}
						}
					},
					"400": {
						"description": "Invalid refresh token or request data",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Validation error message",
											"example": "Validation Failed"
										},
										"details": {
											"type": "object",
											"additionalProperties": {
												"nullable": true
											},
											"description": "Detailed validation error information",
											"example": {
												"field": "email",
												"message": "Invalid email format"
											}
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Invalid or expired refresh token",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Cognito or database error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/auth/user": {
			"get": {
				"tags": ["Authentication"],
				"summary": "Get authenticated user information",
				"description": "Retrieves the authenticated user's information from Cognito.",
				"security": [
					{
						"cookieAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "User information retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "User ID"
										},
										"email": {
											"type": "string",
											"description": "User email address"
										},
										"emailVerified": {
											"type": "boolean",
											"description": "Email verification status"
										}
									},
									"required": ["id", "email", "emailVerified"]
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Cognito or database error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/chats": {
			"get": {
				"tags": ["Chat Management"],
				"summary": "Get user chats",
				"description": "Retrieves all chats for the authenticated user with pagination support. Supports optional query parameters: page (default: 1) and limit (default: 20, max: 100).",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"required": false,
						"description": "Page number for pagination",
						"schema": {
							"type": "integer",
							"minimum": 1,
							"default": 1,
							"example": 1
						}
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"description": "Number of chats per page (max 100)",
						"schema": {
							"type": "integer",
							"minimum": 1,
							"maximum": 100,
							"default": 20,
							"example": 20
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successfully retrieved user chats",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"type": "boolean",
											"description": "Request success status"
										},
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string",
														"format": "uuid"
													},
													"userId": {
														"type": "string",
														"format": "uuid"
													},
													"title": {
														"type": "string",
														"maxLength": 255
													},
													"createdAt": {
														"type": "string",
														"nullable": true
													},
													"updatedAt": {
														"type": "string",
														"nullable": true
													}
												},
												"required": [
													"id",
													"userId",
													"title",
													"createdAt",
													"updatedAt"
												],
												"description": "Chat conversation metadata"
											},
											"description": "List of chats"
										},
										"meta": {
											"type": "object",
											"properties": {
												"page": {
													"type": "number",
													"description": "Current page number"
												},
												"limit": {
													"type": "number",
													"description": "Items per page"
												},
												"total": {
													"type": "number",
													"description": "Total number of items"
												}
											},
											"required": ["page", "limit", "total"],
											"description": "Pagination metadata"
										}
									},
									"required": ["success", "data", "meta"]
								}
							}
						}
					},
					"401": {
						"description": "Authentication required",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Database or service error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": ["Chat Management"],
				"summary": "Create new chat",
				"description": "Creates a new chat conversation for the authenticated user.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string",
										"minLength": 1,
										"maxLength": 255,
										"description": "Chat title"
									}
								},
								"required": ["title"]
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Chat created successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"type": "boolean",
											"description": "Request success status"
										},
										"data": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"format": "uuid"
												},
												"userId": {
													"type": "string",
													"format": "uuid"
												},
												"title": {
													"type": "string",
													"maxLength": 255
												},
												"createdAt": {
													"type": "string",
													"nullable": true
												},
												"updatedAt": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"id",
												"userId",
												"title",
												"createdAt",
												"updatedAt"
											],
											"description": "Chat data"
										}
									},
									"required": ["success", "data"]
								}
							}
						}
					},
					"400": {
						"description": "Invalid request data",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Validation error message",
											"example": "Validation Failed"
										},
										"details": {
											"type": "object",
											"additionalProperties": {
												"nullable": true
											},
											"description": "Detailed validation error information",
											"example": {
												"field": "email",
												"message": "Invalid email format"
											}
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"401": {
						"description": "Authentication required",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Database or service error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/chats/{id}": {
			"get": {
				"tags": ["Chat Management"],
				"summary": "Get chat by ID",
				"description": "Retrieves a specific chat with all its messages. User must own the chat.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "Chat ID",
						"schema": {
							"type": "string",
							"format": "uuid",
							"example": "123e4567-e89b-12d3-a456-426614174000"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successfully retrieved chat with messages",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"type": "boolean",
											"description": "Request success status"
										},
										"data": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"format": "uuid",
													"description": "Chat ID"
												},
												"userId": {
													"type": "string",
													"format": "uuid",
													"description": "User ID"
												},
												"title": {
													"type": "string",
													"description": "Chat title"
												},
												"createdAt": {
													"type": "string",
													"description": "Creation timestamp"
												},
												"updatedAt": {
													"type": "string",
													"description": "Last update timestamp"
												},
												"messages": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"id": {
																"type": "string",
																"format": "uuid"
															},
															"chatId": {
																"type": "string",
																"format": "uuid"
															},
															"role": {
																"type": "string",
																"maxLength": 20
															},
															"content": {
																"type": "string"
															},
															"metadata": {
																"anyOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "number"
																	},
																	{
																		"type": "boolean"
																	},
																	{
																		"nullable": true
																	},
																	{
																		"type": "object",
																		"additionalProperties": {
																			"nullable": true
																		}
																	},
																	{
																		"type": "array",
																		"items": {
																			"nullable": true
																		}
																	},
																	{
																		"nullable": true
																	}
																]
															},
															"embedding": {
																"type": "array",
																"nullable": true,
																"items": {
																	"type": "number"
																}
															},
															"createdAt": {
																"type": "string",
																"nullable": true
															}
														},
														"required": [
															"id",
															"chatId",
															"role",
															"content",
															"metadata",
															"embedding",
															"createdAt"
														],
														"description": "Individual chat message"
													},
													"description": "Chat messages"
												}
											},
											"required": [
												"id",
												"userId",
												"title",
												"createdAt",
												"updatedAt",
												"messages"
											],
											"description": "Chat with messages"
										}
									},
									"required": ["success", "data"]
								}
							}
						}
					},
					"401": {
						"description": "Authentication required",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"404": {
						"description": "Chat not found or access denied",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Not found error message",
											"example": "Resource not found"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Database or service error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Chat Management"],
				"summary": "Update chat",
				"description": "Updates chat title. User must own the chat.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "Chat ID",
						"schema": {
							"type": "string",
							"format": "uuid",
							"example": "123e4567-e89b-12d3-a456-426614174000"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string",
										"minLength": 1,
										"maxLength": 255,
										"description": "Chat title"
									}
								},
								"required": ["title"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Chat updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"type": "boolean",
											"description": "Request success status"
										},
										"data": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"format": "uuid"
												},
												"userId": {
													"type": "string",
													"format": "uuid"
												},
												"title": {
													"type": "string",
													"maxLength": 255
												},
												"createdAt": {
													"type": "string",
													"nullable": true
												},
												"updatedAt": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"id",
												"userId",
												"title",
												"createdAt",
												"updatedAt"
											],
											"description": "Chat data"
										}
									},
									"required": ["success", "data"]
								}
							}
						}
					},
					"400": {
						"description": "Invalid request data",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Validation error message",
											"example": "Validation Failed"
										},
										"details": {
											"type": "object",
											"additionalProperties": {
												"nullable": true
											},
											"description": "Detailed validation error information",
											"example": {
												"field": "email",
												"message": "Invalid email format"
											}
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"401": {
						"description": "Authentication required",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"404": {
						"description": "Chat not found or access denied",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Not found error message",
											"example": "Resource not found"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Database or service error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["Chat Management"],
				"summary": "Delete chat",
				"description": "Deletes a chat and all its messages. User must own the chat. This action cannot be undone.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "Chat ID",
						"schema": {
							"type": "string",
							"format": "uuid",
							"example": "123e4567-e89b-12d3-a456-426614174000"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Chat deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"type": "boolean",
											"example": true
										},
										"message": {
											"type": "string",
											"example": "Chat deleted successfully"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Authentication required",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"404": {
						"description": "Chat not found or access denied",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Not found error message",
											"example": "Resource not found"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Server error - Database or service error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/chats/{id}/stream": {
			"post": {
				"description": "Send a message and receive streaming AI response via Server-Sent Events",
				"summary": "Stream chat message response",
				"tags": ["Chat"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"schema": {
							"type": "string",
							"format": "uuid",
							"description": "Chat ID"
						},
						"required": true,
						"name": "id",
						"in": "path"
					}
				],
				"requestBody": {
					"description": "Message to send",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"messages": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"role": {
													"type": "string",
													"enum": ["user", "assistant", "system"],
													"description": "Message role"
												},
												"content": {
													"type": "string",
													"minLength": 1,
													"maxLength": 10000,
													"description": "Message content"
												}
											},
											"required": ["role", "content"]
										},
										"minItems": 1,
										"description": "Array of conversation messages"
									}
								},
								"required": ["messages"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Streaming text response compatible with Vercel AI SDK",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string",
									"description": "Plain text chunks streamed directly to client"
								},
								"examples": {
									"streaming": {
										"summary": "AI response streaming",
										"value": "Hello, how can I help you today?"
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid request parameters",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Validation error message",
											"example": "Validation Failed"
										},
										"details": {
											"type": "object",
											"additionalProperties": {
												"nullable": true
											},
											"description": "Detailed validation error information",
											"example": {
												"field": "email",
												"message": "Invalid email format"
											}
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"401": {
						"description": "Authentication required",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"404": {
						"description": "Chat not found or access denied",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Not found error message",
											"example": "Resource not found"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/users/{id}": {
			"get": {
				"tags": ["Users"],
				"summary": "Get user by ID",
				"description": "Retrieves a user's profile information by their unique identifier. Requires authentication.",
				"security": [
					{
						"cookieAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "The unique identifier of the user",
						"schema": {
							"type": "string",
							"format": "uuid",
							"example": "123e4567-e89b-12d3-a456-426614174000"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User profile retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"user": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"format": "uuid"
												},
												"email": {
													"type": "string",
													"maxLength": 255
												},
												"emailVerified": {
													"type": "boolean",
													"nullable": true
												},
												"firstName": {
													"type": "string",
													"nullable": true,
													"maxLength": 255
												},
												"lastName": {
													"type": "string",
													"nullable": true,
													"maxLength": 255
												},
												"createdAt": {
													"type": "string",
													"nullable": true
												},
												"updatedAt": {
													"type": "string",
													"nullable": true
												},
												"lastLogin": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"id",
												"email",
												"emailVerified",
												"firstName",
												"lastName",
												"createdAt",
												"updatedAt",
												"lastLogin"
											],
											"description": "User profile data"
										}
									},
									"required": ["user"]
								}
							}
						}
					},
					"400": {
						"description": "Invalid user ID format or missing required parameters",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Validation error message",
											"example": "Validation Failed"
										},
										"details": {
											"type": "object",
											"additionalProperties": {
												"nullable": true
											},
											"description": "Detailed validation error information",
											"example": {
												"field": "email",
												"message": "Invalid email format"
											}
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required, token expired, or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"404": {
						"description": "User not found - No user exists with the specified ID",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Not found error message",
											"example": "Resource not found"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Too many requests - rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Internal server error - Database or service error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/users/me": {
			"get": {
				"tags": ["Users"],
				"summary": "Get current user profile",
				"description": "Retrieves the authenticated user's profile information including personal details and account status",
				"security": [
					{
						"cookieAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "User profile retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"user": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"format": "uuid"
												},
												"email": {
													"type": "string",
													"maxLength": 255
												},
												"emailVerified": {
													"type": "boolean",
													"nullable": true
												},
												"firstName": {
													"type": "string",
													"nullable": true,
													"maxLength": 255
												},
												"lastName": {
													"type": "string",
													"nullable": true,
													"maxLength": 255
												},
												"createdAt": {
													"type": "string",
													"nullable": true
												},
												"updatedAt": {
													"type": "string",
													"nullable": true
												},
												"lastLogin": {
													"type": "string",
													"nullable": true
												}
											},
											"required": [
												"id",
												"email",
												"emailVerified",
												"firstName",
												"lastName",
												"createdAt",
												"updatedAt",
												"lastLogin"
											],
											"description": "User profile data"
										}
									},
									"required": ["user"]
								}
							}
						}
					},
					"400": {
						"description": "Invalid request - Authentication token validation failed",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Validation error message",
											"example": "Validation Failed"
										},
										"details": {
											"type": "object",
											"additionalProperties": {
												"nullable": true
											},
											"description": "Detailed validation error information",
											"example": {
												"field": "email",
												"message": "Invalid email format"
											}
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required, token expired, or invalid token",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Unauthorized error message",
											"example": "Authentication required"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"404": {
						"description": "User not found - The authenticated user does not exist in the system",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Not found error message",
											"example": "Resource not found"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"429": {
						"description": "Too many requests - rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Internal server error - Database or service error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/health": {
			"get": {
				"tags": ["Utility"],
				"summary": "Health check endpoint",
				"description": "Returns the current health status of the API service. No rate limiting applied to ensure ALB health checks work reliably.",
				"responses": {
					"200": {
						"description": "Health check successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Health status message",
											"example": "Api Health Status: OK"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"500": {
						"description": "Health check failed - internal server error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/system-info": {
			"get": {
				"tags": ["Utility"],
				"summary": "System information endpoint",
				"description": "Returns detailed system information including Node.js version, platform, memory usage, and CPU statistics",
				"responses": {
					"200": {
						"description": "System information retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"nodeVersion": {
											"type": "string",
											"description": "Node.js version",
											"example": "v18.17.0"
										},
										"platform": {
											"type": "string",
											"description": "Operating system platform",
											"example": "linux"
										},
										"architecture": {
											"type": "string",
											"description": "System architecture",
											"example": "x64"
										},
										"uptime": {
											"type": "number",
											"description": "System uptime in seconds",
											"example": 3600
										},
										"memoryUsage": {
											"type": "object",
											"properties": {
												"rss": {
													"type": "number",
													"description": "Resident Set Size in bytes",
													"example": 50331648
												},
												"heapTotal": {
													"type": "number",
													"description": "Total heap size in bytes",
													"example": 20971520
												},
												"heapUsed": {
													"type": "number",
													"description": "Used heap size in bytes",
													"example": 15728640
												},
												"external": {
													"type": "number",
													"description": "External memory usage in bytes",
													"example": 1048576
												}
											},
											"required": ["rss", "heapTotal", "heapUsed", "external"],
											"description": "Memory usage statistics"
										},
										"cpuUsage": {
											"type": "object",
											"properties": {
												"user": {
													"type": "number",
													"description": "User CPU time in microseconds",
													"example": 1000000
												},
												"system": {
													"type": "number",
													"description": "System CPU time in microseconds",
													"example": 500000
												}
											},
											"required": ["user", "system"],
											"description": "CPU usage statistics"
										},
										"timestamp": {
											"type": "string",
											"description": "ISO timestamp when the information was collected",
											"example": "2024-01-01T12:00:00.000Z"
										}
									},
									"required": [
										"nodeVersion",
										"platform",
										"architecture",
										"uptime",
										"memoryUsage",
										"cpuUsage",
										"timestamp"
									]
								}
							}
						}
					},
					"429": {
						"description": "Too many requests - rate limit exceeded",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "number",
											"description": "HTTP status code",
											"example": 429
										},
										"message": {
											"type": "string",
											"description": "Rate limit error message",
											"example": "Too many requests, please try again later."
										}
									},
									"required": ["status", "message"]
								}
							}
						}
					},
					"500": {
						"description": "Failed to retrieve system information - internal server error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					}
				}
			}
		},
		"/health/detailed": {
			"get": {
				"tags": ["Utility"],
				"summary": "Detailed health check endpoint for ALB and monitoring",
				"description": "Returns comprehensive health status including database, memory, disk, and dependencies checks. No rate limiting applied to ensure ALB health checks work reliably.",
				"responses": {
					"200": {
						"description": "Detailed health check successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"enum": ["healthy", "unhealthy", "degraded"],
											"description": "Overall health status",
											"example": "healthy"
										},
										"message": {
											"type": "string",
											"description": "Health status message",
											"example": "API Health Status: HEALTHY"
										},
										"timestamp": {
											"type": "string",
											"description": "ISO timestamp when the health check was performed",
											"example": "2024-01-01T12:00:00.000Z"
										},
										"uptime": {
											"type": "number",
											"description": "Application uptime in seconds",
											"example": 3600
										},
										"version": {
											"type": "string",
											"description": "Application version",
											"example": "1.0.0"
										},
										"environment": {
											"type": "string",
											"description": "Environment name",
											"example": "production"
										},
										"checks": {
											"type": "object",
											"properties": {
												"database": {
													"type": "object",
													"properties": {
														"status": {
															"type": "string",
															"enum": ["healthy", "unhealthy", "unknown"],
															"description": "Database health status"
														},
														"responseTime": {
															"type": "number",
															"description": "Database response time in milliseconds"
														},
														"error": {
															"type": "string",
															"description": "Database error message if unhealthy"
														}
													},
													"required": ["status"]
												},
												"memory": {
													"type": "object",
													"properties": {
														"status": {
															"type": "string",
															"enum": ["healthy", "unhealthy"],
															"description": "Memory health status"
														},
														"usagePercent": {
															"type": "number",
															"description": "Memory usage percentage"
														},
														"usageMB": {
															"type": "number",
															"description": "Memory usage in megabytes"
														}
													},
													"required": ["status", "usagePercent", "usageMB"]
												},
												"disk": {
													"type": "object",
													"properties": {
														"status": {
															"type": "string",
															"enum": ["healthy", "unhealthy"],
															"description": "Disk health status"
														},
														"usagePercent": {
															"type": "number",
															"description": "Disk usage percentage"
														}
													},
													"required": ["status"]
												},
												"dependencies": {
													"type": "object",
													"properties": {
														"status": {
															"type": "string",
															"enum": ["healthy", "unhealthy", "degraded"],
															"description": "Dependencies health status"
														},
														"services": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "Service name"
																	},
																	"status": {
																		"type": "string",
																		"enum": ["healthy", "unhealthy"],
																		"description": "Service health status"
																	},
																	"responseTime": {
																		"type": "number",
																		"description": "Service response time in milliseconds"
																	},
																	"error": {
																		"type": "string",
																		"description": "Service error message if unhealthy"
																	}
																},
																"required": ["name", "status"]
															}
														}
													},
													"required": ["status", "services"]
												}
											},
											"required": ["database", "memory", "disk", "dependencies"]
										}
									},
									"required": [
										"status",
										"message",
										"timestamp",
										"uptime",
										"version",
										"environment",
										"checks"
									]
								}
							}
						}
					},
					"500": {
						"description": "Health check failed - internal server error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"503": {
						"description": "Service is unhealthy",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"enum": ["healthy", "unhealthy", "degraded"],
											"description": "Overall health status",
											"example": "healthy"
										},
										"message": {
											"type": "string",
											"description": "Health status message",
											"example": "API Health Status: HEALTHY"
										},
										"timestamp": {
											"type": "string",
											"description": "ISO timestamp when the health check was performed",
											"example": "2024-01-01T12:00:00.000Z"
										},
										"uptime": {
											"type": "number",
											"description": "Application uptime in seconds",
											"example": 3600
										},
										"version": {
											"type": "string",
											"description": "Application version",
											"example": "1.0.0"
										},
										"environment": {
											"type": "string",
											"description": "Environment name",
											"example": "production"
										},
										"checks": {
											"type": "object",
											"properties": {
												"database": {
													"type": "object",
													"properties": {
														"status": {
															"type": "string",
															"enum": ["healthy", "unhealthy", "unknown"],
															"description": "Database health status"
														},
														"responseTime": {
															"type": "number",
															"description": "Database response time in milliseconds"
														},
														"error": {
															"type": "string",
															"description": "Database error message if unhealthy"
														}
													},
													"required": ["status"]
												},
												"memory": {
													"type": "object",
													"properties": {
														"status": {
															"type": "string",
															"enum": ["healthy", "unhealthy"],
															"description": "Memory health status"
														},
														"usagePercent": {
															"type": "number",
															"description": "Memory usage percentage"
														},
														"usageMB": {
															"type": "number",
															"description": "Memory usage in megabytes"
														}
													},
													"required": ["status", "usagePercent", "usageMB"]
												},
												"disk": {
													"type": "object",
													"properties": {
														"status": {
															"type": "string",
															"enum": ["healthy", "unhealthy"],
															"description": "Disk health status"
														},
														"usagePercent": {
															"type": "number",
															"description": "Disk usage percentage"
														}
													},
													"required": ["status"]
												},
												"dependencies": {
													"type": "object",
													"properties": {
														"status": {
															"type": "string",
															"enum": ["healthy", "unhealthy", "degraded"],
															"description": "Dependencies health status"
														},
														"services": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "Service name"
																	},
																	"status": {
																		"type": "string",
																		"enum": ["healthy", "unhealthy"],
																		"description": "Service health status"
																	},
																	"responseTime": {
																		"type": "number",
																		"description": "Service response time in milliseconds"
																	},
																	"error": {
																		"type": "string",
																		"description": "Service error message if unhealthy"
																	}
																},
																"required": ["name", "status"]
															}
														}
													},
													"required": ["status", "services"]
												}
											},
											"required": ["database", "memory", "disk", "dependencies"]
										}
									},
									"required": [
										"status",
										"message",
										"timestamp",
										"uptime",
										"version",
										"environment",
										"checks"
									]
								}
							}
						}
					}
				}
			}
		},
		"/health/ready": {
			"get": {
				"tags": ["Utility"],
				"summary": "Readiness probe endpoint",
				"description": "Returns whether the application is ready to receive traffic (Kubernetes-style readiness probe). No rate limiting applied to ensure ALB health checks work reliably.",
				"responses": {
					"200": {
						"description": "Application is ready",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"ready": {
											"type": "boolean",
											"description": "Whether the application is ready to receive traffic",
											"example": true
										},
										"message": {
											"type": "string",
											"description": "Readiness status message",
											"example": "Application is ready"
										},
										"timestamp": {
											"type": "string",
											"description": "ISO timestamp when the readiness check was performed",
											"example": "2024-01-01T12:00:00.000Z"
										},
										"checks": {
											"type": "object",
											"properties": {
												"database": {
													"type": "boolean",
													"description": "Database readiness status"
												},
												"dependencies": {
													"type": "boolean",
													"description": "Dependencies readiness status"
												},
												"configuration": {
													"type": "boolean",
													"description": "Configuration readiness status"
												}
											},
											"required": ["database", "dependencies", "configuration"]
										}
									},
									"required": ["ready", "message", "timestamp", "checks"]
								}
							}
						}
					},
					"500": {
						"description": "Readiness check failed - internal server error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"503": {
						"description": "Application is not ready",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"ready": {
											"type": "boolean",
											"description": "Whether the application is ready to receive traffic",
											"example": true
										},
										"message": {
											"type": "string",
											"description": "Readiness status message",
											"example": "Application is ready"
										},
										"timestamp": {
											"type": "string",
											"description": "ISO timestamp when the readiness check was performed",
											"example": "2024-01-01T12:00:00.000Z"
										},
										"checks": {
											"type": "object",
											"properties": {
												"database": {
													"type": "boolean",
													"description": "Database readiness status"
												},
												"dependencies": {
													"type": "boolean",
													"description": "Dependencies readiness status"
												},
												"configuration": {
													"type": "boolean",
													"description": "Configuration readiness status"
												}
											},
											"required": ["database", "dependencies", "configuration"]
										}
									},
									"required": ["ready", "message", "timestamp", "checks"]
								}
							}
						}
					}
				}
			}
		},
		"/health/ready/public": {
			"get": {
				"tags": ["Utility"],
				"summary": "Public readiness probe endpoint",
				"description": "Returns minimal readiness information without detailed error messages in production. Suitable for public ALB health checks. No rate limiting applied.",
				"responses": {
					"200": {
						"description": "Application is ready",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"ready": {
											"type": "boolean",
											"description": "Whether the application is ready to receive traffic",
											"example": true
										},
										"message": {
											"type": "string",
											"description": "Readiness status message",
											"example": "Application is ready"
										},
										"timestamp": {
											"type": "string",
											"description": "ISO timestamp when the readiness check was performed",
											"example": "2024-01-01T12:00:00.000Z"
										},
										"checks": {
											"type": "object",
											"properties": {
												"database": {
													"type": "boolean",
													"description": "Database readiness status"
												},
												"dependencies": {
													"type": "boolean",
													"description": "Dependencies readiness status"
												},
												"configuration": {
													"type": "boolean",
													"description": "Configuration readiness status"
												}
											},
											"required": ["database", "dependencies", "configuration"]
										}
									},
									"required": ["ready", "message", "timestamp", "checks"]
								}
							}
						}
					},
					"500": {
						"description": "Readiness check failed - internal server error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"503": {
						"description": "Application is not ready",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"ready": {
											"type": "boolean",
											"description": "Whether the application is ready to receive traffic",
											"example": true
										},
										"message": {
											"type": "string",
											"description": "Readiness status message",
											"example": "Application is ready"
										},
										"timestamp": {
											"type": "string",
											"description": "ISO timestamp when the readiness check was performed",
											"example": "2024-01-01T12:00:00.000Z"
										},
										"checks": {
											"type": "object",
											"properties": {
												"database": {
													"type": "boolean",
													"description": "Database readiness status"
												},
												"dependencies": {
													"type": "boolean",
													"description": "Dependencies readiness status"
												},
												"configuration": {
													"type": "boolean",
													"description": "Configuration readiness status"
												}
											},
											"required": ["database", "dependencies", "configuration"]
										}
									},
									"required": ["ready", "message", "timestamp", "checks"]
								}
							}
						}
					}
				}
			}
		},
		"/health/live": {
			"get": {
				"tags": ["Utility"],
				"summary": "Liveness probe endpoint",
				"description": "Returns whether the application is alive and should not be restarted (Kubernetes-style liveness probe). No rate limiting applied to ensure ALB health checks work reliably.",
				"responses": {
					"200": {
						"description": "Application is alive",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"alive": {
											"type": "boolean",
											"description": "Whether the application is alive",
											"example": true
										},
										"message": {
											"type": "string",
											"description": "Liveness status message",
											"example": "Application is alive"
										},
										"timestamp": {
											"type": "string",
											"description": "ISO timestamp when the liveness check was performed",
											"example": "2024-01-01T12:00:00.000Z"
										},
										"uptime": {
											"type": "number",
											"description": "Application uptime in seconds",
											"example": 3600
										}
									},
									"required": ["alive", "message", "timestamp", "uptime"]
								}
							}
						}
					},
					"500": {
						"description": "Liveness check failed - internal server error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "Internal server error message",
											"example": "Internal server error"
										}
									},
									"required": ["message"]
								}
							}
						}
					},
					"503": {
						"description": "Application is not alive",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"alive": {
											"type": "boolean",
											"description": "Whether the application is alive",
											"example": true
										},
										"message": {
											"type": "string",
											"description": "Liveness status message",
											"example": "Application is alive"
										},
										"timestamp": {
											"type": "string",
											"description": "ISO timestamp when the liveness check was performed",
											"example": "2024-01-01T12:00:00.000Z"
										},
										"uptime": {
											"type": "number",
											"description": "Application uptime in seconds",
											"example": 3600
										}
									},
									"required": ["alive", "message", "timestamp", "uptime"]
								}
							}
						}
					}
				}
			}
		}
	}
}

{
	"openapi": "3.1.0",
	"info": {
		"title": "Macro AI Express API with Swagger",
		"version": "0.0.1",
		"description": "This is a simple CRUD API application made with Express and documented with Swagger",
		"license": {
			"name": "MIT",
			"url": "https://spdx.org/licenses/MIT.html"
		}
	},
	"servers": [
		{
			"url": "http://localhost:3030/api"
		}
	],
	"components": {
		"securitySchemes": {
			"cookieAuth": {
				"type": "apiKey",
				"in": "cookie",
				"name": "macro-ai-accessToken"
			},
			"apiKeyAuth": {
				"type": "apiKey",
				"in": "header",
				"name": "X-API-KEY"
			}
		},
		"schemas": {
			"UserProfile": {
				"type": "object",
				"required": ["id", "email", "emailVerified"],
				"properties": {
					"id": {
						"type": "string",
						"description": "User ID (from Cognito)",
						"example": "user123"
					},
					"email": {
						"type": "string",
						"description": "User email",
						"example": "user@example.com"
					},
					"emailVerified": {
						"type": "boolean",
						"description": "Whether the user email is verified",
						"example": true
					},
					"firstName": {
						"type": "string",
						"description": "User first name",
						"example": "John"
					},
					"lastName": {
						"type": "string",
						"description": "User last name",
						"example": "Doe"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "User creation timestamp",
						"example": "2023-01-01T00:00:00Z"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "User last update timestamp",
						"example": "2023-01-01T00:00:00Z"
					},
					"lastLogin": {
						"type": "string",
						"format": "date-time",
						"description": "User last login timestamp",
						"example": "2023-01-01T00:00:00Z"
					}
				}
			},
			"CreateUserRequest": {
				"type": "object",
				"required": ["id", "email"],
				"properties": {
					"id": {
						"type": "string",
						"description": "User ID (from Cognito)",
						"example": "user123"
					},
					"email": {
						"type": "string",
						"description": "User email",
						"example": "user@example.com"
					},
					"emailVerified": {
						"type": "boolean",
						"description": "Whether the user email is verified",
						"example": false
					},
					"firstName": {
						"type": "string",
						"description": "User first name (optional)",
						"example": "John"
					},
					"lastName": {
						"type": "string",
						"description": "User last name (optional)",
						"example": "Doe"
					}
				}
			},
			"AuthResponse": {
				"type": "object",
				"required": ["message"],
				"properties": {
					"message": {
						"type": "string",
						"example": "Registration successful. Please check your email for verification code."
					},
					"user": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string",
								"example": "user123"
							},
							"email": {
								"type": "string",
								"example": "user@example.com"
							}
						}
					},
					"tokens": {
						"type": "object",
						"properties": {
							"accessToken": {
								"type": "string",
								"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
							},
							"refreshToken": {
								"type": "string",
								"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
							},
							"expiresIn": {
								"type": "number",
								"example": 3600
							}
						}
					}
				}
			},
			"GetAuthUserResponse": {
				"type": "object",
				"required": ["id", "email", "emailVerified"],
				"properties": {
					"id": {
						"type": "string",
						"description": "User ID",
						"example": "user123"
					},
					"email": {
						"type": "string",
						"description": "User email",
						"example": "user@example.com"
					},
					"emailVerified": {
						"type": "boolean",
						"description": "Whether the user's email is verified",
						"example": true
					},
					"firstName": {
						"type": "string",
						"description": "User first name",
						"example": "John"
					},
					"lastName": {
						"type": "string",
						"description": "User last name",
						"example": "Doe"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "User creation timestamp",
						"example": "2023-01-01T00:00:00Z"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "User last update timestamp",
						"example": "2023-01-01T00:00:00Z"
					},
					"lastLogin": {
						"type": "string",
						"format": "date-time",
						"description": "User last login timestamp",
						"example": "2023-01-01T00:00:00Z"
					}
				}
			},
			"TokenResponse": {
				"type": "object",
				"required": ["accessToken", "refreshToken", "expiresIn"],
				"properties": {
					"accessToken": {
						"type": "string",
						"description": "JWT access token",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
					},
					"refreshToken": {
						"type": "string",
						"description": "JWT refresh token",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
					},
					"expiresIn": {
						"type": "number",
						"description": "Token expiration time in seconds",
						"example": 3600
					}
				}
			},
			"LoginRequest": {
				"type": "object",
				"required": ["email", "password"],
				"properties": {
					"email": {
						"type": "string",
						"description": "User email",
						"example": "user@example.com"
					},
					"password": {
						"type": "string",
						"description": "User password",
						"example": "Password123!"
					}
				}
			},
			"RegisterRequest": {
				"type": "object",
				"required": ["email", "password"],
				"properties": {
					"email": {
						"type": "string",
						"description": "User email",
						"example": "user@example.com"
					},
					"password": {
						"type": "string",
						"description": "User password",
						"example": "Password123!"
					},
					"firstName": {
						"type": "string",
						"description": "User first name (optional)",
						"example": "John"
					},
					"lastName": {
						"type": "string",
						"description": "User last name (optional)",
						"example": "Doe"
					}
				}
			},
			"RefreshTokenRequest": {
				"type": "object",
				"required": ["refreshToken"],
				"properties": {
					"refreshToken": {
						"type": "string",
						"description": "JWT refresh token",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
					}
				}
			},
			"ForgotPasswordRequest": {
				"type": "object",
				"required": ["email"],
				"properties": {
					"email": {
						"type": "string",
						"description": "User email",
						"example": "user@example.com"
					}
				}
			},
			"ConfirmForgotPasswordRequest": {
				"type": "object",
				"required": ["email", "code", "newPassword"],
				"properties": {
					"email": {
						"type": "string",
						"description": "User email",
						"example": "user@example.com"
					},
					"code": {
						"type": "string",
						"description": "Verification code sent to email",
						"example": "123456"
					},
					"newPassword": {
						"type": "string",
						"description": "New password",
						"example": "NewPassword123!"
					}
				}
			},
			"ConfirmRegistration": {
				"type": "object",
				"required": ["username", "code"],
				"properties": {
					"username": {
						"type": "string",
						"description": "User email address",
						"example": "user@example.com"
					},
					"code": {
						"type": "number",
						"description": "Verification code sent to email",
						"example": 123456
					}
				}
			},
			"ResendConfirmationCode": {
				"type": "object",
				"required": ["username"],
				"properties": {
					"username": {
						"type": "string",
						"description": "User email address",
						"example": "user@example.com"
					}
				}
			},
			"HealthResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"example": "Api Health Status: OK"
					}
				}
			},
			"ErrorResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"example": "Error message"
					},
					"details": {
						"type": "object",
						"example": {
							"field": "Error details"
						}
					}
				}
			}
		},
		"responses": {
			"BadRequest": {
				"description": "Bad Request - The request was malformed or contains invalid parameters",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"message": {
									"type": "string",
									"example": "Validation Failed"
								},
								"details": {
									"type": "object",
									"example": {
										"field": "Error details"
									}
								}
							}
						}
					}
				}
			},
			"Unauthorized": {
				"description": "Unauthorized - Authentication is required or has failed",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"message": {
									"type": "string",
									"example": "Invalid credentials"
								}
							}
						}
					}
				}
			},
			"Forbidden": {
				"description": "Forbidden - The user does not have permission to access the resource",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"message": {
									"type": "string",
									"example": "Access denied"
								}
							}
						}
					}
				}
			},
			"NotFound": {
				"description": "Not Found - The requested resource was not found",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"message": {
									"type": "string",
									"example": "Resource not found"
								}
							}
						}
					}
				}
			},
			"ServerError": {
				"description": "Server Error - An unexpected error occurred on the server",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"message": {
									"type": "string",
									"example": "Internal server error"
								},
								"details": {
									"type": "object",
									"example": {
										"error": "Error details"
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"security": [
		{
			"cookieAuth": [],
			"apiKeyAuth": []
		}
	],
	"paths": {
		"/auth/register": {
			"post": {
				"summary": "Register a new user",
				"description": "Creates a new user account in Cognito and the application database",
				"tags": ["Authentication"],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegisterRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "User registered successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid input or user already exists",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"summary": "Login user",
				"description": "Authenticates a user and returns tokens as cookies and in response body",
				"tags": ["Authentication"],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Login successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"example": "Login successful"
										},
										"tokens": {
											"$ref": "#/components/schemas/TokenResponse"
										},
										"user": {
											"$ref": "#/components/schemas/UserProfile"
										}
									}
								}
							}
						},
						"headers": {
							"Set-Cookie": {
								"schema": {
									"type": "string",
									"description": "Authentication cookies (accessToken, refreshToken)"
								}
							}
						}
					},
					"400": {
						"description": "Invalid credentials",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/auth/refresh": {
			"post": {
				"summary": "Refresh access token",
				"description": "Uses a refresh token to obtain a new access token",
				"tags": ["Authentication"],
				"responses": {
					"200": {
						"description": "Token refreshed successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"example": "Token refreshed successfully"
										},
										"tokens": {
											"$ref": "#/components/schemas/TokenResponse"
										}
									}
								}
							}
						},
						"headers": {
							"Set-Cookie": {
								"schema": {
									"type": "string",
									"description": "Updated authentication cookies"
								}
							}
						}
					},
					"401": {
						"description": "Invalid or expired refresh token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/auth/logout": {
			"post": {
				"summary": "Logout user",
				"description": "Invalidates the user's tokens and clears authentication cookies",
				"tags": ["Authentication"],
				"security": [
					{
						"cookieAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "Logout successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"example": "Logout successful"
										}
									}
								}
							}
						},
						"headers": {
							"Set-Cookie": {
								"schema": {
									"type": "string",
									"description": "Cleared authentication cookies"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - No valid session",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/auth/confirm-registration": {
			"post": {
				"tags": ["Authorization"],
				"summary": "Confirm user registration with verification code",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ConfirmRegistration"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Registration confirmed successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid verification code",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/auth/resend-confirmation-code": {
			"post": {
				"tags": ["Authorization"],
				"summary": "Resend confirmation code",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResendConfirmationCode"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Confirmation code resent successfully"
					},
					"400": {
						"description": "Bad request"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/auth/user": {
			"get": {
				"tags": ["Authorization"],
				"summary": "Get user profile",
				"description": "Retrieves the authenticated user's profile information",
				"security": [
					{
						"cookieAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "User profile retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetAuthUserResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"type": "object",
											"properties": {
												"message": {
													"type": "string",
													"example": "Authentication required"
												}
											}
										},
										{
											"type": "object",
											"properties": {
												"message": {
													"type": "string",
													"example": "Authentication token expired"
												},
												"code": {
													"type": "string",
													"example": "TOKEN_EXPIRED"
												}
											}
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/auth/forgot-password": {
			"post": {
				"tags": ["Authorization"],
				"summary": "Request password reset",
				"description": "Sends a password reset code to the user's email",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"format": "email",
										"description": "User's email address",
										"example": "user@example.com"
									}
								},
								"required": ["email"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Password reset code sent successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["message"],
									"properties": {
										"message": {
											"type": "string",
											"example": "Password reset code has been sent to your email"
										}
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"$ref": "#/components/responses/ServerError"
					}
				}
			}
		},
		"/auth/confirm-forgot-password": {
			"post": {
				"tags": ["Authorization"],
				"summary": "Confirm password reset",
				"description": "Resets the user's password using the confirmation code",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"format": "email",
										"description": "User's email address",
										"example": "user@example.com"
									},
									"code": {
										"type": "string",
										"description": "Password reset confirmation code",
										"example": "123456"
									},
									"newPassword": {
										"type": "string",
										"description": "New password",
										"example": "NewSecurePassword123!"
									},
									"confirmPassword": {
										"type": "string",
										"description": "Confirm new password",
										"example": "NewSecurePassword123!"
									}
								},
								"required": ["email", "code", "newPassword", "confirmPassword"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Password reset successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["message"],
									"properties": {
										"message": {
											"type": "string",
											"example": "Password reset successfully"
										}
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"$ref": "#/components/responses/ServerError"
					}
				}
			}
		},
		"/users/me": {
			"get": {
				"summary": "Get current user profile",
				"description": "Returns the profile of the currently authenticated user",
				"tags": ["Users"],
				"security": [
					{
						"cookieAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "User profile retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserProfile"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required or token expired",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/health": {
			"get": {
				"tags": ["Utility"],
				"summary": "Check API health status",
				"description": "Returns the current health status of the API",
				"responses": {
					"200": {
						"description": "API is healthy",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"example": "Api Health Status: OK"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "API is unhealthy",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"example": "Api Status: Error"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"tags": [
		{
			"name": "Utility",
			"description": "System utility endpoints"
		}
	]
}

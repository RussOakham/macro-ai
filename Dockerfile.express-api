# Single-stage Dockerfile for Macro AI Express API (for now to fix workspace issues)
FROM node:20-alpine AS builder
WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm@10.14.0

# Copy all source code and package files
COPY . .

# Install all dependencies (including dev dependencies for build)
RUN pnpm install --frozen-lockfile

# Build the express-api
RUN cd apps/express-api && pnpm build

# Stage 3: Production - Create minimal production image
FROM node:20-alpine AS production
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Copy built application from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/apps/express-api/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/apps/express-api/package.json ./

# Copy only production dependencies
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/temp && \
    chown -R nodejs:nodejs /app/logs /app/temp

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check endpoint
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]

# Multi-stage Dockerfile for Macro AI Express API using Turbo Prune
# Based on Turborepo Docker best practices: https://turborepo.com/docs/guides/tools/docker
# This Dockerfile expects the workspace to be pre-pruned using: turbo prune @repo/express-api --docker

FROM node:20-alpine AS base
RUN apk update && apk add --no-cache libc6-compat
WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm@10.14.0

# Stage 1: Installer - Install dependencies from pruned workspace
FROM base AS installer
WORKDIR /app

# Copy pruned workspace files (dependencies only)
COPY out/json/ .
COPY out/pnpm-lock.yaml ./pnpm-lock.yaml

# Install dependencies
RUN pnpm install --frozen-lockfile

# Stage 2: Builder - Build the application
FROM base AS app-builder
WORKDIR /app

# Copy dependencies from installer stage
COPY --from=installer /app/node_modules ./node_modules
COPY --from=installer /app/packages ./packages
COPY --from=installer /app/apps ./apps

# Copy source code from pruned workspace
COPY out/full/ .

# Set build-time environment variables to avoid validation failures
ENV NODE_ENV=development
ENV APP_ENV=development
ENV SERVER_PORT=3000
ENV API_KEY=12345678901234567890123456789012
ENV COOKIE_ENCRYPTION_KEY=12345678901234567890123456789012
ENV AWS_COGNITO_REGION=us-east-1
ENV AWS_COGNITO_USER_POOL_ID=us-east-1_12345678
ENV AWS_COGNITO_USER_POOL_CLIENT_ID=1234567890123456789012
ENV AWS_COGNITO_USER_POOL_SECRET_KEY=12345678901234567890123456789012
ENV AWS_COGNITO_ACCESS_KEY=AKIA1234567890123456
ENV AWS_COGNITO_SECRET_KEY=1234567890123456789012345678901234567890
ENV RELATIONAL_DATABASE_URL=postgresql://docker:docker@localhost:5432/docker
ENV NON_RELATIONAL_DATABASE_URL=redis://localhost:6379
ENV OPENAI_API_KEY=sk-1234567890123456789012345678901234567890
ENV RATE_LIMIT_WINDOW_MS=900000
ENV RATE_LIMIT_MAX_REQUESTS=100
ENV AUTH_RATE_LIMIT_WINDOW_MS=900000
ENV AUTH_RATE_LIMIT_MAX_REQUESTS=5
ENV API_RATE_LIMIT_WINDOW_MS=900000
ENV API_RATE_LIMIT_MAX_REQUESTS=100

# Build the express-api
RUN cd apps/express-api && pnpm build

# Stage 3: Runner - Production image
FROM base AS runner
WORKDIR /app

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Install pnpm for production dependencies
RUN npm install -g pnpm@10.14.0

# Copy package files for production dependencies
COPY out/json/ .
COPY out/pnpm-lock.yaml ./pnpm-lock.yaml

# Install only production dependencies
RUN pnpm install --frozen-lockfile --prod

# Copy built application from builder stage
COPY --from=app-builder --chown=nextjs:nodejs /app/apps/express-api/dist ./dist
COPY --from=app-builder --chown=nextjs:nodejs /app/apps/express-api/package.json ./

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/temp && \
    chown -R nextjs:nodejs /app/logs /app/temp

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check endpoint
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]

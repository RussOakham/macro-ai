name: 'Discover Backend Environment'
description: 'Discovers backend CloudFormation stacks and resolves API endpoints for frontend integration'

inputs:
  environment:
    description: 'Target environment name (e.g., pr-123, staging, production)'
    required: true
  pr-number:
    description: 'Pull request number for preview environments'
    required: false
  validate-connectivity:
    description: 'Enable API endpoint connectivity validation'
    required: false
    default: 'false'
  force-refresh:
    description: 'Force refresh of cached discovery results'
    required: false
    default: 'false'
  fallback-only:
    description: 'Skip backend discovery and use fallback URLs only'
    required: false
    default: 'false'
  aws-region:
    description: 'AWS region for backend discovery'
    required: false
    default: 'us-east-1'
  timeout:
    description: 'Timeout for discovery operations in seconds'
    required: false
    default: '30'
  debug:
    description: 'Enable debug output'
    required: false
    default: 'false'

outputs:
  backend-found:
    description: 'Whether a backend environment was discovered'
    value: ${{ steps.discover.outputs.backend-found }}
  api-endpoint:
    description: 'Resolved API endpoint URL'
    value: ${{ steps.discover.outputs.api-endpoint }}
  stack-name:
    description: 'CloudFormation stack name (if found)'
    value: ${{ steps.discover.outputs.stack-name }}
  resolution-method:
    description: 'Method used to resolve the API endpoint'
    value: ${{ steps.discover.outputs.resolution-method }}
  fallback-used:
    description: 'Whether fallback URL was used'
    value: ${{ steps.discover.outputs.fallback-used }}
  connectivity-status:
    description: 'API endpoint connectivity status'
    value: ${{ steps.discover.outputs.connectivity-status }}
  response-time:
    description: 'API endpoint response time in milliseconds'
    value: ${{ steps.discover.outputs.response-time }}
  discovery-result:
    description: 'Complete discovery result as JSON'
    value: ${{ steps.discover.outputs.discovery-result }}

runs:
  using: 'composite'
  steps:
  - name: Validate inputs
    shell: bash
    run: |
      echo "🔍 Backend Discovery Action"
      echo "=========================="
      echo "Environment: ${{ inputs.environment }}"
      echo "PR Number: ${{ inputs.pr-number || 'N/A' }}"
      echo "Validate Connectivity: ${{ inputs.validate-connectivity }}"
      echo "Force Refresh: ${{ inputs.force-refresh }}"
      echo "Fallback Only: ${{ inputs.fallback-only }}"
      echo "AWS Region: ${{ inputs.aws-region }}"
      echo "Debug: ${{ inputs.debug }}"
      echo ""

  - name: Setup backend discovery environment
    shell: bash
    run: |
      # Export environment variables for discovery services
      export AWS_REGION="${{ inputs.aws-region }}"
      export DEBUG="${{ inputs.debug }}"

      # Validate required tools
      if ! command -v aws &> /dev/null; then
        echo "❌ AWS CLI not found"
        exit 1
      fi

      if ! command -v jq &> /dev/null; then
        echo "❌ jq not found"
        exit 1
      fi

      # Verify AWS credentials
      if ! aws sts get-caller-identity &> /dev/null; then
        echo "❌ AWS credentials not configured or invalid"
        exit 1
      fi

      echo "✅ Backend discovery environment ready"

  - name: Discover backend environment
    id: discover
    shell: bash
    run: |
      cd apps/client-ui

      # Make scripts executable
      chmod +x scripts/backend-discovery-service.sh
      chmod +x scripts/api-resolution-service.sh

      # Prepare discovery arguments
      DISCOVERY_ARGS=(
        "--environment" "${{ inputs.environment }}"
        "--output-format" "json"
        "--region" "${{ inputs.aws-region }}"
        "--timeout" "${{ inputs.timeout }}"
      )

      # Add optional arguments
      if [[ "${{ inputs.pr-number }}" != "" ]]; then
        DISCOVERY_ARGS+=("--pr-number" "${{ inputs.pr-number }}")
      fi

      if [[ "${{ inputs.validate-connectivity }}" == "true" ]]; then
        DISCOVERY_ARGS+=("--validate-connectivity")
      fi

      if [[ "${{ inputs.force-refresh }}" == "true" ]]; then
        DISCOVERY_ARGS+=("--force-refresh")
      fi

      if [[ "${{ inputs.fallback-only }}" == "true" ]]; then
        DISCOVERY_ARGS+=("--fallback-only")
      fi

      if [[ "${{ inputs.debug }}" == "true" ]]; then
        DISCOVERY_ARGS+=("--debug")
      fi

      # Run API resolution service
      echo "🔍 Running backend discovery..."
      echo "Command: ./scripts/api-resolution-service.sh ${DISCOVERY_ARGS[*]}"

      # Capture both stdout and stderr for debugging
      DISCOVERY_OUTPUT=$(./scripts/api-resolution-service.sh "${DISCOVERY_ARGS[@]}" 2>&1)
      DISCOVERY_EXIT_CODE=$?

      echo "Discovery output:"
      echo "$DISCOVERY_OUTPUT"
      echo "Exit code: $DISCOVERY_EXIT_CODE"

      # Extract JSON from the output by finding the JSON object
      # Look for lines that start with '{' and end with '}' (potentially multi-line JSON)
      DISCOVERY_RESULT=""

      # Method 1: Try to extract a complete JSON object from the output
      if echo "$DISCOVERY_OUTPUT" | grep -q '^{'; then
        # Extract from first '{' to last '}'
        DISCOVERY_RESULT=$(echo "$DISCOVERY_OUTPUT" | sed -n '/^{/,/^}/p' | jq -c .)
      fi

      # Method 2: If that fails, try to find any valid JSON in the output
      if [[ -z "$DISCOVERY_RESULT" ]] || ! echo "$DISCOVERY_RESULT" | jq . >/dev/null 2>&1; then
        echo "🔍 Attempting to extract JSON from mixed output..."

        # Try each line to see if it's valid JSON
        while IFS= read -r line; do
          # Remove ANSI color codes
          clean_line=$(echo "$line" | sed 's/\x1b\[[0-9;]*m//g')

          # Check if this line is valid JSON
          if echo "$clean_line" | jq . >/dev/null 2>&1; then
            DISCOVERY_RESULT="$clean_line"
            break
          fi
        done <<< "$DISCOVERY_OUTPUT"
      fi

      # Method 3: Final fallback - try to extract JSON between { and }
      if [[ -z "$DISCOVERY_RESULT" ]] || ! echo "$DISCOVERY_RESULT" | jq . >/dev/null 2>&1; then
        echo "🔍 Attempting to extract JSON block from output..."

        # Extract everything between the first { and last }
        DISCOVERY_RESULT=$(echo "$DISCOVERY_OUTPUT" | sed -n '/^{/,/^}/p' | tr -d '\n' | sed 's/\x1b\[[0-9;]*m//g')

        # If still not valid, try a more aggressive approach
        if ! echo "$DISCOVERY_RESULT" | jq . >/dev/null 2>&1; then
          # Look for JSON pattern in the entire output
          DISCOVERY_RESULT=$(echo "$DISCOVERY_OUTPUT" | grep -o '{[^}]*}' | head -n 1)
        fi
      fi

      # Validate that we have valid JSON
      if [[ -z "$DISCOVERY_RESULT" ]] || ! echo "$DISCOVERY_RESULT" | jq . >/dev/null 2>&1; then
        echo "❌ Could not extract valid JSON from discovery service output"
        echo "Raw output: $DISCOVERY_OUTPUT"
        DISCOVERY_RESULT='{"success": false, "error": "invalid_json_output"}'
      fi

      echo "Parsed discovery result: $DISCOVERY_RESULT"

      # Parse discovery results
      SUCCESS=$(echo "$DISCOVERY_RESULT" | jq -r '.success // false')

      if [[ "$SUCCESS" == "true" ]]; then
        # Extract all relevant information
        BACKEND_FOUND=$(echo "$DISCOVERY_RESULT" | jq -r '.backend_found // false')
        API_ENDPOINT=$(echo "$DISCOVERY_RESULT" | jq -r '.final_api_url // ""')
        STACK_NAME=$(echo "$DISCOVERY_RESULT" | jq -r '.backend_stack // ""')
        RESOLUTION_METHOD=$(echo "$DISCOVERY_RESULT" | jq -r '.resolution_method // "unknown"')
        FALLBACK_USED=$(echo "$DISCOVERY_RESULT" | jq -r '.fallback_used // false')
        
        # Validation information
        VALIDATION_PERFORMED=$(echo "$DISCOVERY_RESULT" | jq -r '.validation.performed // false')
        CONNECTIVITY_STATUS="unknown"
        RESPONSE_TIME="0"
        
        if [[ "$VALIDATION_PERFORMED" == "true" ]]; then
          CONNECTIVITY_STATUS=$(echo "$DISCOVERY_RESULT" | jq -r '.validation.connectivity_status // "unknown"')
          RESPONSE_TIME=$(echo "$DISCOVERY_RESULT" | jq -r '.validation.response_time_ms // 0')
        fi
        
        # Set outputs
        echo "backend-found=$BACKEND_FOUND" >> $GITHUB_OUTPUT
        echo "api-endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
        echo "stack-name=$STACK_NAME" >> $GITHUB_OUTPUT
        echo "resolution-method=$RESOLUTION_METHOD" >> $GITHUB_OUTPUT
        echo "fallback-used=$FALLBACK_USED" >> $GITHUB_OUTPUT
        echo "connectivity-status=$CONNECTIVITY_STATUS" >> $GITHUB_OUTPUT
        echo "response-time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
        echo "discovery-result=$DISCOVERY_RESULT" >> $GITHUB_OUTPUT
        
        # Log results
        echo ""
        echo "🎯 Backend Discovery Results:"
        echo "  Backend Found: $BACKEND_FOUND"
        echo "  API Endpoint: $API_ENDPOINT"
        echo "  Stack Name: $STACK_NAME"
        echo "  Resolution Method: $RESOLUTION_METHOD"
        echo "  Fallback Used: $FALLBACK_USED"
        
        if [[ "$VALIDATION_PERFORMED" == "true" ]]; then
          echo "  Connectivity Status: $CONNECTIVITY_STATUS"
          echo "  Response Time: ${RESPONSE_TIME}ms"
        fi
        
        if [[ "$BACKEND_FOUND" == "true" ]]; then
          echo "✅ Backend discovery successful"
        else
          echo "⚠️ No backend found, using fallback"
        fi
      else
        # Discovery failed
        ERROR_MSG=$(echo "$DISCOVERY_RESULT" | jq -r '.error // "unknown_error"')
        echo "❌ Backend discovery failed: $ERROR_MSG"
        
        # Set default outputs
        echo "backend-found=false" >> $GITHUB_OUTPUT
        echo "api-endpoint=" >> $GITHUB_OUTPUT
        echo "stack-name=" >> $GITHUB_OUTPUT
        echo "resolution-method=failed" >> $GITHUB_OUTPUT
        echo "fallback-used=false" >> $GITHUB_OUTPUT
        echo "connectivity-status=unknown" >> $GITHUB_OUTPUT
        echo "response-time=0" >> $GITHUB_OUTPUT
        echo "discovery-result=$DISCOVERY_RESULT" >> $GITHUB_OUTPUT
        
        exit 1
      fi

  - name: Summary
    shell: bash
    run: |
      echo ""
      echo "📊 Backend Discovery Summary"
      echo "============================"
      echo "Environment: ${{ inputs.environment }}"
      echo "Backend Found: ${{ steps.discover.outputs.backend-found }}"
      echo "API Endpoint: ${{ steps.discover.outputs.api-endpoint }}"
      echo "Resolution Method: ${{ steps.discover.outputs.resolution-method }}"
      echo "Fallback Used: ${{ steps.discover.outputs.fallback-used }}"

      if [[ "${{ inputs.validate-connectivity }}" == "true" ]]; then
        echo "Connectivity: ${{ steps.discover.outputs.connectivity-status }}"
        echo "Response Time: ${{ steps.discover.outputs.response-time }}ms"
      fi
      echo ""

name: 'Generate Frontend Environment'
description: 'Generates environment variables for frontend builds with backend integration'

inputs:
  environment:
    description: 'Target environment name (e.g., pr-123, staging, production)'
    required: true
  pr-number:
    description: 'Pull request number for preview environments'
    required: false
  build-mode:
    description: 'Build mode (preview, staging, production)'
    required: false
    default: 'preview'
  api-endpoint:
    description: 'API endpoint URL (overrides discovery)'
    required: false
  custom-domain-name:
    description: 'Custom domain name for pattern-based URL construction'
    required: false
  hosted-zone-id:
    description: 'Route 53 hosted zone ID for custom domain'
    required: false
  api-key:
    description: 'API authentication key (from Doppler secrets)'
    required: true
  backend-stack-name:
    description: 'Backend CloudFormation stack name'
    required: false
  resolution-method:
    description: 'Backend resolution method used'
    required: false
  output-file:
    description: 'Output file for environment variables'
    required: false
    default: '.env.preview'
  include-build-metadata:
    description: 'Include build metadata in environment variables'
    required: false
    default: 'true'
  validate-variables:
    description: 'Validate generated environment variables'
    required: false
    default: 'true'
  debug:
    description: 'Enable debug output'
    required: false
    default: 'false'

outputs:
  env-file:
    description: 'Path to generated environment file'
    value: ${{ steps.generate.outputs.env-file }}
  api-url:
    description: 'Final API URL used'
    value: ${{ steps.generate.outputs.api-url }}
  variables-count:
    description: 'Number of environment variables generated'
    value: ${{ steps.generate.outputs.variables-count }}
  validation-result:
    description: 'Environment variable validation result'
    value: ${{ steps.generate.outputs.validation-result }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "üîß Frontend Environment Generation"
        echo "=================================="
        echo "Environment: ${{ inputs.environment }}"
        echo "PR Number: ${{ inputs.pr-number || 'N/A' }}"
        echo "Build Mode: ${{ inputs.build-mode }}"
        echo "API Endpoint: ${{ inputs.api-endpoint || 'Auto-resolve' }}"
        echo "Output File: ${{ inputs.output-file }}"
        echo "Include Metadata: ${{ inputs.include-build-metadata }}"
        echo "Debug: ${{ inputs.debug }}"
        echo ""

    - name: Setup environment generation
      shell: bash
      run: |
        cd apps/client-ui

        # Make scripts executable
        chmod +x scripts/inject-preview-env.sh
        chmod +x scripts/api-resolution-service.sh

        # Validate required tools
        if ! command -v jq &> /dev/null; then
          echo "‚ùå jq not found"
          exit 1
        fi

        echo "‚úÖ Environment generation setup complete"

    - name: Generate environment variables
      id: generate
      shell: bash
      run: |
        cd apps/client-ui

        # Set up environment variables for the injection script
        export ENVIRONMENT_NAME="${{ inputs.environment }}"
        export BUILD_MODE="${{ inputs.build-mode }}"

        # Handle API key from Doppler secrets
        if [[ -n "${{ inputs.api-key }}" ]]; then
          export VITE_API_KEY="${{ inputs.api-key }}"
          echo "üîë Using API key from Doppler secrets"
        else
          echo "‚ùå No API key provided from Doppler secrets"
          exit 1
        fi

        # Set PR number if provided
        if [[ -n "${{ inputs.pr-number }}" ]]; then
          export PR_NUMBER="${{ inputs.pr-number }}"
        fi

        # Set API endpoint - priority order: explicit input > custom domain pattern > discovery
        if [[ -n "${{ inputs.api-endpoint }}" ]]; then
          export VITE_API_URL="${{ inputs.api-endpoint }}"
          echo "üîó Using provided API endpoint: ${{ inputs.api-endpoint }}"
        elif [[ -n "${{ inputs.custom-domain-name }}" && -n "${{ inputs.pr-number }}" ]]; then
          # Construct API URL using custom domain pattern
          CUSTOM_API_URL="https://pr-${{ inputs.pr-number }}-api.${{ inputs.custom-domain-name }}/api"
          export VITE_API_URL="$CUSTOM_API_URL"
          echo "üåê Using custom domain pattern API endpoint: $CUSTOM_API_URL"
          echo "üìù Custom domain: ${{ inputs.custom-domain-name }}"
          echo "üìù PR number: ${{ inputs.pr-number }}"
        elif [[ -n "${{ inputs.custom-domain-name }}" ]]; then
          # For staging/production, use custom domain pattern
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            CUSTOM_API_URL="https://staging.api.${{ inputs.custom-domain-name }}/api"
          elif [[ "${{ inputs.environment }}" == "production" ]]; then
            CUSTOM_API_URL="https://api.${{ inputs.custom-domain-name }}/api"
          else
            CUSTOM_API_URL="https://${{ inputs.environment }}.api.${{ inputs.custom-domain-name }}/api"
          fi
          export VITE_API_URL="$CUSTOM_API_URL"
          echo "üåê Using custom domain pattern API endpoint: $CUSTOM_API_URL"
          echo "üìù Custom domain: ${{ inputs.custom-domain-name }}"
          echo "üìù Environment: ${{ inputs.environment }}"
        fi

        # Set backend metadata if provided
        if [[ -n "${{ inputs.backend-stack-name }}" ]]; then
          export VITE_BACKEND_STACK_NAME="${{ inputs.backend-stack-name }}"
        fi

        if [[ -n "${{ inputs.resolution-method }}" ]]; then
          export VITE_API_RESOLUTION_METHOD="${{ inputs.resolution-method }}"
        fi

        # Set build metadata if enabled
        if [[ "${{ inputs.include-build-metadata }}" == "true" ]]; then
          export VITE_BUILD_TIMESTAMP="$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          export VITE_BUILD_COMMIT="${GITHUB_SHA:-unknown}"
          export VITE_BUILD_BRANCH="${GITHUB_REF_NAME:-unknown}"
          export VITE_BUILD_WORKFLOW="${GITHUB_WORKFLOW:-unknown}"
          export VITE_BUILD_RUN_ID="${GITHUB_RUN_ID:-unknown}"
          
          if [[ -n "${{ inputs.pr-number }}" ]]; then
            export VITE_PR_NUMBER="${{ inputs.pr-number }}"
          fi
        fi

        # Enable debug mode if requested
        if [[ "${{ inputs.debug }}" == "true" ]]; then
          export DEBUG="true"
        fi

        # Prepare injection script arguments
        INJECTION_ARGS=(
          "--environment" "${{ inputs.environment }}"
          "--build-mode" "${{ inputs.build-mode }}"
          "--output-file" "${{ inputs.output-file }}"
        )

        if [[ -n "${{ inputs.pr-number }}" ]]; then
          INJECTION_ARGS+=("--pr-number" "${{ inputs.pr-number }}")
        fi

        if [[ "${{ inputs.debug }}" == "true" ]]; then
          INJECTION_ARGS+=("--debug")
        fi

        # Run environment variable injection
        echo "üîß Generating environment variables..."
        if ./scripts/inject-preview-env.sh "${INJECTION_ARGS[@]}"; then
          echo "‚úÖ Environment variables generated successfully"
        else
          echo "‚ùå Environment variable generation failed"
          exit 1
        fi

        # Verify output file exists
        if [[ ! -f "${{ inputs.output-file }}" ]]; then
          echo "‚ùå Output file not found: ${{ inputs.output-file }}"
          exit 1
        fi

        # Extract information from generated file
        API_URL=$(grep "VITE_API_URL=" "${{ inputs.output-file }}" | cut -d'=' -f2 || echo "")
        VARIABLES_COUNT=$(grep -c "=" "${{ inputs.output-file }}" || echo "0")

        # Set outputs
        echo "env-file=${{ inputs.output-file }}" >> $GITHUB_OUTPUT
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
        echo "variables-count=$VARIABLES_COUNT" >> $GITHUB_OUTPUT

        echo ""
        echo "üìã Generated Environment Variables:"
        echo "  Output File: ${{ inputs.output-file }}"
        echo "  API URL: $API_URL"
        echo "  Variables Count: $VARIABLES_COUNT"

    - name: Validate environment variables
      id: validate
      shell: bash
      if: inputs.validate-variables == 'true'
      run: |
        cd apps/client-ui

        echo "üîç Validating environment variables..."

        ENV_FILE="${{ inputs.output-file }}"
        VALIDATION_ERRORS=0

        # Check for required variables
        REQUIRED_VARS=("VITE_API_URL" "VITE_API_KEY" "VITE_APP_ENV")

        for var in "${REQUIRED_VARS[@]}"; do
          if grep -q "^${var}=" "$ENV_FILE"; then
            VALUE=$(grep "^${var}=" "$ENV_FILE" | cut -d'=' -f2)
            if [[ -n "$VALUE" && "$VALUE" != "undefined" ]]; then
              echo "‚úÖ $var: OK"
            else
              echo "‚ùå $var: Empty or undefined"
              VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
            fi
          else
            echo "‚ùå $var: Missing"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          fi
        done

        # Validate API URL format
        API_URL=$(grep "VITE_API_URL=" "$ENV_FILE" | cut -d'=' -f2 || echo "")
        if [[ -n "$API_URL" ]]; then
          if [[ "$API_URL" =~ ^https?:// ]]; then
            echo "‚úÖ API URL format: Valid"
          else
            echo "‚ùå API URL format: Invalid (not HTTP/HTTPS)"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          fi
        fi

        # Set validation result
        if [[ $VALIDATION_ERRORS -eq 0 ]]; then
          echo "validation-result=success" >> $GITHUB_OUTPUT
          echo "‚úÖ Environment variable validation passed"
        else
          echo "validation-result=failed" >> $GITHUB_OUTPUT
          echo "‚ùå Environment variable validation failed ($VALIDATION_ERRORS errors)"
          exit 1
        fi

    - name: Display environment summary
      shell: bash
      run: |
        cd apps/client-ui

        echo ""
        echo "üìä Environment Generation Summary"
        echo "================================="
        echo "Environment: ${{ inputs.environment }}"
        echo "Build Mode: ${{ inputs.build-mode }}"
        echo "Output File: ${{ steps.generate.outputs.env-file }}"
        echo "API URL: ${{ steps.generate.outputs.api-url }}"
        echo "Variables Count: ${{ steps.generate.outputs.variables-count }}"

        if [[ "${{ inputs.validate-variables }}" == "true" ]]; then
          echo "Validation: ${{ steps.validate.outputs.validation-result }}"
        fi

        echo ""
        echo "üîç Environment File Contents (first 10 variables, values redacted):"

        # Parse .env file and show only variable names with redacted values for security
        awk 'NR <= 10 && /^[^#]/ && /=/ {split($0, parts, "="); print "  " parts[1] "=REDACTED"}' "${{ inputs.output-file }}"

        TOTAL_LINES=$(wc -l < "${{ inputs.output-file }}")
        TOTAL_VARS=$(awk '/^[^#]/ && /=/' "${{ inputs.output-file }}" | wc -l)

        if [[ $TOTAL_VARS -gt 10 ]]; then
          echo "  ... ($((TOTAL_VARS - 10)) more variables)"
        fi
        echo ""

---
name: Deploy PR Preview (Pulumi)

on:
  pull_request:
    types: [ opened, synchronize, closed ]
    branches:
    - main
    - develop

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.event.pull_request.head.ref || github.ref }}'
  cancel-in-progress: true

jobs:
  deploy-pr-preview:
    name: Deploy PR Preview Infrastructure
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      NODE_VERSION: '20.19.4'
      PNPM_VERSION: '10.14.0'
      CUSTOM_DOMAIN_NAME: ${{ vars.CUSTOM_DOMAIN_NAME }}
      HOSTED_ZONE_ID: ${{ vars.HOSTED_ZONE_ID }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    outputs:
      api-endpoint: ${{ steps.deploy.outputs.api-endpoint }}
      stack-name: ${{ steps.deploy.outputs.stack-name }}
      should-deploy: ${{ steps.decide-deploy.outputs.should-deploy }}
      has-backend-changes: ${{ steps.change-detection.outputs.has-backend-changes }}
      has-frontend-changes: ${{ steps.change-detection.outputs.has-frontend-changes }}
      has-infrastructure-changes: ${{ steps.change-detection.outputs.has-infrastructure-changes }}
      is-first-deployment: ${{ steps.change-detection.outputs.is-first-deployment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '10.14.0'

    - name: Detect changes
      id: change-detection
      env:
        BASE_REF: ${{ github.event.pull_request.base.ref }}
        HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        PR_NUMBER: ${{ github.event.number }}
        BRANCH_REF: ${{ github.event.pull_request.head.ref }}
      run: |
        echo "üîç Detecting changes for PR #$PR_NUMBER..."

        # Get base branch (default to develop if not specified)
        BASE_BRANCH="$BASE_REF"
        if [[ -z "$BASE_BRANCH" ]]; then
          BASE_BRANCH="develop"
        fi

        # Get head SHA
        HEAD_REF="$HEAD_SHA"

        echo "Base branch: $BASE_BRANCH"
        echo "Head SHA: $HEAD_REF"

        # Fetch the base branch to compare against
        git fetch origin "$BASE_BRANCH"

        # Check for backend-related changes
        BACKEND_CHANGES=$(git diff --name-only "origin/$BASE_BRANCH...$HEAD_REF" | grep -E '^infrastructure/|^apps/express-api/|^packages/macro-ai-api-client/' || true)
        if [[ -n "$BACKEND_CHANGES" ]]; then
          echo "‚úÖ Backend changes detected"
          echo "has-backend-changes=true" >> "$GITHUB_OUTPUT"
        else
          echo "‚ÑπÔ∏è No backend changes detected"
          echo "has-backend-changes=false" >> "$GITHUB_OUTPUT"
        fi

        # Check for frontend-related changes
        FRONTEND_CHANGES=$(git diff --name-only "origin/$BASE_BRANCH...$HEAD_REF" | grep -E '^apps/client-ui/|^packages/ui-library/' || true)
        if [[ -n "$FRONTEND_CHANGES" ]]; then
          echo "‚úÖ Frontend changes detected"
          echo "has-frontend-changes=true" >> "$GITHUB_OUTPUT"
        else
          echo "‚ÑπÔ∏è No frontend changes detected"
          echo "has-frontend-changes=false" >> "$GITHUB_OUTPUT"
        fi

        # Check for infrastructure-related changes
        INFRASTRUCTURE_CHANGES=$(git diff --name-only "origin/$BASE_BRANCH...$HEAD_REF" | grep -E '^infrastructure/|\.github/workflows/.*\.yml$' || true)
        if [[ -n "$INFRASTRUCTURE_CHANGES" ]]; then
          echo "‚úÖ Infrastructure changes detected"
          echo "has-infrastructure-changes=true" >> "$GITHUB_OUTPUT"
        else
          echo "‚ÑπÔ∏è No infrastructure changes detected"
          echo "has-infrastructure-changes=false" >> "$GITHUB_OUTPUT"
        fi

        # Check if this is the first deployment of this PR environment
        PR_NUMBER="${{ github.event.number }}"
        STACK_NAME="pr-${PR_NUMBER}"
        if pulumi stack select "$STACK_NAME" 2>/dev/null; then
          # Stack exists, this is not the first deployment
          echo "‚ÑπÔ∏è Existing PR environment detected - using selective deployment"
          echo "is-first-deployment=false" >> "$GITHUB_OUTPUT"
        else
          # Stack doesn't exist, this is the first deployment
          echo "üöÄ First deployment of PR environment - deploying both backend and frontend"
          echo "is-first-deployment=true" >> "$GITHUB_OUTPUT"
          # On first deployment, set both to true to ensure complete environment
          echo "has-backend-changes=true" >> "$GITHUB_OUTPUT"
          echo "has-frontend-changes=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19.4'

    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pnpm-store
          node_modules
        key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          pnpm-${{ runner.os }}-

    - name: Install Pulumi CLI
      run: |
        curl -fsSL https://get.pulumi.com | sh
        echo "$HOME/.pulumi/bin" >> "$GITHUB_PATH"

    - name: Configure AWS credentials
      if: github.event.action != 'closed'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: pr-preview-build-docker
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      if: github.event.action != 'closed'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      if: github.event.action != 'closed'
      id: build-image
      env:
        AWS_REGION: ${{ env.AWS_REGION }}
        DOCKER_BUILDKIT: 1
      run: |
        # Build Docker image for PR
        IMAGE_TAG="pr-${{ github.event.number }}-${{ github.run_id }}"
        ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"

        # Build and push to ECR using buildx (automatically uses ECR login)
        docker buildx build \
          --build-arg NODE_ENV=production \
          --build-arg SERVER_PORT=3040 \
          --build-arg APP_ENV=pr-${{ github.event.number }} \
          --target runner \
          --no-cache \
          --platform linux/amd64 \
          --tag "${ECR_REGISTRY}/macro-ai-staging-express-api:${IMAGE_TAG}" \
          --push \
          -f apps/express-api/Dockerfile \
          .

        echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "‚úÖ Docker image built and pushed: ${IMAGE_TAG}"

    - name: Decide deployment action
      id: decide-deploy
      run: |
        echo "üîç Deciding deployment action..."

        # Check if PR is closed
        if [[ "${{ github.event.action }}" == "closed" ]]; then
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "deployment-action=destroy" >> $GITHUB_OUTPUT
          echo "‚úÖ PR closed - will destroy environment"
          exit 0
        fi

        # Check if any changes require deployment
        HAS_BACKEND="${{ steps.change-detection.outputs.has-backend-changes }}"
        HAS_FRONTEND="${{ steps.change-detection.outputs.has-frontend-changes }}"
        HAS_INFRASTRUCTURE="${{ steps.change-detection.outputs.has-infrastructure-changes }}"

        echo "Backend changes: $HAS_BACKEND"
        echo "Frontend changes: $HAS_FRONTEND"
        echo "Infrastructure changes: $HAS_INFRASTRUCTURE"

        # Deploy if any changes are detected
        if [[ "$HAS_BACKEND" == "true" || "$HAS_FRONTEND" == "true" || "$HAS_INFRASTRUCTURE" == "true" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "deployment-action=deploy" >> $GITHUB_OUTPUT
          echo "‚úÖ Changes detected - will deploy"
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "deployment-action=skip" >> $GITHUB_OUTPUT
          echo "‚è≠Ô∏è No relevant changes - skipping deployment"
        fi

    - name: Install Pulumi CLI
      if: steps.decide-deploy.outputs.should-deploy == 'true' && (steps.change-detection.outputs.has-backend-changes == 'true' || steps.change-detection.outputs.has-infrastructure-changes == 'true' || steps.change-detection.outputs.is-first-deployment == 'true')
      uses: pulumi/actions@v5
      with:
        pulumi-version: latest

    - name: Install Pulumi Dependencies
      if: steps.decide-deploy.outputs.should-deploy == 'true' && (steps.change-detection.outputs.has-backend-changes == 'true' || steps.change-detection.outputs.has-infrastructure-changes == 'true' || steps.change-detection.outputs.is-first-deployment == 'true')
      shell: bash
      run: |
        echo "üì¶ Installing Pulumi project dependencies..."
        cd infrastructure/pulumi
        pnpm install

    - name: Deploy PR Preview Infrastructure
      if: steps.decide-deploy.outputs.should-deploy == 'true' && (steps.change-detection.outputs.has-backend-changes == 'true' || steps.change-detection.outputs.has-infrastructure-changes == 'true' || steps.change-detection.outputs.is-first-deployment == 'true')
      id: deploy
      env:
        PR_NUMBER: ${{ github.event.number }}
        BRANCH_REF: ${{ github.event.pull_request.head.ref }}
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_DEV }}
      run: |
        echo "üöÄ Starting PR Preview deployment..."
        echo "Environment: pr-$PR_NUMBER"
        echo "PR Number: $PR_NUMBER"
        echo "Branch: $BRANCH_REF"
        echo "Image Tag: ${{ steps.build-image.outputs.image-tag }}"

        # Call the reusable workflow via GitHub API or use a different approach
        # For now, we'll use the Pulumi CLI directly
        cd infrastructure/pulumi

        # Set up environment variables
        export PULUMI_ACCESS_TOKEN="${{ secrets.PULUMI_ACCESS_TOKEN }}"
        export AWS_REGION="${{ env.AWS_REGION }}"
        export AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"

        STACK_NAME="pr-${{ github.event.number }}"
        IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/macro-ai-staging-express-api:${{ steps.build-image.outputs.image-tag }}"

        echo "üîß Setting Pulumi configuration for stack: ${STACK_NAME}"
        pulumi stack select ${STACK_NAME} || pulumi stack init ${STACK_NAME}

        # Set all required configuration
        pulumi config set environmentName "pr-${{ github.event.number }}" --stack "${STACK_NAME}"
        pulumi config set deploymentType "preview" --stack "${STACK_NAME}"
        pulumi config set imageUri "${IMAGE_URI}" --stack "${STACK_NAME}"
        pulumi config set imageTag "${{ steps.build-image.outputs.image-tag }}" --stack "${STACK_NAME}"
        pulumi config set doppler:dopplerToken "${DOPPLER_TOKEN}" --secret --stack "${STACK_NAME}"
        # Doppler config is handled in Pulumi code for PR previews (uses 'dev' config)
        pulumi config set prNumber "${{ github.event.number }}" --stack "${STACK_NAME}"
        pulumi config set branchName "$BRANCH_REF" --stack "${STACK_NAME}"
        if [[ -n "${CUSTOM_DOMAIN_NAME:-}" ]]; then
          pulumi config set customDomainName "${CUSTOM_DOMAIN_NAME}" --stack "${STACK_NAME}"
        fi
        if [[ -n "${HOSTED_ZONE_ID:-}" ]]; then
          pulumi config set hostedZoneId "${HOSTED_ZONE_ID}" --stack "${STACK_NAME}"
        fi

        echo "üöÄ Deploying infrastructure..."
        pulumi up --yes --stack "${STACK_NAME}"

        # Get outputs
        API_ENDPOINT=$(pulumi stack output apiEndpoint --stack "${STACK_NAME}")
        STACK_NAME_OUTPUT=$(pulumi stack output stackName --stack "${STACK_NAME}" || echo "${STACK_NAME}")

        echo "api-endpoint=${API_ENDPOINT}" >> $GITHUB_OUTPUT
        echo "stack-name=${STACK_NAME_OUTPUT}" >> $GITHUB_OUTPUT

        echo "‚úÖ Backend deployment completed successfully!"
        echo "üåê API Endpoint: ${API_ENDPOINT}"

  deploy-frontend:
    name: Deploy Frontend to Amplify
    uses: ./.github/workflows/reusable-deploy-frontend.yml
    with:
      environment-name: pr-${{ github.event.number }}
      deployment-type: preview
      pr-number: ${{ github.event.number }}
      branch-name: ${{ github.event.pull_request.head.ref }}
      backend-url: ${{ needs.deploy-pr-preview.outputs.api-endpoint }}
      custom-domain-name: ${{ vars.CUSTOM_DOMAIN_NAME }}
      hosted-zone-id: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}
      should-deploy: ${{ needs.deploy-pr-preview.outputs.should-deploy == 'true' && (needs.deploy-pr-preview.outputs.has-frontend-changes == 'true' || needs.deploy-pr-preview.outputs.is-first-deployment == 'true') }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      API_KEY: ${{ secrets.VITE_API_KEY }}
    needs: [ deploy-pr-preview ]

  frontend-deployment-summary:
    name: Frontend Deployment Summary
    runs-on: ubuntu-latest
    if: always() && needs.deploy-frontend.result != 'cancelled'
    needs: [ deploy-pr-preview, deploy-frontend ]

    steps:
    - name: Generate deployment summary
      run: |
        echo "üéâ Complete PR Preview Environment Deployed!"
        echo "üì± Frontend URL: ${{ needs.deploy-frontend.outputs.app-url }}"
        echo "üîó Backend API: ${{ needs.deploy-pr-preview.outputs.api-endpoint }}"
        echo "üìù Stack: ${{ needs.deploy-pr-preview.outputs.stack-name }}"
        echo "üî¢ PR: #${{ github.event.number }}"
        echo "üåø Branch: ${{ github.event.pull_request.head.ref }}"

    - name: Comment PR with deployment info
      if: needs.deploy-pr-preview.outputs.should-deploy == 'true' && needs.deploy-pr-preview.outputs.api-endpoint != '' && needs.deploy-pr-preview.outputs.has-backend-changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const apiEndpoint = '${{ needs.deploy-pr-preview.outputs.api-endpoint }}';
          const stackName = '${{ needs.deploy-pr-preview.outputs.stack-name }}';
          const frontendHealthStatus = '${{ steps.frontend-health-check.outputs.frontend-health-status }}';
          const backendHealthStatus = '${{ steps.backend-health-check.outputs.backend-health-status }}';
          const prNumber = '${{ github.event.number }}';
          const branchRef = '${{ github.event.pull_request.head.ref }}';
          const hasBackendChanges = '${{ needs.deploy-pr-preview.outputs.has-backend-changes }}' === 'true';
          const hasFrontendChanges = '${{ needs.deploy-pr-preview.outputs.has-frontend-changes }}' === 'true';

          let healthIcon = '‚ö†Ô∏è';
          let healthMessage = 'Health check in progress...';

          // Determine overall health status
          if (hasBackendChanges && hasFrontendChanges) {
            // Both backend and frontend changed - both need to be healthy
            if (backendHealthStatus === 'healthy' && frontendHealthStatus === 'healthy') {
              healthIcon = '‚úÖ';
              healthMessage = 'Health check passed - both frontend and backend are ready!';
            } else {
              healthIcon = '‚ùå';
              healthMessage = 'Health check failed - please check the workflow logs';
            }
          } else if (hasBackendChanges) {
            // Only backend changed
            if (backendHealthStatus === 'healthy') {
              healthIcon = '‚úÖ';
              healthMessage = 'Backend health check passed - service is ready!';
            } else {
              healthIcon = '‚ùå';
              healthMessage = 'Backend health check failed - please check the workflow logs';
            }
          } else if (hasFrontendChanges) {
            // Only frontend changed
            if (frontendHealthStatus === 'healthy') {
              healthIcon = '‚úÖ';
              healthMessage = 'Frontend health check passed - application is ready!';
            } else {
              healthIcon = '‚ùå';
              healthMessage = 'Frontend health check failed - please check the workflow logs';
            }
          } else {
            // No changes detected
            healthIcon = '‚úÖ';
            healthMessage = 'No changes detected - existing environment is ready!';
          }

          const frontendUrl = '${{ needs.deploy-frontend.outputs.app-url }}';

          const body = [
            '## üöÄ PR Preview Environment Deployed',
            '',
            `**${healthIcon} Complete preview environment deployed successfully!**`,
            '',
            '### üåê **Access URLs**',
            `- **Frontend**: ${frontendUrl || 'Deploying...'}`,
            `- **Backend API**: ${apiEndpoint}`,
            `- **Pulumi Stack**: \`${stackName}\``,
            `- **Environment**: Preview for PR #${prNumber}`,
            `- **Branch**: \`${branchRef}\``,
            `- **Health Status**: ${healthMessage}`,
            '',
            '### üîç **Testing Your Changes**',
            '',
            'You can now test your complete application:',
            '1. **Frontend**: Visit the frontend URL above to interact with your changes',
            '2. **Backend API**: Test API endpoints directly at \`' + apiEndpoint + '\`',
            '3. **Frontend Health Check**: \`' + frontendUrl + '\`',
            '4. **Backend Health Check**: \`' + apiEndpoint + '/health\`',
            '',
            '### üèóÔ∏è **Infrastructure Details**',
            '- Full ECS Fargate deployment',
            '- Application Load Balancer',
            '- Custom domains (\`pr-' + prNumber + '.api.' + '${{ vars.CUSTOM_DOMAIN_NAME }}' + '\`)',
            '- Doppler secrets integration',
            '- Amplify frontend deployment',
            '',
            '### üßπ Automatic Cleanup',
            '',
            'This environment will be automatically destroyed when you:',
            '- Close this PR',
            '- Merge this PR to main',
            '- Push new commits (environment will be updated)',
            '',
            '**‚ö†Ô∏è Note**: This is a cost-optimized preview environment with reduced resources.'
          ].join('\n');

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Frontend Health Check
      if: needs.deploy-frontend.outputs.app-url
      id: frontend-health-check
      run: |
        FRONTEND_URL="${{ needs.deploy-frontend.outputs.app-url }}"
        echo "üîç Performing frontend health check on: '$FRONTEND_URL'"

        # Wait for the frontend to be ready
        sleep 30

        # Perform frontend health check
        for i in {1..10}; do
          if curl -f -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL" | grep -q "200"; then
            echo "‚úÖ Frontend health check passed on attempt ${i}"
            echo "frontend-health-status=healthy" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Frontend is responding at ${FRONTEND_URL}"
            exit 0
          fi
          echo "‚è≥ Frontend health check attempt ${i} failed, retrying..."
          sleep 15
        done

        echo "‚ùå Frontend health check failed after 10 attempts"
        echo "frontend-health-status=unhealthy" >> "$GITHUB_OUTPUT"
        exit 1

    - name: Backend Health Check
      if: needs.deploy-pr-preview.outputs.api-endpoint != '' && needs.deploy-pr-preview.outputs.has-backend-changes == 'true'
      id: backend-health-check
      run: |
        API_ENDPOINT="${{ needs.deploy-pr-preview.outputs.api-endpoint }}"
        echo "üîç Performing backend health check on: '$API_ENDPOINT'"

        # Wait for the service to be ready
        sleep 30

        # Perform backend health check
        for i in {1..10}; do
          if curl -f -s "${API_ENDPOINT}/health" > /dev/null 2>&1; then
            echo "‚úÖ Backend health check passed on attempt ${i}"
            echo "backend-health-status=healthy" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Backend service is responding at ${API_ENDPOINT}"
            exit 0
          fi
          echo "‚è≥ Backend health check attempt ${i} failed, retrying..."
          sleep 15
        done

        echo "‚ùå Backend health check failed after 10 attempts"
        echo "backend-health-status=unhealthy" >> "$GITHUB_OUTPUT"
        exit 1

    - name: Comment PR on failure
      if: needs.deploy-pr-preview.outputs.should-deploy == 'true' && failure() && needs.deploy-pr-preview.outputs.has-backend-changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = '${{ github.event.number }}';

          const body = [
            '## ‚ùå PR Preview Environment Deployment Failed',
            '',
            '**‚ùå The preview environment could not be deployed.**',
            '',
            'Please check the workflow logs for details. Common issues:',
            '- Docker build failures',
            '- Pulumi deployment errors',
            '- AWS permission issues',
            '- Doppler configuration problems',
            '',
            'The development team has been notified.'
          ].join('\n');

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  cleanup-on-pr-close:
    name: Cleanup on PR Close
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    needs: [ deploy-pr-preview, deploy-frontend ]

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: pr-preview-cleanup

    - name: Cleanup Amplify Branch
      run: |
        echo "PR closed. Cleaning up Amplify branch..."
        # Use the single PR previews app
        APP_NAME="macro-ai-pr-previews"
        PR_NUMBER="${{ github.event.number }}"
        BRANCH_NAME="pr-${PR_NUMBER}"

        # Get the app ID
        APP_ID=$(aws amplify list-apps --query "apps[?name=='$APP_NAME'].appId" --output text)

        if [ -n "$APP_ID" ]; then
          echo "Deleting Amplify branch: $BRANCH_NAME from app: $APP_NAME (ID: $APP_ID)"
          aws amplify delete-branch --app-id "$APP_ID" --branch-name "$BRANCH_NAME" --region "${AWS_REGION}" || echo "Branch $BRANCH_NAME not found, skipping deletion."
          echo "Amplify branch deleted."
        else
          echo "Amplify app $APP_NAME not found, skipping branch deletion."
        fi

    - name: Comment PR on cleanup
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = '${{ github.event.number }}';

          const body = [
            '## üßπ PR Preview Environment Cleaned Up',
            '',
            '**‚úÖ The preview environment for PR #' + prNumber + ' has been destroyed.**',
            '',
            'The following resources have been cleaned up:',
            '- ECS Fargate service and task definition',
            '- Application Load Balancer and target group',
            '- VPC resources (if not shared)',
            '- CloudWatch log groups',
            '- Route53 records (if applicable)',
            '',
            '**Cost savings**: All preview environment resources have been removed to avoid unnecessary charges.'
          ].join('\n');

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Cleanup Pulumi Stack
      run: |
        echo "üßπ Cleaning up PR #${{ github.event.number }} environment..."

        # For now, manual cleanup since we're not using Pulumi Review Stacks yet
        # This will be replaced when we configure Review Stacks
        STACK_NAME="pr-${{ github.event.number }}"

        if pulumi stack select ${STACK_NAME} 2>/dev/null; then
          echo "üîç Found stack ${STACK_NAME}, destroying..."
          pulumi destroy --yes --stack "${STACK_NAME}"
          pulumi stack rm ${STACK_NAME} --yes
          echo "‚úÖ Stack ${STACK_NAME} destroyed and removed"
        else
          echo "‚ÑπÔ∏è Stack ${STACK_NAME} not found or already cleaned up"
        fi

# Full-Stack Deployment Workflow
# Purpose: Deploy both backend (Lambda/CDK) and frontend (AWS Amplify) with proper environment management
# Triggers: Manual dispatch, main branch pushes, and environment-specific deployments

name: Deploy Full-Stack Application

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: string
      deploy_backend:
        description: 'Deploy backend infrastructure'
        required: false
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend to Amplify'
        required: false
        default: true
        type: boolean
      run_tests:
        description: 'Run integration tests after deployment'
        required: false
        default: true
        type: boolean
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      deploy_backend:
        description: 'Deploy backend infrastructure'
        required: false
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend to Amplify'
        required: false
        default: true
        type: boolean
      run_tests:
        description: 'Run integration tests after deployment'
        required: false
        default: true
        type: boolean
  # Wait for hygiene checks to complete successfully before deploying
  workflow_run:
    workflows: [ 'Hygiene Checks' ]
    types:
    - completed
    branches:
    - develop # Deploy to staging
    - main # Deploy to production

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'
  PNPM_VERSION: '10.14.0'
  # CDK environment variables
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_REGION: 'us-east-1'

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  # Quality Gates - Run tests and validation
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    # Only run if hygiene checks passed or if triggered manually
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    outputs:
      should-deploy-backend: ${{ steps.changes.outputs.backend-changed }}
      should-deploy-frontend: ${{ steps.changes.outputs.frontend-changed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Create environment files
      run: |
        # Create test environment files
        echo "VITE_API_URL=http://localhost:3040/api" > apps/client-ui/.env
        echo "VITE_API_KEY=test-api-key-32-characters-long-dummy" >> apps/client-ui/.env

        echo "API_KEY=test-api-key-32-characters-long-dummy" > apps/express-api/.env
        echo "NODE_ENV=test" >> apps/express-api/.env

    - name: Run tests
      run: |
        pnpm test
        pnpm type-check

    - name: Lint code
      run: pnpm lint

    - name: Detect changes
      id: changes
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "backend-changed=${{ github.event.inputs.deploy_backend }}" >> "$GITHUB_OUTPUT"
          echo "frontend-changed=${{ github.event.inputs.deploy_frontend }}" >> "$GITHUB_OUTPUT"
        else
          # Check for changes in backend files
          if git diff --name-only HEAD~1 HEAD | grep -E "(apps/express-api|infrastructure)" > /dev/null; then
            echo "backend-changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "backend-changed=false" >> "$GITHUB_OUTPUT"
          fi

          # Check for changes in frontend files
          if git diff --name-only HEAD~1 HEAD | grep -E "apps/client-ui" > /dev/null; then
            echo "frontend-changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "frontend-changed=false" >> "$GITHUB_OUTPUT"
          fi
        fi

  # Build Lambda Package
  build-lambda:
    name: Build Lambda Package
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-deploy-backend == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Build Lambda package
      run: |
        cd apps/express-api
        pnpm install --frozen-lockfile
        pnpm package:lambda

    - name: Upload Lambda package
      uses: actions/upload-artifact@v4
      with:
        name: lambda-package
        path: apps/express-api/dist/lambda.zip
        retention-days: 7

  # Deploy Backend Infrastructure
  deploy-backend:
    name: Deploy Backend Infrastructure
    runs-on: ubuntu-latest
    needs: [ quality-gates, build-lambda ]
    if: needs.quality-gates.outputs.should-deploy-backend == 'true'
    environment: ${{ inputs.environment || github.event.inputs.environment || 'development' }}
    outputs:
      api-endpoint: ${{ steps.outputs.outputs.api-endpoint }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Lambda package
      uses: actions/download-artifact@v4
      with:
        name: lambda-package
        path: apps/express-api/dist/

    - name: Pre-deployment validation
      run: |
        echo "üîç Running pre-deployment validation..."

        # Validate AWS credentials
        echo "‚úì Checking AWS credentials..."
        aws sts get-caller-identity

        # Validate Lambda package
        echo "‚úì Validating Lambda package..."
        if [ ! -f "apps/express-api/dist/lambda.zip" ]; then
          echo "‚ùå Lambda package not found!"
          exit 1
        fi

        PACKAGE_SIZE=$(stat -f%z "apps/express-api/dist/lambda.zip" 2>/dev/null || stat -c%s "apps/express-api/dist/lambda.zip")
        echo "Lambda package size: ${PACKAGE_SIZE} bytes"

        if [ "$PACKAGE_SIZE" -lt 1000000 ]; then
          echo "‚ö†Ô∏è Lambda package seems small (< 1MB), please verify"
        fi

        # Validate environment configuration
        echo "‚úì Validating environment configuration..."
        echo "Environment: ${{ inputs.environment || github.event.inputs.environment || 'development' }}"
        echo "Scale: hobby"
        echo "Region: ${{ env.AWS_REGION }}"

        # Check CDK bootstrap status
        echo "‚úì Checking CDK bootstrap status..."
        if aws cloudformation describe-stacks --stack-name CDKToolkit --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "CDK is bootstrapped in ${{ env.AWS_REGION }}"
        else
          echo "‚ö†Ô∏è CDK not bootstrapped in ${{ env.AWS_REGION }}, deployment will bootstrap automatically"
        fi

        echo "‚úÖ Pre-deployment validation completed"

    - name: Deploy infrastructure
      run: |
        cd infrastructure
        pnpm install --frozen-lockfile
        pnpm build

        # Make deploy script executable and run it
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh
      env:
        CDK_DEPLOY_ENV: ${{ inputs.environment || github.event.inputs.environment || 'development' }}
        CDK_DEPLOY_SCALE: 'hobby'
        AWS_REGION: ${{ env.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        NODE_ENV: 'production'

    - name: Get deployment outputs
      id: outputs
      run: |
        # Calculate stack name based on environment
        ENVIRONMENT="${{ inputs.environment || github.event.inputs.environment || 'development' }}"
        ENV_CAPITALIZED="$(echo "$ENVIRONMENT" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')"
        STACK_NAME="MacroAi${ENV_CAPITALIZED}Stack"

        API_ENDPOINT=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
          --output text)
        echo "api-endpoint=$API_ENDPOINT" >> "$GITHUB_OUTPUT"

    - name: Validate backend deployment
      run: |
        echo "üîç Running post-deployment validation..."

        # Get API endpoint from outputs
        API_ENDPOINT="${{ steps.outputs.outputs.api-endpoint }}"

        if [ -z "$API_ENDPOINT" ]; then
          echo "‚ùå API endpoint not found in deployment outputs"
          exit 1
        fi

        echo "‚úì API endpoint: $API_ENDPOINT"

        # Wait for deployment to be ready
        echo "‚è≥ Waiting for deployment to be ready..."
        sleep 30

        # Test health endpoint
        echo "‚úì Testing health endpoint..."
        HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "${API_ENDPOINT}api/health" || echo "000")

        if [[ "$HEALTH_RESPONSE" == *"200" ]]; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ö†Ô∏è Health check returned: $HEALTH_RESPONSE"
          echo "This may be expected for a new deployment without Parameter Store values"
        fi

        # Test CORS configuration
        echo "‚úì Testing CORS configuration..."
        CORS_RESPONSE=$(curl -s -w "%{http_code}" \
          -H "Origin: http://localhost:3000" \
          -H "Access-Control-Request-Method: GET" \
          -X OPTIONS "${API_ENDPOINT}api/health" || echo "000")

        if [[ "$CORS_RESPONSE" == *"200" ]] || [[ "$CORS_RESPONSE" == *"204" ]]; then
          echo "‚úÖ CORS configuration working"
        else
          echo "‚ö†Ô∏è CORS response: $CORS_RESPONSE"
        fi

        # Validate CloudFormation stack status
        echo "‚úì Validating CloudFormation stack..."
        ENVIRONMENT="${{ inputs.environment || github.event.inputs.environment || 'development' }}"
        ENV_CAPITALIZED="$(echo "$ENVIRONMENT" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')"
        STACK_NAME="MacroAi${ENV_CAPITALIZED}Stack"

        STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --query 'Stacks[0].StackStatus' \
          --output text)

        if [ "$STACK_STATUS" = "CREATE_COMPLETE" ] || [ "$STACK_STATUS" = "UPDATE_COMPLETE" ]; then
          echo "‚úÖ CloudFormation stack is in healthy state: $STACK_STATUS"
        else
          echo "‚ö†Ô∏è CloudFormation stack status: $STACK_STATUS"
        fi

        echo "‚úÖ Post-deployment validation completed"

  # Build Frontend
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [ quality-gates, deploy-backend ]
    if: always() && needs.quality-gates.outputs.should-deploy-frontend == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Build frontend
      run: |
        cd apps/client-ui
        pnpm install --frozen-lockfile

        # Set API URL from backend deployment or use default
        if [[ -n "${{ needs.deploy-backend.outputs.api-endpoint }}" ]]; then
          export VITE_API_URL="${{ needs.deploy-backend.outputs.api-endpoint }}api"
        else
          export VITE_API_URL="https://api.macro-ai.com/api"
        fi

        export VITE_API_KEY="${{ secrets.FRONTEND_API_KEY }}"
        export VITE_APP_ENV="${{ inputs.environment || github.event.inputs.environment || 'development' }}"

        pnpm build

    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: apps/client-ui/dist/
        retention-days: 7

  # Deploy Frontend to Amplify
  deploy-frontend:
    name: Deploy Frontend to Amplify
    runs-on: ubuntu-latest
    needs: [ quality-gates, build-frontend ]
    if: always() && needs.quality-gates.outputs.should-deploy-frontend == 'true'
    environment: ${{ inputs.environment || github.event.inputs.environment || 'development' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install Amplify CLI
      run: npm install -g @aws-amplify/cli

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: apps/client-ui/dist/

    - name: Deploy to Amplify
      run: |
        cd apps/client-ui

        # Set environment variables for Amplify
        export AMPLIFY_ENV="${{ inputs.environment || github.event.inputs.environment || 'development' }}"

        # Deploy using the deployment script
        ./scripts/deploy-amplify.sh

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [ deploy-backend, deploy-frontend ]
    if: always() && (github.event.inputs.run_tests == 'true' || github.event.inputs.run_tests == null)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install integration test dependencies
      run: |
        cd tests/integration
        pnpm install --frozen-lockfile

    - name: Run comprehensive integration tests
      run: |
        # Set up test environment variables
        export TEST_API_ENDPOINT="${{ needs.deploy-backend.outputs.api-endpoint }}"
        export TEST_API_KEY="${{ secrets.FRONTEND_API_KEY }}"
        export TEST_ENVIRONMENT="${{ inputs.environment || github.event.inputs.environment || 'development' }}"
        export TEST_TIMEOUT="300"

        # Run integration test suite
        cd tests/integration
        ./run-integration-tests.sh
      env:
        AWS_REGION: ${{ env.AWS_REGION }}

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: tests/integration/results/
        retention-days: 7

  # Deployment Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [ deploy-backend, deploy-frontend, integration-tests ]
    if: always()

    steps:
    - name: Create deployment summary
      run: |
        # Generate deployment summary header
        {
          echo "## üöÄ Deployment Summary"
          echo ""
          echo "**Environment:** ${{ inputs.environment || github.event.inputs.environment || 'development' }}"
          echo "**Trigger:** ${{ github.event_name }}"
          echo ""
        } >> "$GITHUB_STEP_SUMMARY"

        # Backend deployment status
        if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
          {
            echo "‚úÖ **Backend Deployment:** Success"
            echo "   - API Endpoint: ${{ needs.deploy-backend.outputs.api-endpoint }}"
          } >> "$GITHUB_STEP_SUMMARY"
        elif [[ "${{ needs.deploy-backend.result }}" == "skipped" ]]; then
          echo "‚è≠Ô∏è **Backend Deployment:** Skipped (no changes)" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "‚ùå **Backend Deployment:** Failed" >> "$GITHUB_STEP_SUMMARY"
        fi

        # Frontend deployment status
        if [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
          echo "‚úÖ **Frontend Deployment:** Success" >> "$GITHUB_STEP_SUMMARY"
        elif [[ "${{ needs.deploy-frontend.result }}" == "skipped" ]]; then
          echo "‚è≠Ô∏è **Frontend Deployment:** Skipped (no changes)" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "‚ùå **Frontend Deployment:** Failed" >> "$GITHUB_STEP_SUMMARY"
        fi

        # Integration tests status
        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "‚úÖ **Integration Tests:** Passed" >> "$GITHUB_STEP_SUMMARY"
        elif [[ "${{ needs.integration-tests.result }}" == "skipped" ]]; then
          echo "‚è≠Ô∏è **Integration Tests:** Skipped" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "‚ùå **Integration Tests:** Failed" >> "$GITHUB_STEP_SUMMARY"
        fi

        # Generate useful links section
        {
          echo ""
          echo "**üîó Useful Links:**"
          if [[ -n "${{ needs.deploy-backend.outputs.api-endpoint }}" ]]; then
            echo "- [API Health Check](${{ needs.deploy-backend.outputs.api-endpoint }}api/health)"
          fi
          echo "- [AWS CloudFormation Console](https://console.aws.amazon.com/cloudformation/)"
          echo "- [AWS Amplify Console](https://console.aws.amazon.com/amplify/)"
        } >> "$GITHUB_STEP_SUMMARY"

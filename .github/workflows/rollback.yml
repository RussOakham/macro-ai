# Rollback Workflow
# Purpose: Emergency rollback for both backend and frontend deployments
# Triggers: Manual dispatch only (for safety)

name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - hobby
          - staging
          - production
      rollback_backend:
        description: 'Rollback backend infrastructure'
        required: false
        default: true
        type: boolean
      rollback_frontend:
        description: 'Rollback frontend deployment'
        required: false
        default: true
        type: boolean
      target_commit:
        description: 'Target commit SHA to rollback to (optional)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'
  PNPM_VERSION: '10.14.0'

permissions:
  id-token: write
  contents: read
  actions: write

jobs:
  # Validate rollback request
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    outputs:
      should-proceed: ${{ steps.validation.outputs.should-proceed }}
      target-commit: ${{ steps.validation.outputs.target-commit }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 50 # Get more history for rollback options

      - name: Validate rollback request
        id: validation
        run: |
          echo "🔍 Validating rollback request..."
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Backend rollback: ${{ github.event.inputs.rollback_backend }}"
          echo "Frontend rollback: ${{ github.event.inputs.rollback_frontend }}"

          # Determine target commit
          if [[ -n "${{ github.event.inputs.target_commit }}" ]]; then
            TARGET_COMMIT="${{ github.event.inputs.target_commit }}"
            echo "Using specified commit: $TARGET_COMMIT"
          else
            # Get the previous successful deployment commit
            TARGET_COMMIT=$(git log --oneline -n 10 --grep="deploy" | head -2 | tail -1 | cut -d' ' -f1)
            echo "Using previous deployment commit: $TARGET_COMMIT"
          fi

          # Validate commit exists
          if git cat-file -e "$TARGET_COMMIT^{commit}" 2>/dev/null; then
            echo "✅ Target commit is valid: $TARGET_COMMIT"
            echo "should-proceed=true" >> $GITHUB_OUTPUT
            echo "target-commit=$TARGET_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "❌ Invalid target commit: $TARGET_COMMIT"
            echo "should-proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create rollback summary
        run: |
          echo "## 🚨 Rollback Request Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Commit:** ${{ steps.validation.outputs.target-commit }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Rollback:** ${{ github.event.inputs.rollback_backend }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Rollback:** ${{ github.event.inputs.rollback_frontend }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.validation.outputs.should-proceed }}" == "true" ]]; then
            echo "✅ **Status:** Validation passed - proceeding with rollback" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Validation failed - rollback cancelled" >> $GITHUB_STEP_SUMMARY
          fi

  # Rollback backend infrastructure
  rollback-backend:
    name: Rollback Backend Infrastructure
    runs-on: ubuntu-latest
    needs: validate-rollback
    if: needs.validate-rollback.outputs.should-proceed == 'true' && github.event.inputs.rollback_backend == 'true'
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout target commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-rollback.outputs.target-commit }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Lambda package from target commit
        run: |
          cd apps/express-api
          pnpm install --frozen-lockfile
          pnpm package:lambda

      - name: Deploy previous infrastructure version
        run: |
          cd infrastructure
          pnpm install --frozen-lockfile
          pnpm build

          echo "🔄 Rolling back infrastructure to commit ${{ needs.validate-rollback.outputs.target-commit }}"
          pnpm deploy
        env:
          CDK_DEPLOY_ENV: ${{ github.event.inputs.environment }}

      - name: Validate rollback
        run: |
          cd infrastructure
          ./scripts/validate-deployment.sh

  # Rollback frontend deployment
  rollback-frontend:
    name: Rollback Frontend Deployment
    runs-on: ubuntu-latest
    needs: validate-rollback
    if: needs.validate-rollback.outputs.should-proceed == 'true' && github.event.inputs.rollback_frontend == 'true'
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout target commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-rollback.outputs.target-commit }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build frontend from target commit
        run: |
          cd apps/client-ui
          pnpm install --frozen-lockfile

          # Set environment variables for the target environment
          export VITE_API_KEY="${{ secrets.FRONTEND_API_KEY }}"
          export VITE_APP_ENV="${{ github.event.inputs.environment }}"

          # Get API endpoint for the environment
          ENV_NAME="${{ github.event.inputs.environment }}"
          ENV_CAPITALIZED=$(echo "$ENV_NAME" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name "MacroAi${ENV_CAPITALIZED}Stack" \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text 2>/dev/null || echo "")

          if [[ -n "$API_ENDPOINT" ]]; then
            export VITE_API_URL="${API_ENDPOINT}api"
          fi

          pnpm build

      - name: Install Amplify CLI
        run: npm install -g @aws-amplify/cli

      - name: Deploy frontend rollback
        run: |
          cd apps/client-ui

          echo "🔄 Rolling back frontend to commit ${{ needs.validate-rollback.outputs.target-commit }}"
          export AMPLIFY_ENV="${{ github.event.inputs.environment }}"
          ./scripts/deploy-amplify.sh

  # Post-rollback validation
  post-rollback-validation:
    name: Post-Rollback Validation
    runs-on: ubuntu-latest
    needs: [validate-rollback, rollback-backend, rollback-frontend]
    if: always() && needs.validate-rollback.outputs.should-proceed == 'true'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate rollback success
        run: |
          echo "🔍 Validating rollback success..."

          # Test API Gateway if backend was rolled back
          if [[ "${{ github.event.inputs.rollback_backend }}" == "true" ]]; then
            API_ENDPOINT=$(aws cloudformation describe-stacks \
              --stack-name MacroAi$(echo ${{ github.event.inputs.environment }} | sed 's/.*/\u&/')Stack \
              --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
              --output text 2>/dev/null || echo "")

            if [[ -n "$API_ENDPOINT" ]]; then
              echo "Testing rolled back API: ${API_ENDPOINT}api/health"
              HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "${API_ENDPOINT}api/health" || echo "000")

              if [[ "$HEALTH_RESPONSE" == *"200" ]]; then
                echo "✅ Backend rollback successful - API responding"
              else
                echo "❌ Backend rollback may have issues - API not responding properly"
                exit 1
              fi
            fi
          fi

          echo "✅ Rollback validation completed"

      - name: Create rollback report
        run: |
          echo "## 🚨 Rollback Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Commit:** ${{ needs.validate-rollback.outputs.target-commit }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.rollback-backend.result }}" == "success" ]]; then
            echo "✅ **Backend Rollback:** Success" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.rollback-backend.result }}" == "skipped" ]]; then
            echo "⏭️ **Backend Rollback:** Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backend Rollback:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.rollback-frontend.result }}" == "success" ]]; then
            echo "✅ **Frontend Rollback:** Success" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.rollback-frontend.result }}" == "skipped" ]]; then
            echo "⏭️ **Frontend Rollback:** Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend Rollback:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**⚠️ Important:** Monitor the application closely and investigate the root cause of the issue that required this rollback." >> $GITHUB_STEP_SUMMARY

name: Deploy Staging Environment

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "DEPLOY STAGING" to confirm staging environment deployment'
        required: true
        type: string
      neon_branch:
        description: 'Neon branch to use (leave empty for auto-branch-from-production)'
        required: false
        type: string
        default: 'auto-branch-from-production'

permissions:
  contents: read
  id-token: write
  pull-requests: write
  issues: write

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20.x'
  PNPM_VERSION: '10.14.0'
  ENVIRONMENT: 'staging'
  STACK_NAME: 'MacroAiStagingStack'
  # CDK environment variables
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_REGION: us-east-1

jobs:
  # Validate deployment request
  validate-request:
    name: Validate Staging Deployment Request
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.decision.outputs.should-deploy }}
      neon-branch: ${{ steps.neon-branch.outputs.branch }}
      is-owner: ${{ steps.codeowner-check.outputs.is-owner }}
      target-user: ${{ steps.codeowner-check.outputs.target-user }}

    steps:
      - name: Validate confirmation input
        run: |
          if [[ "${{ inputs.confirm }}" != "DEPLOY STAGING" ]]; then
            echo "‚ùå Confirmation failed."
            echo "Expected: 'DEPLOY STAGING'"
            echo "Got: '${{ inputs.confirm }}'"
            exit 1
          fi
          echo "‚úÖ Confirmation validated"

      - name: Determine Neon branch
        id: neon-branch
        run: |
          BRANCH_NAME="${{ inputs.neon_branch }}"
          if [[ -z "${BRANCH_NAME}" ]]; then
            BRANCH_NAME="auto-branch-from-production"
          fi
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "üîÑ Using Neon branch: ${BRANCH_NAME}"

      - name: Check code ownership
        id: codeowner-check
        uses: ./.github/actions/check-codeowner
        with:
          mode: 'manual'
          base-ref: 'develop'

      - name: Make deployment decision
        id: decision
        run: |
          IS_OWNER="${{ steps.codeowner-check.outputs.is-owner }}"
          ACTOR="${{ steps.codeowner-check.outputs.target-user }}"
          NEON_BRANCH="${{ steps.neon-branch.outputs.branch }}"

          if [[ "${IS_OWNER}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ STAGING DEPLOYMENT approved for code owner: ${ACTOR}"
            echo "üìä Neon Branch: ${NEON_BRANCH}"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå STAGING DEPLOYMENT blocked: ${ACTOR} is not a code owner"
            exit 1
          fi

  # Build Docker image for ECS
  build-staging:
    name: Build Docker Image for Staging
    runs-on: ubuntu-latest
    needs: [validate-request]
    if: needs.validate-request.outputs.should-deploy == 'true'
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      image-tag: ${{ steps.build.outputs.image-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: 'develop'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-BuildStaging-${{ github.run_id }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install CDK CLI
        run: pnpm add -g aws-cdk@2

      - name: Build and push Docker image
        id: build
        run: |
          cd apps/express-api

          # Generate image tag
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-8)
          IMAGE_TAG="staging-${TIMESTAMP}-${GITHUB_SHA_SHORT}"

          # Build and push image
          ECR_REPOSITORY_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/macro-ai-api"

          echo "üèóÔ∏è Building Docker image..."
          docker build -t ${ECR_REPOSITORY_URI}:${IMAGE_TAG} .

          echo "üì§ Pushing to ECR..."
          docker push ${ECR_REPOSITORY_URI}:${IMAGE_TAG}

          # Output values
          echo "image-uri=${ECR_REPOSITORY_URI}:${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

          echo "‚úÖ Docker image built and pushed: ${ECR_REPOSITORY_URI}:${IMAGE_TAG}"

  # Deploy staging infrastructure
  deploy-staging:
    name: Deploy Staging Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-request, build-staging]
    if: needs.validate-request.outputs.should-deploy == 'true'
    environment: staging

    permissions:
      id-token: write
      contents: read
      pull-requests: write
      issues: write

    outputs:
      api-endpoint: ${{ steps.deploy.outputs.api-endpoint }}
      stack-name: ${{ steps.deploy.outputs.stack-name }}
      neon-branch: ${{ needs.validate-request.outputs.neon-branch }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: 'develop'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DeployStaging-${{ github.run_id }}

      - name: Install CDK CLI
        run: pnpm add -g aws-cdk@2

      - name: Install infrastructure dependencies
        run: |
          cd infrastructure
          pnpm install --frozen-lockfile

      - name: Deploy staging infrastructure
        id: deploy
        run: |
          cd infrastructure

          IMAGE_URI="${{ needs.build-staging.outputs.image-uri }}"
          NEON_BRANCH="${{ needs.validate-request.outputs.neon-branch }}"

          echo "üöÄ Deploying STAGING infrastructure..."
          echo "üì¶ Stack: ${{ env.STACK_NAME }}"
          echo "üê≥ Image: ${IMAGE_URI}"
          echo "üóÑÔ∏è Neon Branch: ${NEON_BRANCH}"
          echo "üë§ Requested by: ${{ needs.validate-request.outputs.target-user }}"
          echo "üìÖ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

          # Set deployment environment variables
          export CDK_DEPLOY_ENV="${{ env.ENVIRONMENT }}"
          export AWS_REGION="${{ env.AWS_REGION }}"

          # Deploy with CDK
          cdk deploy "${{ env.STACK_NAME }}" \
            --context environment="${{ env.ENVIRONMENT }}" \
            --context imageUri="${IMAGE_URI}" \
            --context neonBranch="${NEON_BRANCH}" \
            --require-approval never \
            --outputs-file "cdk-outputs-${{ env.ENVIRONMENT }}.json"

          # Extract outputs
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name "${{ env.STACK_NAME }}" \
            --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" \
            --output text 2>/dev/null || echo "")

          echo "stack-name=${{ env.STACK_NAME }}" >> $GITHUB_OUTPUT
          echo "api-endpoint=${API_ENDPOINT}" >> $GITHUB_OUTPUT

          echo "‚úÖ STAGING infrastructure deployed successfully!"

  # Health check and verification
  verify-staging:
    name: Verify Staging Deployment
    runs-on: ubuntu-latest
    needs: [validate-request, deploy-staging]
    if: always() && needs.validate-request.outputs.should-deploy == 'true'

    steps:
      - name: Health check
        run: |
          API_ENDPOINT="${{ needs.deploy-staging.outputs.api-endpoint }}"

          if [[ -z "${API_ENDPOINT}" ]]; then
            echo "‚ùå No API endpoint found in deployment outputs"
            exit 1
          fi

          echo "üîç Health checking staging deployment..."
          echo "üåê API Endpoint: ${API_ENDPOINT}"

          # Wait for service to be ready
          echo "‚è≥ Waiting for service to be ready..."
          sleep 60

          # Perform health check
          MAX_RETRIES=10
          RETRY_COUNT=0

          while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            if curl -f -s "${API_ENDPOINT}/health" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [[ $RETRY_COUNT -eq $MAX_RETRIES ]]; then
                echo "‚ùå Health check failed after ${MAX_RETRIES} attempts"
                exit 1
              fi
              echo "‚è≥ Health check attempt ${RETRY_COUNT}/${MAX_RETRIES} failed, retrying in 30 seconds..."
              sleep 30
            fi
          done

          echo "üéâ STAGING DEPLOYMENT VERIFICATION COMPLETE"

  # Report deployment results
  deployment-report:
    name: Staging Deployment Report
    runs-on: ubuntu-latest
    needs: [validate-request, deploy-staging, verify-staging]
    if: always() && needs.validate-request.outputs.should-deploy == 'true'

    steps:
      - name: Generate deployment report
        run: |
          echo "## üöÄ STAGING ENVIRONMENT DEPLOYMENT REPORT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** STAGING" >> $GITHUB_STEP_SUMMARY
          echo "**Stack:** \`${{ env.STACK_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Requested by:** @${{ needs.validate-request.outputs.target-user }}" >> $GITHUB_STEP_SUMMARY
          echo "**Neon Branch:** ${{ needs.validate-request.outputs.neon-branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Deployment status
          DEPLOY_JOB_STATUS="${{ needs.deploy-staging.result }}"
          VERIFY_JOB_STATUS="${{ needs.verify-staging.result }}"

          if [[ "${DEPLOY_JOB_STATUS}" == "success" && "${VERIFY_JOB_STATUS}" == "success" ]]; then
            echo "### ‚úÖ DEPLOYMENT SUCCESSFUL" >> $GITHUB_STEP_SUMMARY
            echo "The staging environment has been deployed and verified." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**API Endpoint:** ${{ needs.deploy-staging.outputs.api-endpoint }}" >> $GITHUB_STEP_SUMMARY
            echo "**Health Check:** ${{ needs.deploy-staging.outputs.api-endpoint }}/health" >> $GITHUB_STEP_SUMMARY
          elif [[ "${DEPLOY_JOB_STATUS}" == "success" && "${VERIFY_JOB_STATUS}" == "failure" ]]; then
            echo "### ‚ö†Ô∏è DEPLOYMENT PARTIALLY SUCCESSFUL" >> $GITHUB_STEP_SUMMARY
            echo "Infrastructure deployed but health checks failed. Manual verification required." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**API Endpoint:** ${{ needs.deploy-staging.outputs.api-endpoint }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå DEPLOYMENT FAILED" >> $GITHUB_STEP_SUMMARY
            echo "The staging deployment encountered errors." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Cost Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Estimated Monthly Cost:** ¬£8-12" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Fargate:** ¬£4-6 (with scheduled scaling)" >> $GITHUB_STEP_SUMMARY
          echo "- **ALB:** ¬£2-3" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudWatch:** ¬£1-2" >> $GITHUB_STEP_SUMMARY
          echo "- **Secrets Manager:** ¬£0.50" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚è∞ Scheduled Scaling" >> $GITHUB_STEP_SUMMARY
          echo "- **Shutdown:** 10:00 PM UTC daily" >> $GITHUB_STEP_SUMMARY
          echo "- **Startup:** 6:00 AM UTC daily" >> $GITHUB_STEP_SUMMARY
          echo "- **Savings:** ~¬£4-6/month in compute costs" >> $GITHUB_STEP_SUMMARY

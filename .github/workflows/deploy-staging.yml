# Staging Deployment Workflow
# Purpose: Deploy to staging environment for testing and validation
# Triggers: Push to develop branch, manual dispatch

name: Deploy to Staging

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even without changes'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - develop
    paths:
      - 'apps/express-api/**'
      - 'apps/client-ui/**'
      - 'infrastructure/**'

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'
  PNPM_VERSION: '10.14.0'
  ENVIRONMENT: 'staging'

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  # Pre-deployment validation
  validate:
    name: Validate Staging Deployment
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check deployment conditions
        id: check
        run: |
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Forced deployment requested"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Push to develop branch detected"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "No deployment conditions met"
          fi

      - name: Setup Node.js
        if: steps.check.outputs.should-deploy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        if: steps.check.outputs.should-deploy == 'true'
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        if: steps.check.outputs.should-deploy == 'true'
        run: pnpm install --frozen-lockfile

      - name: Run tests
        if: steps.check.outputs.should-deploy == 'true'
        env:
          TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
        run: |
          # Create test environment files with dynamic API keys
          {
            echo "VITE_API_URL=http://localhost:3040/api"
            echo "VITE_API_KEY=${TEST_API_KEY}"
          } > apps/client-ui/.env

          {
            echo "API_KEY=${TEST_API_KEY}"
            echo "NODE_ENV=test"
          } > apps/express-api/.env

          pnpm test

  # Deploy to staging using the full-stack workflow
  deploy:
    name: Deploy Full Stack to Staging
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    uses: ./.github/workflows/deploy-full-stack.yml
    with:
      environment: staging
      deploy_backend: true
      deploy_frontend: true
      run_tests: true
    secrets: inherit

  # Staging-specific tests
  staging-tests:
    name: Staging Environment Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && needs.deploy.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run staging-specific tests
        run: |
          echo "Running staging environment tests..."

          # Test API Gateway with staging configuration
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name MacroAiStagingStack \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text 2>/dev/null || echo "")

          if [[ -n "$API_ENDPOINT" ]]; then
            echo "Testing staging API: ${API_ENDPOINT}api/health"
            
            # Test health endpoint
            HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "${API_ENDPOINT}api/health" || echo "000")
            if [[ "$HEALTH_RESPONSE" == *"200" ]]; then
              echo "✅ Health check passed"
            else
              echo "❌ Health check failed: $HEALTH_RESPONSE"
              exit 1
            fi
            
            # Test CORS configuration
            CORS_RESPONSE=$(curl -s -w "%{http_code}" \
              -H "Origin: https://staging.macro-ai.com" \
              -H "Access-Control-Request-Method: POST" \
              -X OPTIONS "${API_ENDPOINT}api/health" || echo "000")
            
            if [[ "$CORS_RESPONSE" == *"200" ]]; then
              echo "✅ CORS configuration working"
            else
              echo "⚠️ CORS may need configuration: $CORS_RESPONSE"
            fi
          else
            echo "⚠️ Could not find staging API endpoint"
          fi

      - name: Performance tests
        run: |
          echo "Running basic performance tests..."

          # Simple load test with curl
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name MacroAiStagingStack \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text 2>/dev/null || echo "")

          if [[ -n "$API_ENDPOINT" ]]; then
            echo "Testing API response times..."
            for i in {1..5}; do
              RESPONSE_TIME=$(curl -s -w "%{time_total}" -o /dev/null "${API_ENDPOINT}api/health")
              echo "Request $i: ${RESPONSE_TIME}s"
            done
          fi

  # Notify about staging deployment
  notify:
    name: Notify Staging Deployment
    runs-on: ubuntu-latest
    needs: [deploy, staging-tests]
    if: always()

    steps:
      - name: Create deployment notification
        run: |
          echo "## 🚀 Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** staging" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ **Deployment:** Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.staging-tests.result }}" == "success" ]]; then
            echo "✅ **Staging Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Staging Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Review staging environment functionality" >> $GITHUB_STEP_SUMMARY
          echo "- Run manual testing if needed" >> $GITHUB_STEP_SUMMARY
          echo "- Create PR to main branch for production deployment" >> $GITHUB_STEP_SUMMARY

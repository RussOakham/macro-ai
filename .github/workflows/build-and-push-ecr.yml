name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - main
      - develop
      - feature/docker-ecs-fargate-migration
    paths:
      - 'apps/express-api/**'
      - 'packages/**'
      - 'Dockerfile.express-api-turbo'
      - '.dockerignore'
      - 'turbo.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches:
      - main
      - develop
      - feature/docker-ecs-fargate-migration
    paths:
      - 'apps/express-api/**'
      - 'packages/**'
      - 'Dockerfile.express-api-turbo'
      - '.dockerignore'
      - 'turbo.json'
      - 'pnpm-lock.yaml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_NAME: macro-ai-${{ github.event.inputs.environment || 'development' }}-express-api

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for turbo

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-ECR-Build-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: Install turbo
        run: npm install -g turbo@^2

      - name: Get AWS account ID
        id: aws-account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "AWS Account ID: $ACCOUNT_ID"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ github.event.inputs.image_tag || 'latest' }}
            type=raw,value=${{ github.event.inputs.environment || 'development' }}

      - name: Run turbo prune
        run: |
          cd ${{ github.workspace }}
          turbo prune @repo/express-api --docker

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.workspace }}
          file: ${{ github.workspace }}/Dockerfile.express-api-turbo
          target: runner
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Output image details
        run: |
          echo "ðŸŽ‰ Docker image built and pushed successfully!"
          echo "Repository: ${{ env.ECR_REPOSITORY_NAME }}"
          echo "Image URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo ""
          echo "ðŸ’¡ Next steps:"
          echo "1. Update ECS task definition to use this image"
          echo "2. Deploy the updated ECS service"
          echo "3. Monitor deployment in AWS console"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-Security-Scan-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ github.event.inputs.image_tag || 'latest' }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

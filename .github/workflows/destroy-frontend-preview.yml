name: Destroy Frontend PR Preview Environment

on:
  pull_request:
    types: [closed]
    branches: [develop, main]

permissions:
  contents: read
  pull-requests: write

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
  PNPM_VERSION: '10.14.0'
  # AWS environment variables
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  # Validate access and determine if teardown should proceed
  validate-access:
    name: Validate Access and Environment
    runs-on: ubuntu-latest

    outputs:
      should-destroy: ${{ steps.decision.outputs.should-destroy }}
      env-name: ${{ steps.env-name.outputs.env-name }}
      target-user: ${{ steps.codeowner-check.outputs.target-user }}
      amplify-app-name: ${{ steps.amplify-info.outputs.amplify-app-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check code ownership
        id: codeowner-check
        uses: ./.github/actions/check-codeowner
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate environment name
        id: env-name
        run: |
          ENV_NAME="pr-${{ github.event.pull_request.number }}"
          echo "env-name=${ENV_NAME}" >> $GITHUB_OUTPUT
          echo "🌍 Environment name: ${ENV_NAME}"

      - name: Generate Amplify app info
        id: amplify-info
        run: |
          AMPLIFY_APP_NAME="macro-ai-frontend-pr-${{ github.event.pull_request.number }}"
          echo "amplify-app-name=${AMPLIFY_APP_NAME}" >> $GITHUB_OUTPUT
          echo "📱 Amplify app name: ${AMPLIFY_APP_NAME}"

      - name: Make teardown decision
        id: decision
        run: |
          IS_OWNER="${{ steps.codeowner-check.outputs.is-owner }}"
          ACTOR="${{ steps.codeowner-check.outputs.target-user }}"
          PR_STATE="${{ github.event.pull_request.state }}"
          PR_MERGED="${{ github.event.pull_request.merged }}"

          if [[ "${IS_OWNER}" == "true" ]]; then
            echo "should-destroy=true" >> $GITHUB_OUTPUT
            echo "✅ Frontend preview teardown approved for code owner: ${ACTOR}"
            echo "🌍 Target environment: ${{ steps.env-name.outputs.env-name }}"
            echo "📱 Amplify app: ${{ steps.amplify-info.outputs.amplify-app-name }}"
            echo "🔗 PR state: ${PR_STATE} (merged: ${PR_MERGED})"
          else
            echo "should-destroy=false" >> $GITHUB_OUTPUT
            echo "❌ Frontend preview teardown blocked: ${ACTOR} is not a code owner"
            echo "💡 Only code owners can trigger frontend preview teardown"
          fi

  # Check if Amplify app exists
  check-amplify-app:
    name: Check Amplify App
    runs-on: ubuntu-latest
    needs: [validate-access]
    if: needs.validate-access.outputs.should-destroy == 'true'

    permissions:
      id-token: write
      contents: read

    outputs:
      app-exists: ${{ steps.check-app.outputs.app-exists }}
      app-id: ${{ steps.check-app.outputs.app-id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check Amplify app existence
        id: check-app
        run: |
          AMPLIFY_APP_NAME="${{ needs.validate-access.outputs.amplify-app-name }}"

          echo "🔍 Checking for Amplify app: ${AMPLIFY_APP_NAME}"

          # Check if Amplify app exists
          APP_INFO=$(aws amplify list-apps \
            --query "apps[?name=='${AMPLIFY_APP_NAME}'].{appId:appId,name:name,status:status}" \
            --output json 2>/dev/null || echo "[]")

          if [[ "$APP_INFO" != "[]" ]] && [[ -n "$APP_INFO" ]]; then
            APP_ID=$(echo "$APP_INFO" | jq -r '.[0].appId' 2>/dev/null || echo "")
            APP_STATUS=$(echo "$APP_INFO" | jq -r '.[0].status' 2>/dev/null || echo "")
            
            if [[ -n "$APP_ID" && "$APP_ID" != "null" ]]; then
              echo "app-exists=true" >> $GITHUB_OUTPUT
              echo "app-id=${APP_ID}" >> $GITHUB_OUTPUT
              echo "✅ Amplify app found: ${APP_ID} (status: ${APP_STATUS})"
            else
              echo "app-exists=false" >> $GITHUB_OUTPUT
              echo "app-id=" >> $GITHUB_OUTPUT
              echo "⚠️ Amplify app data found but could not extract app ID"
            fi
          else
            echo "app-exists=false" >> $GITHUB_OUTPUT
            echo "app-id=" >> $GITHUB_OUTPUT
            echo "ℹ️ Amplify app not found - may have already been deleted"
          fi

  # Destroy the frontend preview environment
  destroy-frontend-preview:
    name: Destroy Frontend Preview
    runs-on: ubuntu-latest
    needs: [validate-access, check-amplify-app]
    if: needs.validate-access.outputs.should-destroy == 'true' && needs.check-amplify-app.outputs.app-exists == 'true'

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    outputs:
      destroy-result: ${{ steps.destroy.outputs.destroy-result }}
      verification-result: ${{ steps.verify.outputs.verification-result }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Amplify CLI
        run: |
          npm install -g @aws-amplify/cli
          amplify --version

      - name: Destroy Amplify app
        id: destroy
        run: |
          cd apps/client-ui

          APP_ID="${{ needs.check-amplify-app.outputs.app-id }}"
          ENV_NAME="${{ needs.validate-access.outputs.env-name }}"
          AMPLIFY_APP_NAME="${{ needs.validate-access.outputs.amplify-app-name }}"

          echo "🗑️ Destroying frontend preview environment"
          echo "📱 Amplify app: ${AMPLIFY_APP_NAME}"
          echo "🆔 App ID: ${APP_ID}"
          echo "🌍 Environment: ${ENV_NAME}"
          echo "👤 PR Author: ${{ needs.validate-access.outputs.target-user }}"
          echo "🔗 PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}"

          # Make destroy script executable and run it
          chmod +x scripts/destroy-amplify-preview.sh

          # Set environment variables for the script
          export AMPLIFY_APP_ID="${APP_ID}"
          export AMPLIFY_APP_NAME="${AMPLIFY_APP_NAME}"
          export ENVIRONMENT_NAME="${ENV_NAME}"
          export PR_NUMBER="${{ github.event.pull_request.number }}"
          export AWS_REGION="${{ env.AWS_REGION }}"

          # Run destruction script with retries
          DESTROY_SUCCESS=false
          for attempt in {1..3}; do
            echo "🔄 Destruction attempt ${attempt}/3..."
            
            if ./scripts/destroy-amplify-preview.sh; then
              DESTROY_SUCCESS=true
              echo "✅ Amplify app destroyed successfully"
              break
            else
              echo "❌ Destruction attempt ${attempt} failed"
              if [[ ${attempt} -lt 3 ]]; then
                echo "⏳ Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done

          if [[ "${DESTROY_SUCCESS}" == "true" ]]; then
            echo "destroy-result=success" >> $GITHUB_OUTPUT
          else
            echo "destroy-result=failed" >> $GITHUB_OUTPUT
            echo "❌ All destruction attempts failed"
            
            # Try to get error details
            if [[ -f "amplify-destroy-error.txt" ]]; then
              echo "Error details:"
              cat amplify-destroy-error.txt
            fi
            
            exit 1
          fi

      - name: Verify app deletion
        id: verify
        run: |
          APP_ID="${{ needs.check-amplify-app.outputs.app-id }}"

          echo "🔍 Verifying Amplify app deletion..."

          # Wait a moment for AWS to process the deletion
          sleep 10

          # Check if app still exists
          APP_STATUS=$(aws amplify get-app \
            --app-id "${APP_ID}" \
            --query 'app.status' \
            --output text 2>/dev/null || echo "DOES_NOT_EXIST")

          if [[ "${APP_STATUS}" == "DOES_NOT_EXIST" ]]; then
            echo "verification-result=success" >> $GITHUB_OUTPUT
            echo "✅ App deletion verified - frontend preview fully cleaned up"
          else
            echo "verification-result=partial" >> $GITHUB_OUTPUT
            echo "⚠️ App still exists with status: ${APP_STATUS}"
            echo "This may be normal if deletion is still in progress"
          fi

  # Generate teardown report
  generate-teardown-report:
    name: Generate Teardown Report
    runs-on: ubuntu-latest
    needs: [validate-access, check-amplify-app, destroy-frontend-preview]
    if: always() && needs.validate-access.outputs.should-destroy == 'true'

    permissions:
      pull-requests: write

    steps:
      - name: Generate teardown report
        run: |
          echo "## 🗑️ Frontend Preview Environment Teardown Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`${{ needs.validate-access.outputs.env-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Amplify App:** \`${{ needs.validate-access.outputs.amplify-app-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**PR Author:** @${{ needs.validate-access.outputs.target-user }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          APP_EXISTS="${{ needs.check-amplify-app.outputs.app-exists }}"
          DESTROY_RESULT="${{ needs.destroy-frontend-preview.outputs.destroy-result }}"
          VERIFICATION_RESULT="${{ needs.destroy-frontend-preview.outputs.verification-result }}"

          if [[ "${APP_EXISTS}" == "false" ]]; then
            echo "**Status:** ℹ️ No cleanup needed - Amplify app was not found" >> $GITHUB_STEP_SUMMARY
          elif [[ "${DESTROY_RESULT}" == "success" ]]; then
            echo "**Status:** ✅ Frontend preview environment destroyed successfully" >> $GITHUB_STEP_SUMMARY
            if [[ "${VERIFICATION_RESULT}" == "success" ]]; then
              echo "**Verification:** ✅ Deletion confirmed" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Verification:** ⚠️ Deletion in progress" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Status:** ❌ Frontend preview teardown failed" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:** Manual cleanup may be needed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This report was generated automatically when the PR was closed.*" >> $GITHUB_STEP_SUMMARY

      - name: Comment teardown status on PR
        uses: actions/github-script@v7
        with:
          script: |
            const envName = '${{ needs.validate-access.outputs.env-name }}';
            const amplifyAppName = '${{ needs.validate-access.outputs.amplify-app-name }}';
            const appExists = '${{ needs.check-amplify-app.outputs.app-exists }}';
            const destroyResult = '${{ needs.destroy-frontend-preview.outputs.destroy-result }}';
            const verificationResult = '${{ needs.destroy-frontend-preview.outputs.verification-result }}';

            let comment = `## 🗑️ Frontend Preview Cleanup\n\n`;

            if (appExists === 'false') {
              comment += `ℹ️ **No cleanup needed** - Frontend preview environment was not found.\n\n`;
              comment += `This is normal if:\n`;
              comment += `- The frontend preview was never deployed\n`;
              comment += `- The Amplify app was already manually deleted\n`;
              comment += `- The PR only contained backend changes\n\n`;
            } else if (destroyResult === 'success') {
              comment += `✅ **Frontend preview environment cleaned up successfully!**\n\n`;
              comment += `### 📱 Cleanup Details\n`;
              comment += `- **Environment**: \`${envName}\`\n`;
              comment += `- **Amplify App**: \`${amplifyAppName}\`\n`;
              
              if (verificationResult === 'success') {
                comment += `- **Status**: ✅ Deletion confirmed\n\n`;
              } else {
                comment += `- **Status**: ⏳ Deletion in progress\n\n`;
              }
              
              comment += `All resources have been cleaned up and no further action is required.\n\n`;
            } else {
              comment += `❌ **Frontend preview cleanup failed**\n\n`;
              comment += `### ⚠️ Manual Action Required\n`;
              comment += `The automatic cleanup process encountered an error. Please manually delete:\n`;
              comment += `- **Amplify App**: \`${amplifyAppName}\`\n\n`;
              comment += `**Manual cleanup command:**\n`;
              comment += `\`\`\`bash\n`;
              comment += `aws amplify delete-app --app-id <app-id>\n`;
              comment += `\`\`\`\n\n`;
              comment += `Please check the [workflow logs](${context.payload.pull_request.html_url}/checks) for details.\n\n`;
            }

            comment += `---\n`;
            comment += `*Automatic cleanup triggered by PR closure.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

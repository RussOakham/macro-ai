---
name: Reusable Deploy Backend (Pulumi)

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'Environment name (e.g., staging, production, pr-123)'
        required: true
        type: string
      deployment-type:
        description: 'Type of deployment (staging, production, preview)'
        required: true
        type: string
      image-tag:
        description: 'Docker image tag to deploy'
        required: true
        type: string
      pr-number:
        description: 'PR number for preview deployments'
        required: false
        type: string
      branch-name:
        description: 'Branch name for the deployment'
        required: false
        type: string
      custom-domain-name:
        description: 'Custom domain name for the deployment'
        required: false
        type: string
      hosted-zone-id:
        description: 'Route53 hosted zone ID for custom domain'
        required: false
        type: string
      should-deploy:
        description: 'Whether to actually deploy (for conditional deployment)'
        required: false
        type: boolean
        default: true
      deployment-scale:
        description: 'Deployment scale (preview, staging, production)'
        required: false
        type: string
        default: 'staging'
    secrets:
      AWS_ACCOUNT_ID:
        required: true
      AWS_ROLE_ARN:
        required: true
      PULUMI_ACCESS_TOKEN:
        required: true
      DOPPLER_TOKEN_STAGING:
        required: true
      DOPPLER_TOKEN_DEV:
        required: true
      DOPPLER_TOKEN_PROD:
        required: true
    outputs:
      api-endpoint:
        description: 'Deployed API endpoint URL'
        value: ${{ jobs.deploy-backend.outputs.api-endpoint }}
      stack-name:
        description: 'Pulumi stack name used'
        value: ${{ jobs.deploy-backend.outputs.stack-name }}
      health-status:
        description: 'Health check status'
        value: ${{ jobs.deploy-backend.outputs.health-status }}

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20.19.4'
  PNPM_VERSION: '10.14.0'
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

jobs:
  deploy-backend:
    name: Deploy Backend Infrastructure (Pulumi)
    runs-on: ubuntu-latest
    if: ${{ inputs.should-deploy }}
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pnpm-store
          node_modules
        key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          pnpm-${{ runner.os }}-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-Pulumi-Deploy-${{ github.run_id }}

    - name: Install Pulumi CLI
      run: |
        curl -fsSL https://get.pulumi.com | sh
        echo "$HOME/.pulumi/bin" >> "$GITHUB_PATH"

    - name: Install Pulumi dependencies
      run: |
        cd infrastructure/pulumi
        pnpm install --frozen-lockfile

    - name: Set Doppler token based on deployment type
      id: doppler-token
      run: |
        DEPLOYMENT_TYPE="${{ inputs.deployment-type }}"

        # Set the appropriate Doppler token based on deployment type
        if [[ "${DEPLOYMENT_TYPE}" == "staging" ]]; then
          DOPPLER_TOKEN="${{ secrets.DOPPLER_TOKEN_STAGING }}"
          echo "🔑 Using '${DEPLOYMENT_TYPE}' Doppler token"
        elif [[ "${DEPLOYMENT_TYPE}" == "production" ]]; then
          DOPPLER_TOKEN="${{ secrets.DOPPLER_TOKEN_PROD }}"
          echo "🔑 Using '${DEPLOYMENT_TYPE}' Doppler token"
        else
          DOPPLER_TOKEN="${{ secrets.DOPPLER_TOKEN_DEV }}"
          echo "🔑 Using '${DEPLOYMENT_TYPE}' Doppler token"
        fi

        echo "DOPPLER_TOKEN=${DOPPLER_TOKEN}" >> "$GITHUB_ENV"
        echo "✅ Doppler token set for '${DEPLOYMENT_TYPE}' environment"

    - name: Set Pulumi configuration
      id: pulumi-config
      run: |
        ENV_NAME="${{ inputs.environment-name }}"
        DEPLOYMENT_TYPE="${{ inputs.deployment-type }}"
        PR_NUMBER="${{ inputs.pr-number }}"
        IMAGE_TAG="${{ inputs.image-tag }}"

        # Construct the full image URI from tag
        ECR_REGISTRY="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
        if [[ "${DEPLOYMENT_TYPE}" == "production" ]]; then
          ECR_REPOSITORY="macro-ai-production-express-api"
        elif [[ "${DEPLOYMENT_TYPE}" == "minimal-production" ]]; then
          ECR_REPOSITORY="macro-ai-minimal-prod-express-api"
        elif [[ "${DEPLOYMENT_TYPE}" == "staging" ]]; then
          ECR_REPOSITORY="macro-ai-staging-express-api"
        else
          ECR_REPOSITORY="macro-ai-staging-express-api"
        fi
        IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
        echo "image-uri=${IMAGE_URI}" >> "$GITHUB_OUTPUT"

        # Determine stack name based on environment type
        if [[ "${DEPLOYMENT_TYPE}" == "preview" ]]; then
          STACK_NAME="pr-${PR_NUMBER:-0}"
        elif [[ "${DEPLOYMENT_TYPE}" == "staging" ]]; then
          STACK_NAME="stg"
        elif [[ "${DEPLOYMENT_TYPE}" == "production" ]]; then
          STACK_NAME="prd"
        else
          STACK_NAME="${ENV_NAME}"
        fi

        echo "stack-name=${STACK_NAME}" >> "$GITHUB_OUTPUT"
        echo "📦 Pulumi Stack: '${STACK_NAME}'"

    - name: Deploy Backend Infrastructure (Pulumi)
      id: deploy
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DOPPLER_TOKEN_STAGING: ${{ secrets.DOPPLER_TOKEN_STAGING }}
        DOPPLER_TOKEN_DEV: ${{ secrets.DOPPLER_TOKEN_DEV }}
        DOPPLER_TOKEN_PROD: ${{ secrets.DOPPLER_TOKEN_PROD }}
      run: |
        ENV_NAME="${{ inputs.environment-name }}"
        DEPLOYMENT_TYPE="${{ inputs.deployment-type }}"
        PR_NUMBER="${{ inputs.pr-number }}"
        BRANCH_NAME="${{ inputs.branch-name }}"
        CUSTOM_DOMAIN_NAME="${{ inputs.custom-domain-name }}"
        HOSTED_ZONE_ID="${{ inputs.hosted-zone-id }}"
        IMAGE_URI="${{ steps.pulumi-config.outputs.image-uri }}"
        STACK_NAME="${{ steps.pulumi-config.outputs.stack-name }}"

        echo "🚀 Starting Pulumi deployment..."
        echo "Environment: ${ENV_NAME}"
        echo "Deployment Type: ${DEPLOYMENT_TYPE}"
        echo "Stack: ${STACK_NAME}"
        echo "Image URI: '${IMAGE_URI}'"

        cd infrastructure/pulumi

        # Set Pulumi configuration
        pulumi config set environmentName "${ENV_NAME}" --stack "${STACK_NAME}"
        pulumi config set deploymentType "${DEPLOYMENT_TYPE}" --stack "${STACK_NAME}"
        pulumi config set imageUri "${IMAGE_URI}" --stack "${STACK_NAME}"

        # Extract image tag from image URI for ECR verification
        IMAGE_TAG=$(echo "${IMAGE_URI}" | cut -d':' -f2)
        echo "🔍 Extracted image tag: ${IMAGE_TAG}"
        echo "📝 Setting Pulumi config imageTag to: ${IMAGE_TAG}"
        pulumi config set imageTag "${IMAGE_TAG}" --stack "${STACK_NAME}"

        # Set Doppler token for environment variable injection
        echo "🔐 Setting Doppler token for environment variable injection..."
        if [[ "${ENV_NAME}" == "staging" ]]; then
          # Obfuscate token for logging (show first 3 chars + ****)
          TOKEN_PREFIX=$(echo "${DOPPLER_TOKEN_STAGING}" | cut -c1-3)
          echo "🔐 Using Doppler token: ${TOKEN_PREFIX}****"
          pulumi config set doppler:dopplerToken "${DOPPLER_TOKEN_STAGING}" --secret --stack "${STACK_NAME}"
        elif [[ "${ENV_NAME}" == "production" ]]; then
          # Obfuscate token for logging (show first 3 chars + ****)
          TOKEN_PREFIX=$(echo "${DOPPLER_TOKEN_PROD}" | cut -c1-3)
          echo "🔐 Using Doppler token: ${TOKEN_PREFIX}****"
          pulumi config set doppler:dopplerToken "${DOPPLER_TOKEN_PROD}" --secret --stack "${STACK_NAME}"
        else
          # Obfuscate token for logging (show first 3 chars + ****)
          TOKEN_PREFIX=$(echo "${DOPPLER_TOKEN_DEV}" | cut -c1-3)
          echo "🔐 Using Doppler token: ${TOKEN_PREFIX}****"
          pulumi config set doppler:dopplerToken "${DOPPLER_TOKEN_DEV}" --secret --stack "${STACK_NAME}"
        fi

        if [[ -n "${PR_NUMBER}" ]]; then
          pulumi config set prNumber "${PR_NUMBER}" --stack "${STACK_NAME}"
        fi

        if [[ -n "${BRANCH_NAME}" ]]; then
          pulumi config set branchName "${BRANCH_NAME}" --stack "${STACK_NAME}"
        fi

        if [[ -n "${CUSTOM_DOMAIN_NAME}" ]]; then
          pulumi config set customDomainName "${CUSTOM_DOMAIN_NAME}" --stack "${STACK_NAME}"
        fi

        if [[ -n "${HOSTED_ZONE_ID}" ]]; then
          pulumi config set hostedZoneId "${HOSTED_ZONE_ID}" --stack "${STACK_NAME}"
        fi

        # Verify Doppler token was set correctly
        echo "🔍 Verifying Doppler token configuration..."
        if pulumi config get doppler:dopplerToken --stack "${STACK_NAME}" >/dev/null 2>&1; then
          echo "✅ Doppler token configuration verified"
        else
          echo "❌ Failed to verify Doppler token configuration"
          exit 1
        fi

        # Deploy the infrastructure
        pulumi up --yes --stack "${STACK_NAME}"

        # Get the API endpoint
        API_ENDPOINT=$(pulumi stack output apiEndpoint --stack "${STACK_NAME}")
        echo "api-endpoint=${API_ENDPOINT}" >> $GITHUB_OUTPUT
        echo "stack-name=${STACK_NAME}" >> $GITHUB_OUTPUT
        echo "✅ Deployment completed successfully!"
        echo "🌐 API Endpoint: ${API_ENDPOINT}"

    - name: Health Check
      id: health-check
      run: |
        API_ENDPOINT="${{ steps.deploy.outputs.api-endpoint }}"
        echo "🔍 Performing health check on: '${API_ENDPOINT}'"

        # Wait for the service to be ready
        sleep 30

        # Perform health check
        if curl -f -s "${API_ENDPOINT}/health" > /dev/null; then
          echo "✅ Health check passed"
          echo "health-status=healthy" >> "$GITHUB_OUTPUT"
        else
          echo "❌ Health check failed"
          echo "health-status=unhealthy" >> "$GITHUB_OUTPUT"
          exit 1
        fi

    - name: Set job outputs
      id: job-outputs
      run: |
        # Capture outputs from steps for job-level access
        echo "health-status=${{ steps.health-check.outputs.health-status }}" >> $GITHUB_OUTPUT

    - name: Output Results
      run: |
        echo "🎉 Deployment Summary:"
        echo "Environment: ${{ inputs.environment-name }}"
        echo "Stack: ${{ steps.pulumi-config.outputs.stack-name }}"
        echo "API Endpoint: ${{ steps.deploy.outputs.api-endpoint }}"
        echo "Health Status: ${{ steps.health-check.outputs.health-status }}"

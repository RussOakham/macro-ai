name: Docker Build & ECR Push

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/express-api/**'
      - 'apps/client-ui/**'
      - 'infrastructure/**'
      - 'packages/**'
      - 'Dockerfile*'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build-ecr-push.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/express-api/**'
      - 'apps/client-ui/**'
      - 'infrastructure/**'
      - 'packages/**'
      - 'Dockerfile*'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build-ecr-push.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (production, staging, feature)'
        required: false
        default: 'development'
        type: choice
        options:
          - production
          - staging
          - feature
          - development
      force_rebuild:
        description: 'Force rebuild even if no changes detected'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20.19.4'
  PNPM_VERSION: '10.14.0'
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_REGION: us-east-1

jobs:
  # ============================================================================
  # EXPRESS API DOCKER BUILD
  # ============================================================================
  build-express-api:
    name: Build Express API Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      image-tag: ${{ steps.build.outputs.image-tag }}
      build-metadata: ${{ steps.build.outputs.build-metadata }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-docker-build-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine build context
        id: context
        run: |
          # Determine environment and build type
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
            REPOSITORY_SUFFIX=""
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENVIRONMENT="staging"
            REPOSITORY_SUFFIX="-staging"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ENVIRONMENT="feature"
            REPOSITORY_SUFFIX="-feature"
          else
            ENVIRONMENT="${{ github.event.inputs.environment || 'development' }}"
            REPOSITORY_SUFFIX="-${ENVIRONMENT}"
          fi

          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "repository-suffix=${REPOSITORY_SUFFIX}" >> $GITHUB_OUTPUT

      - name: Generate image tag
        id: image-tag
        run: |
          # Generate semantic version tag
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Production: use git tag or commit sha
            if [[ -n "${{ github.event.release.tag_name }}" ]]; then
              IMAGE_TAG="${{ github.event.release.tag_name }}"
            else
              IMAGE_TAG="${{ github.sha }}"
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            # Staging: use develop-{short-sha}
            IMAGE_TAG="develop-${{ github.sha }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Feature/PR: use pr-{number}-{short-sha}
            IMAGE_TAG="pr-${{ github.event.pull_request.number }}-${{ github.sha }}"
          else
            # Manual: use manual-{timestamp}-{short-sha}
            IMAGE_TAG="manual-${{ github.event.inputs.environment || 'development' }}-${{ github.sha }}"
          fi

          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Generated image tag: ${IMAGE_TAG}"

      - name: Check for changes requiring rebuild
        id: changes
        run: |
          # Check if Docker-related files or app code changed
          if git diff --name-only HEAD~1 | grep -qE '\.(js|ts|tsx|json|lock|dockerfile|yml)$|^apps/express-api|^packages|^infrastructure'; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "üîÑ Code changes detected - rebuilding image"
          elif [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "üîÑ Force rebuild requested"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No relevant changes detected - skipping rebuild"
          fi

      - name: Create ECR repository if needed
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          ECR_REPOSITORY="macro-ai${{ steps.context.outputs.repository-suffix }}-express-api"

          echo "üîç Checking ECR repository: ${ECR_REPOSITORY}"
          if ! aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" >/dev/null 2>&1; then
            echo "üì¶ Creating ECR repository: ${ECR_REPOSITORY}"
            aws ecr create-repository \
              --repository-name "${ECR_REPOSITORY}" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256 \
              --tags Key=Environment,Value=${{ steps.context.outputs.environment }} \
                     Key=ManagedBy,Value=GitHubActions \
                     Key=Project,Value=macro-ai
          fi

      - name: Generate environment file for build
        id: env-file
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          # Generate appropriate environment file based on environment
          ENVIRONMENT="${{ steps.context.outputs.environment }}"
          ENV_FILE="apps/express-api/.env.build"

          case "${ENVIRONMENT}" in
            "production")
              PARAM_PATH="/macro-ai/production"
              ;;
            "staging")
              PARAM_PATH="/macro-ai/staging"
              ;;
            "feature")
              PARAM_PATH="/macro-ai/feature"
              ;;
            *)
              PARAM_PATH="/macro-ai/development"
              ;;
          esac

          echo "üîç Generating environment file for ${ENVIRONMENT}"
          echo "üì• Parameter path: ${PARAM_PATH}"

          # Create environment file (simplified for build context)
          cat > "${ENV_FILE}" << EOF
          # Build-time environment variables
          NODE_ENV=production
          APP_ENV=${ENVIRONMENT}
          BUILD_VERSION=${{ steps.image-tag.outputs.image-tag }}
          BUILD_COMMIT=${{ github.sha }}
          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          BUILD_BRANCH=${{ github.ref_name }}
          BUILD_REPOSITORY=${{ github.repository }}
          BUILD_ACTOR=${{ github.actor }}

          # Placeholder values for required variables (masked for security)
          DATABASE_URL=postgresql://[REDACTED]:[REDACTED]@localhost:5432/[REDACTED]
          REDIS_URL=redis://localhost:6379
          API_KEY=[BUILD_TIME_PLACEHOLDER]
          JWT_SECRET=[BUILD_TIME_PLACEHOLDER]
          NEON_BRANCH_NAME=${ENVIRONMENT}-placeholder
          EOF

          echo "‚úÖ Environment file created: ${ENV_FILE}"
          echo "env-file=${ENV_FILE}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          ECR_REPOSITORY="macro-ai${{ steps.context.outputs.repository-suffix }}-express-api"
          IMAGE_TAG="${{ steps.image-tag.outputs.image-tag }}"
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${IMAGE_TAG}"

          echo "üê≥ Building Express API Docker image..."
          echo "Repository: ${ECR_REPOSITORY}"
          echo "Tag: ${IMAGE_TAG}"
          echo "URI: ${IMAGE_URI}"
          echo "Environment: ${{ steps.context.outputs.environment }}"

          # Build with BuildKit and advanced caching
          docker buildx build \
            --file apps/express-api/Dockerfile \
            --platform linux/amd64 \
            --build-arg ENV_FILE="${{ steps.env-file.outputs.env-file }}" \
            --build-arg BUILD_ENV=${{ steps.context.outputs.environment }} \
            --build-arg BUILD_VERSION="${{ steps.image-tag.outputs.image-tag }}" \
            --build-arg BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
            --build-arg BUILD_COMMIT=${{ github.sha }} \
            --build-arg BUILD_BRANCH=${{ github.ref_name }} \
            --build-arg BUILD_REPOSITORY=${{ github.repository }} \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --tag "${IMAGE_URI}" \
            --push \
            .

          # Also tag as latest for the environment
          LATEST_URI="${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:latest-${{ steps.context.outputs.environment }}"
          docker buildx build \
            --file apps/express-api/Dockerfile \
            --platform linux/amd64 \
            --build-arg ENV_FILE="${{ steps.env-file.outputs.env-file }}" \
            --cache-from type=gha \
            --tag "${LATEST_URI}" \
            --push \
            .

          echo "‚úÖ Express API image built and pushed successfully!"
          echo "üì¶ Primary: ${IMAGE_URI}"
          echo "üè∑Ô∏è  Latest: ${LATEST_URI}"

          # Generate build metadata
          BUILD_METADATA=$(cat <<EOF
          {
            "imageUri": "${IMAGE_URI}",
            "latestUri": "${LATEST_URI}",
            "imageTag": "${IMAGE_TAG}",
            "environment": "${{ steps.context.outputs.environment }}",
            "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commitSha": "${{ github.sha }}",
            "repository": "${{ github.repository }}",
            "branch": "${{ github.ref_name }}",
            "trigger": "${{ github.event_name }}",
            "actor": "${{ github.actor }}"
          }
          EOF
          )

          echo "build-metadata=${BUILD_METADATA}" >> $GITHUB_OUTPUT
          echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Skip build notification
        if: steps.changes.outputs.has-changes == 'false'
        run: |
          echo "‚ÑπÔ∏è Skipping Docker build - no relevant changes detected"
          echo "üí° To force a rebuild, use workflow_dispatch with force_rebuild=true"

      - name: Cleanup build artifacts
        if: always()
        run: |
          # Clean up environment files
          if [[ -f "apps/express-api/.env.build" ]]; then
            rm -f "apps/express-api/.env.build"
            echo "üßπ Cleaned up build environment file"
          fi

          # Clean up any temporary files
          echo "üßπ Build cleanup completed"

  # ============================================================================
  # CLIENT UI DOCKER BUILD
  # ============================================================================
  build-client-ui:
    name: Build Client UI Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      image-tag: ${{ steps.build.outputs.image-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-ui-build-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check for UI changes
        id: ui-changes
        run: |
          if git diff --name-only HEAD~1 | grep -qE '^apps/client-ui|^packages'; then
            echo "has-ui-changes=true" >> $GITHUB_OUTPUT
            echo "üîÑ Client UI changes detected"
          else
            echo "has-ui-changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No Client UI changes detected"
          fi

      - name: Build and push Client UI image
        id: build
        if: steps.ui-changes.outputs.has-ui-changes == 'true'
        run: |
          ECR_REPOSITORY="macro-ai-client-ui"
          IMAGE_TAG="${{ github.sha }}"

          # Create repository if it doesn't exist
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "${ECR_REPOSITORY}" \
              --image-scanning-configuration scanOnPush=true

          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${IMAGE_TAG}"

          echo "üê≥ Building Client UI Docker image..."
          docker buildx build \
            --file apps/client-ui/Dockerfile \
            --platform linux/amd64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --tag "${IMAGE_URI}" \
            --push \
            apps/client-ui

          echo "‚úÖ Client UI image built and pushed: ${IMAGE_URI}"
          echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

  # ============================================================================
  # BUILD SUMMARY & NOTIFICATION
  # ============================================================================
  build-summary:
    name: Build Summary & Notification
    runs-on: ubuntu-latest
    needs: [build-express-api, build-client-ui]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate build summary
        id: summary
        run: |
          EXPRESS_API_URI="${{ needs.build-express-api.outputs.image-uri }}"
          EXPRESS_API_TAG="${{ needs.build-express-api.outputs.image-tag }}"
          CLIENT_UI_URI="${{ needs.build-client-ui.outputs.image-uri }}"
          CLIENT_UI_TAG="${{ needs.build-client-ui.outputs.image-tag }}"

          echo "üìä Docker Build Summary"
          echo "======================"
          echo "Trigger: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo ""

          if [[ -n "${EXPRESS_API_URI}" ]]; then
            echo "‚úÖ Express API Image:"
            echo "   URI: ${EXPRESS_API_URI}"
            echo "   Tag: ${EXPRESS_API_TAG}"
            echo ""
          else
            echo "‚ö†Ô∏è Express API: No image built (no changes or skipped)"
            echo ""
          fi

          if [[ -n "${CLIENT_UI_URI}" ]]; then
            echo "‚úÖ Client UI Image:"
            echo "   URI: ${CLIENT_UI_URI}"
            echo "   Tag: ${CLIENT_UI_TAG}"
            echo ""
          else
            echo "‚ö†Ô∏è Client UI: No image built (no changes or skipped)"
            echo ""
          fi

          echo "üîó Build Metadata:"
          echo "   Build Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "   Build Actor: ${{ github.actor }}"
          echo "   Repository: ${{ github.repository }}"

          # Create summary for notifications
          SUMMARY="Docker images built successfully"
          if [[ -z "${EXPRESS_API_URI}" && -z "${CLIENT_UI_URI}" ]]; then
            SUMMARY="No images built - no relevant changes detected"
          fi

          echo "summary=${SUMMARY}" >> $GITHUB_OUTPUT

      - name: Create GitHub deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const expressApiUri = '${{ needs.build-express-api.outputs.image-uri }}';
            const clientUiUri = '${{ needs.build-client-ui.outputs.image-uri }}';

            let state = 'success';
            let description = 'Docker images built successfully';

            if (!expressApiUri && !clientUiUri) {
              state = 'skipped';
              description = 'No images built - no relevant changes';
            }

            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              context: 'Docker Build & ECR Push',
              description: description,
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            });

      - name: Notify deployment workflows
        if: needs.build-express-api.outputs.image-uri != ''
        run: |
          echo "üöÄ Docker images ready for deployment"
          echo "Express API: ${{ needs.build-express-api.outputs.image-uri }}"
          echo "Client UI: ${{ needs.build-client-ui.outputs.image-uri || 'Not built' }}"

          # Create a summary file for downstream workflows
          mkdir -p .build-outputs
          cat > .build-outputs/docker-build-summary.json << EOF
          {
            "buildId": "${{ github.run_id }}",
            "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commitSha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "expressApi": {
              "imageUri": "${{ needs.build-express-api.outputs.image-uri }}",
              "imageTag": "${{ needs.build-express-api.outputs.image-tag }}",
              "buildMetadata": ${{ needs.build-express-api.outputs.build-metadata || '{}' }}
            },
            "clientUi": {
              "imageUri": "${{ needs.build-client-ui.outputs.image-uri || '' }}",
              "imageTag": "${{ needs.build-client-ui.outputs.image-tag || '' }}"
            }
          }
          EOF

          echo "üìÑ Build summary saved to .build-outputs/docker-build-summary.json"

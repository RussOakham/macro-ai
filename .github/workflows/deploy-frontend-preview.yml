name: Deploy Frontend PR Preview Environment

on:
  pull_request:
    types: [ opened, reopened, synchronize ]
    branches: [ develop, main ]
    paths:
    - 'apps/client-ui/**'
    - '.github/workflows/deploy-frontend-preview.yml'
    - '.github/actions/check-codeowner/**'

permissions:
  contents: read
  actions: read
  pull-requests: write
  issues: write

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
  PNPM_VERSION: '10.14.0'
  # AWS environment variables
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  # Validate access and determine if deployment should proceed
  validate-access:
    name: Validate Access and Environment
    runs-on: ubuntu-latest
    # Deploy for both draft and ready PRs to enable testing during development

    outputs:
      should-deploy: ${{ steps.decision.outputs.should-deploy }}
      env-name: ${{ steps.env-name.outputs.env-name }}
      target-user: ${{ steps.codeowner-check.outputs.target-user }}
      amplify-app-name: ${{ steps.amplify-info.outputs.amplify-app-name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check code ownership
      id: codeowner-check
      uses: ./.github/actions/check-codeowner
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate environment name
      id: env-name
      run: |
        ENV_NAME="pr-${{ github.event.pull_request.number }}"
        echo "env-name=${ENV_NAME}" >> $GITHUB_OUTPUT
        echo "üåç Environment name: ${ENV_NAME}"

    - name: Generate Amplify app info
      id: amplify-info
      run: |
        AMPLIFY_APP_NAME="macro-ai-frontend-pr-${{ github.event.pull_request.number }}"
        echo "amplify-app-name=${AMPLIFY_APP_NAME}" >> $GITHUB_OUTPUT
        echo "üì± Amplify app name: ${AMPLIFY_APP_NAME}"

    - name: Make deployment decision
      id: decision
      run: |
        IS_OWNER="${{ steps.codeowner-check.outputs.is-owner }}"
        ACTOR="${{ steps.codeowner-check.outputs.target-user }}"

        if [[ "${IS_OWNER}" == "true" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Frontend preview deployment approved for code owner: ${ACTOR}"
          echo "üåç Target environment: ${{ steps.env-name.outputs.env-name }}"
          echo "üì± Amplify app: ${{ steps.amplify-info.outputs.amplify-app-name }}"
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "‚ùå Frontend preview deployment blocked: ${ACTOR} is not a code owner"
          echo "üí° Only code owners can deploy frontend preview environments"
        fi

  # Check if backend preview environment exists and get API endpoint
  check-backend-environment:
    name: Check Backend Environment
    runs-on: ubuntu-latest
    needs: [ validate-access ]
    if: needs.validate-access.outputs.should-deploy == 'true'

    permissions:
      id-token: write
      contents: read

    outputs:
      backend-exists: ${{ steps.discover.outputs.backend-found }}
      api-endpoint: ${{ steps.discover.outputs.api-endpoint }}
      stack-name: ${{ steps.discover.outputs.stack-name }}
      resolution-method: ${{ steps.discover.outputs.resolution-method }}
      fallback-used: ${{ steps.discover.outputs.fallback-used }}
      connectivity-status: ${{ steps.discover.outputs.connectivity-status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Discover backend environment
      id: discover
      uses: ./.github/actions/discover-backend
      with:
        environment: ${{ needs.validate-access.outputs.env-name }}
        pr-number: ${{ github.event.pull_request.number }}
        validate-connectivity: 'true'
        aws-region: ${{ env.AWS_REGION }}
        debug: 'false'

  # Build the React frontend
  build-frontend:
    name: Build React Frontend
    runs-on: ubuntu-latest
    needs: [ validate-access, check-backend-environment ]
    if: needs.validate-access.outputs.should-deploy == 'true'

    outputs:
      build-size: ${{ steps.build-info.outputs.build-size }}
      build-files: ${{ steps.build-info.outputs.build-files }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: |
        cd apps/client-ui
        pnpm install --frozen-lockfile

    - name: Generate environment configuration
      id: generate-env
      uses: ./.github/actions/generate-frontend-env
      with:
        environment: ${{ needs.validate-access.outputs.env-name }}
        pr-number: ${{ github.event.pull_request.number }}
        build-mode: 'preview'
        api-endpoint: ${{ needs.check-backend-environment.outputs.api-endpoint }}
        api-key: ${{ secrets.FRONTEND_API_KEY }}
        backend-stack-name: ${{ needs.check-backend-environment.outputs.stack-name }}
        resolution-method: ${{ needs.check-backend-environment.outputs.resolution-method }}
        output-file: '.env.preview'
        include-build-metadata: 'true'
        validate-variables: 'true'
        debug: 'false'

    - name: Generate Amplify configuration
      run: |
        cd apps/client-ui

        ENV_NAME="${{ needs.validate-access.outputs.env-name }}"

        echo "üîß Generating Amplify configuration for environment: ${ENV_NAME}"

        # Set environment variables for configuration generation
        export PR_NUMBER="${{ github.event.pull_request.number }}"
        export ENVIRONMENT_NAME="${ENV_NAME}"
        export BUILD_MODE="preview"
        export GITHUB_SHA="${{ github.sha }}"
        export GITHUB_REF_NAME="${{ github.ref_name }}"
        export GITHUB_PR_NUMBER="${{ github.event.pull_request.number }}"

        # Load environment variables from .env.preview
        export $(cat .env.preview | xargs)

        # Generate environment-specific Amplify configuration
        chmod +x scripts/generate-amplify-config.sh
        ./scripts/generate-amplify-config.sh \
          --environment preview \
          --pr-number "${{ github.event.pull_request.number }}" \
          --output-file amplify.yml

        # Validate generated configuration
        chmod +x scripts/validate-amplify-config.sh
        ./scripts/validate-amplify-config.sh \
          --config-file amplify.yml \
          --environment preview

        echo "‚úÖ Amplify configuration generated and validated"
        echo "üìÑ Configuration file: amplify.yml"

    - name: Build React application
      run: |
        cd apps/client-ui

        # Load preview environment variables
        export $(cat .env.preview | xargs)

        echo "üî® Building React application..."
        echo "API URL: $VITE_API_URL"
        echo "Environment: $VITE_APP_ENV"

        pnpm build

    - name: Validate build output
      id: build-info
      run: |
        cd apps/client-ui

        if [ ! -d "dist" ]; then
          echo "‚ùå Build output directory 'dist' not found"
          exit 1
        fi

        BUILD_SIZE=$(du -sh dist | cut -f1)
        BUILD_FILES=$(find dist -type f | wc -l)

        echo "build-size=${BUILD_SIZE}" >> $GITHUB_OUTPUT
        echo "build-files=${BUILD_FILES}" >> $GITHUB_OUTPUT

        echo "‚úÖ Build validation successful"
        echo "üì¶ Build size: ${BUILD_SIZE}"
        echo "üìÑ Files: ${BUILD_FILES}"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ needs.validate-access.outputs.env-name }}
        path: apps/client-ui/dist/
        retention-days: 7

  # Deploy to AWS Amplify
  deploy-frontend-preview:
    name: Deploy Frontend Preview
    runs-on: ubuntu-latest
    needs: [ validate-access, check-backend-environment, build-frontend ]
    if: needs.validate-access.outputs.should-deploy == 'true'
    environment: development

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    outputs:
      amplify-url: ${{ steps.deploy.outputs.amplify-url }}
      deployment-result: ${{ steps.deploy.outputs.deployment-result }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-${{ needs.validate-access.outputs.env-name }}
        path: apps/client-ui/dist/

    - name: Install Amplify CLI
      run: |
        npm install -g @aws-amplify/cli
        amplify --version

    - name: Deploy to Amplify
      id: deploy
      run: |
        cd apps/client-ui

        ENV_NAME="${{ needs.validate-access.outputs.env-name }}"
        AMPLIFY_APP_NAME="${{ needs.validate-access.outputs.amplify-app-name }}"

        echo "üöÄ Deploying frontend preview environment"
        echo "üì± Amplify app: ${AMPLIFY_APP_NAME}"
        echo "üåç Environment: ${ENV_NAME}"
        echo "üë§ Requested by: ${{ needs.validate-access.outputs.target-user }}"

        # Set environment variables for the script
        export AMPLIFY_APP_NAME="${AMPLIFY_APP_NAME}"
        export ENVIRONMENT_NAME="${ENV_NAME}"
        export PR_NUMBER="${{ github.event.pull_request.number }}"
        export AWS_REGION="${{ env.AWS_REGION }}"

        # Set API URL for deployment
        if [[ -n "${{ needs.check-backend-environment.outputs.api-endpoint }}" ]]; then
          export VITE_API_URL="${{ needs.check-backend-environment.outputs.api-endpoint }}api"
          echo "‚úÖ Using backend preview API: ${VITE_API_URL}"
        else
          export VITE_API_URL="https://api-development.macro-ai.com/api"
          echo "‚ö†Ô∏è Using fallback API URL: ${VITE_API_URL}"
        fi

        export VITE_API_KEY="${{ secrets.FRONTEND_API_KEY }}"
        export VITE_APP_ENV="${ENV_NAME}"

        # Run deployment script with error handling
        echo "üöÄ Starting Amplify deployment..."
        if ./scripts/deploy-amplify-preview.sh; then
          echo "deployment-result=success" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment script completed successfully"

          # Extract Amplify URL (script should output it)
          if [[ -f "amplify-deployment-url.txt" ]]; then
            AMPLIFY_URL=$(cat amplify-deployment-url.txt)
            if [[ -n "$AMPLIFY_URL" && "$AMPLIFY_URL" != "deployment-pending" ]]; then
              echo "amplify-url=${AMPLIFY_URL}" >> $GITHUB_OUTPUT
              echo "üåê Preview URL: ${AMPLIFY_URL}"
            else
              echo "amplify-url=deployment-pending" >> $GITHUB_OUTPUT
              echo "‚è≥ Deployment in progress, URL will be available shortly"
            fi
          else
            echo "amplify-url=deployment-pending" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è URL file not found, deployment may still be in progress"
          fi
        else
          echo "deployment-result=failed" >> $GITHUB_OUTPUT
          echo "‚ùå Amplify deployment script failed"

          # Try to get error details
          if [[ -f "amplify-deployment-error.txt" ]]; then
            echo "Error details:"
            cat amplify-deployment-error.txt
          fi

          exit 1
        fi

  # Comment on PR with deployment information
  comment-deployment-info:
    name: Comment Deployment Info
    runs-on: ubuntu-latest
    needs: [ validate-access, check-backend-environment, build-frontend, deploy-frontend-preview ]
    if: always() && needs.validate-access.outputs.should-deploy == 'true'

    permissions:
      pull-requests: write

    steps:
    - name: Generate deployment comment
      uses: actions/github-script@v7
      with:
        script: |
          const envName = '${{ needs.validate-access.outputs.env-name }}';
          const amplifyAppName = '${{ needs.validate-access.outputs.amplify-app-name }}';
          const deploymentResult = '${{ needs.deploy-frontend-preview.outputs.deployment-result }}';
          const amplifyUrl = '${{ needs.deploy-frontend-preview.outputs.amplify-url }}';
          const buildSize = '${{ needs.build-frontend.outputs.build-size }}';
          const buildFiles = '${{ needs.build-frontend.outputs.build-files }}';
          const backendExists = '${{ needs.check-backend-environment.outputs.backend-exists }}';
          const apiEndpoint = '${{ needs.check-backend-environment.outputs.api-endpoint }}';

          let comment = `## üé® Frontend Preview Deployment\n\n`;

          if (deploymentResult === 'success') {
            comment += `‚úÖ **Frontend preview deployed successfully!**\n\n`;
            comment += `### üì± Preview Information\n`;
            comment += `- **Environment**: \`${envName}\`\n`;
            comment += `- **Amplify App**: \`${amplifyAppName}\`\n`;
            if (amplifyUrl && amplifyUrl !== 'deployment-pending') {
              comment += `- **Preview URL**: ${amplifyUrl}\n`;
            } else {
              comment += `- **Preview URL**: ‚è≥ Deployment in progress\n`;
            }
            comment += `- **Build Size**: ${buildSize}\n`;
            comment += `- **Files**: ${buildFiles}\n\n`;
            
            comment += `### üîó Backend Integration\n`;
            if (backendExists === 'true' && apiEndpoint) {
              comment += `‚úÖ **Connected to backend preview**: \`${apiEndpoint}api\`\n\n`;
            } else {
              comment += `‚ö†Ô∏è **Using fallback API**: Backend preview not available\n\n`;
            }
            
            comment += `### üõ†Ô∏è Useful Commands\n`;
            comment += `\`\`\`bash\n`;
            comment += `# View Amplify app status\n`;
            comment += `aws amplify get-app --app-id <app-id>\n\n`;
            comment += `# View deployment logs\n`;
            comment += `aws amplify list-jobs --app-id <app-id> --branch-name main\n`;
            comment += `\`\`\`\n\n`;
          } else {
            comment += `‚ùå **Frontend preview deployment failed**\n\n`;
            comment += `Please check the [workflow logs](${context.payload.pull_request.html_url}/checks) for details.\n\n`;
          }

          comment += `---\n`;
          comment += `*This comment will be updated when the deployment status changes.*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

name: Deploy PR Preview Environment

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [develop, main]
    paths:
      - 'infrastructure/**'
      - 'apps/express-api/**'
      - '.github/workflows/deploy-preview.yml'
      - '.github/actions/check-codeowner/**'

permissions:
  contents: read
  actions: read
  pull-requests: write
  issues: write

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
  PNPM_VERSION: '10.14.0'
  # CDK environment variables
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_REGION: us-east-1

jobs:
  # Check if PR author is a code owner and from same repo
  validate-access:
    name: Validate PR Access
    runs-on: ubuntu-latest
    outputs:
      is-owner: ${{ steps.codeowner-check.outputs.is-owner }}
      target-user: ${{ steps.codeowner-check.outputs.target-user }}
      is-same-repo: ${{ steps.repo-check.outputs.is-same-repo }}
      should-deploy: ${{ steps.decision.outputs.should-deploy }}
      env-name: ${{ steps.env-name.outputs.env-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check repository ownership
        id: repo-check
        run: |
          if [[ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            echo "is-same-repo=true" >> $GITHUB_OUTPUT
            echo "‚úÖ PR from same repository: ${{ github.event.pull_request.head.repo.full_name }}"
          else
            echo "is-same-repo=false" >> $GITHUB_OUTPUT
            echo "‚ùå PR from forked repository: ${{ github.event.pull_request.head.repo.full_name }}"
          fi

      - name: Check code ownership
        id: codeowner-check
        uses: ./.github/actions/check-codeowner
        with:
          mode: 'pr'
          base-ref: ${{ github.event.pull_request.head.ref }}

      - name: Generate environment name
        id: env-name
        run: |
          ENV_NAME="pr-${{ github.event.pull_request.number }}"
          echo "env-name=${ENV_NAME}" >> $GITHUB_OUTPUT
          echo "Environment name: ${ENV_NAME}"

      - name: Make deployment decision
        id: decision
        run: |
          IS_SAME_REPO="${{ steps.repo-check.outputs.is-same-repo }}"
          IS_OWNER="${{ steps.codeowner-check.outputs.is-owner }}"

          if [[ "${IS_SAME_REPO}" == "true" && "${IS_OWNER}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Deployment approved: same-repo PR by code owner ${{ steps.codeowner-check.outputs.target-user }}"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Deployment blocked:"
            echo "  - Same repo: ${IS_SAME_REPO}"
            echo "  - Code owner: ${IS_OWNER}"
            echo "  - User: ${{ steps.codeowner-check.outputs.target-user }}"
          fi

  # Build Lambda package for deployment
  build-lambda:
    name: Build Lambda Package
    runs-on: ubuntu-latest
    needs: validate-access
    if: needs.validate-access.outputs.should-deploy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Build Lambda package
        run: |
          cd apps/express-api
          pnpm install --frozen-lockfile
          pnpm build:lambda
          pnpm bundle:lambda
          pnpm package:lambda

      - name: Upload Lambda package
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package-${{ needs.validate-access.outputs.env-name }}
          path: apps/express-api/dist/lambda.zip
          retention-days: 7

  # Deploy ephemeral PR environment
  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    needs: [validate-access, build-lambda]
    if: needs.validate-access.outputs.should-deploy == 'true'
    environment: development

    permissions:
      id-token: write
      contents: read
      pull-requests: write
      issues: write

    outputs:
      api-endpoint: ${{ steps.outputs.outputs.api-endpoint }}
      stack-name: ${{ steps.stack-info.outputs.stack-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install AWS CDK CLI globally
        run: pnpm add -g aws-cdk@2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Lambda package
        uses: actions/download-artifact@v4
        with:
          name: lambda-package-${{ needs.validate-access.outputs.env-name }}
          path: apps/express-api/dist/

      - name: Generate stack information
        id: stack-info
        run: |
          ENV_NAME="${{ needs.validate-access.outputs.env-name }}"
          # Capitalize first letter for stack name (pr-123 -> Pr-123)
          STACK_NAME="MacroAi$(echo "${ENV_NAME}" | sed 's/^./\U&/')Stack"
          echo "stack-name=${STACK_NAME}" >> $GITHUB_OUTPUT
          echo "Stack name: ${STACK_NAME}"

      - name: Deploy infrastructure
        run: |
          cd infrastructure
          pnpm install --frozen-lockfile
          pnpm build

          echo "üöÄ Deploying ephemeral environment: ${{ needs.validate-access.outputs.env-name }}"
          echo "üì¶ Stack: ${{ steps.stack-info.outputs.stack-name }}"
          echo "üë§ Requested by: ${{ needs.validate-access.outputs.target-user }}"

          # Make deploy script executable and run it
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh
        env:
          CDK_DEPLOY_ENV: ${{ needs.validate-access.outputs.env-name }}
          CDK_DEPLOY_SCALE: 'hobby'
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          NODE_ENV: 'production'

      - name: Get deployment outputs
        id: outputs
        run: |
          STACK_NAME="${{ steps.stack-info.outputs.stack-name }}"

          # Get API endpoint from CloudFormation outputs
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_NAME}" \
            --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" \
            --output text 2>/dev/null || echo "")

          if [[ -n "${API_ENDPOINT}" ]]; then
            echo "api-endpoint=${API_ENDPOINT}" >> $GITHUB_OUTPUT
            echo "‚úÖ API endpoint: ${API_ENDPOINT}"
          else
            echo "‚ö†Ô∏è Could not retrieve API endpoint"
          fi

      - name: Health check
        id: health-check
        run: |
          API_ENDPOINT="${{ steps.outputs.outputs.api-endpoint }}"

          if [[ -n "${API_ENDPOINT}" ]]; then
            echo "üîç Testing health endpoint: ${API_ENDPOINT}api/health"
            
            # Wait a moment for deployment to stabilize
            sleep 10
            
            # Test health endpoint with retries
            for i in {1..3}; do
              HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "${API_ENDPOINT}api/health" 2>/dev/null || echo "000")
              if [[ "$HEALTH_RESPONSE" == *"200" ]]; then
                echo "health-status=healthy" >> $GITHUB_OUTPUT
                echo "‚úÖ Health check passed (attempt $i)"
                break
              else
                echo "‚ö†Ô∏è Health check failed (attempt $i): $HEALTH_RESPONSE"
                if [[ $i -eq 3 ]]; then
                  echo "health-status=unhealthy" >> $GITHUB_OUTPUT
                fi
                sleep 5
              fi
            done
          else
            echo "health-status=unknown" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Cannot perform health check - no API endpoint"
          fi

  # Comment on PR with deployment information
  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [validate-access, deploy-preview]
    if: always() && needs.validate-access.outputs.should-deploy == 'true'

    permissions:
      pull-requests: write

    steps:
      - name: Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const envName = '${{ needs.validate-access.outputs.env-name }}';
            const stackName = '${{ needs.deploy-preview.outputs.stack-name }}';
            const apiEndpoint = '${{ needs.deploy-preview.outputs.api-endpoint }}';
            const healthStatus = '${{ needs.deploy-preview.outputs.health-status }}';
            const deployResult = '${{ needs.deploy-preview.result }}';

            let comment = `## üöÄ Preview Environment Deployed\n\n`;
            comment += `**Environment:** \`${envName}\`\n`;
            comment += `**Stack:** \`${stackName}\`\n`;
            comment += `**Requested by:** @${{ needs.validate-access.outputs.target-user }}\n\n`;

            if (deployResult === 'success' && apiEndpoint) {
              comment += `### üåê Endpoints\n`;
              comment += `- **API:** ${apiEndpoint}api/\n`;
              comment += `- **Health:** ${apiEndpoint}api/health\n\n`;
              
              const healthIcon = healthStatus === 'healthy' ? '‚úÖ' : '‚ö†Ô∏è';
              comment += `### ${healthIcon} Health Status\n`;
              comment += `Health check: **${healthStatus}**\n\n`;
            } else {
              comment += `### ‚ùå Deployment Failed\n`;
              comment += `The preview environment deployment encountered an error. Check the workflow logs for details.\n\n`;
            }

            comment += `### üìã Environment Details\n`;
            comment += `- **Parameter Store:** \`/macro-ai/development\` (shared)\n`;
            comment += `- **Auto-cleanup:** When PR is closed/merged\n`;
            comment += `- **Manual cleanup:** Use \`teardown-dev.yml\` workflow\n\n`;
            comment += `---\n`;
            comment += `*This preview environment uses shared development secrets and will be automatically destroyed when the PR is closed.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Handle blocked deployments (forked PRs or non-code-owners)
  explain-blocked:
    name: Explain Blocked Deployment
    runs-on: ubuntu-latest
    needs: validate-access
    if: needs.validate-access.outputs.should-deploy == 'false'

    permissions:
      pull-requests: write

    steps:
      - name: Comment on blocked PR
        uses: actions/github-script@v7
        with:
          script: |
            const isSameRepo = '${{ needs.validate-access.outputs.is-same-repo }}' === 'true';
            const isOwner = '${{ needs.validate-access.outputs.is-owner }}' === 'true';
            const targetUser = '${{ needs.validate-access.outputs.target-user }}';

            let comment = `## üö´ Preview Environment Deployment Blocked\n\n`;

            if (!isSameRepo) {
              comment += `### üîí Forked Repository\n`;
              comment += `This PR originates from a forked repository. For security reasons, automatic preview deployments are restricted to the main repository.\n\n`;
              comment += `**Options:**\n`;
              comment += `- A repository maintainer can manually deploy a preview using the \`deploy-forked-pr-preview.yml\` workflow\n`;
              comment += `- The preview will use trusted base repository code (not fork changes)\n\n`;
            }

            if (!isOwner) {
              comment += `### üë§ Code Owner Required\n`;
              comment += `User \`@${targetUser}\` is not listed as a code owner in \`.github/CODEOWNERS\`.\n\n`;
              comment += `**To enable automatic preview deployments:**\n`;
              comment += `- Add \`@${targetUser}\` to the \`.github/CODEOWNERS\` file\n`;
              comment += `- Or have a code owner create the PR\n\n`;
            }

            comment += `### üîç Current Status\n`;
            comment += `- **Same repository:** ${isSameRepo ? '‚úÖ' : '‚ùå'}\n`;
            comment += `- **Code owner:** ${isOwner ? '‚úÖ' : '‚ùå'}\n`;
            comment += `- **User:** \`@${targetUser}\`\n\n`;
            comment += `---\n`;
            comment += `*For questions about preview environments, contact a repository maintainer.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

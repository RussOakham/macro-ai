name: Deploy Production Environment

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "DEPLOY PRODUCTION" to confirm production environment deployment'
        required: true
        type: string
      additional_confirm:
        description: 'Type "CONFIRM PRODUCTION DEPLOYMENT" for additional confirmation'
        required: true
        type: string
      neon_branch:
        description: 'Neon branch to use (leave empty for main-production-branch)'
        required: false
        type: string
        default: 'main-production-branch'

permissions:
  contents: read
  id-token: write
  pull-requests: write
  issues: write

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20.19.4'
  PNPM_VERSION: '10.14.0'
  ENVIRONMENT: 'production'
  STACK_NAME: 'MacroAiProductionStack'
  # CDK environment variables
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_REGION: us-east-1

jobs:
  # Validate deployment request with maximum security
  validate-request:
    name: Validate Production Deployment Request
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.decision.outputs.should-deploy }}
      neon-branch: ${{ steps.neon-branch.outputs.branch }}
      is-owner: ${{ steps.codeowner-check.outputs.is-owner }}
      target-user: ${{ steps.codeowner-check.outputs.target-user }}

    steps:
      - name: Validate confirmation inputs
        run: |
          echo "üö® PRODUCTION ENVIRONMENT DEPLOYMENT REQUEST"
          echo "Validating triple confirmation inputs..."

          if [[ "${{ inputs.confirm }}" != "DEPLOY PRODUCTION" ]]; then
            echo "‚ùå Primary confirmation failed."
            echo "Expected: 'DEPLOY PRODUCTION'"
            echo "Got: '${{ inputs.confirm }}'"
            exit 1
          fi

          if [[ "${{ inputs.additional_confirm }}" != "CONFIRM PRODUCTION DEPLOYMENT" ]]; then
            echo "‚ùå Secondary confirmation failed."
            echo "Expected: 'CONFIRM PRODUCTION DEPLOYMENT'"
            echo "Got: '${{ inputs.additional_confirm }}'"
            exit 1
          fi

          echo "‚úÖ Both confirmations validated"

      - name: Determine Neon branch
        id: neon-branch
        run: |
          BRANCH_NAME="${{ inputs.neon_branch }}"
          if [[ -z "${BRANCH_NAME}" ]]; then
            BRANCH_NAME="main-production-branch"
          fi
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "üîÑ Using Neon branch: ${BRANCH_NAME}"

      - name: Check code ownership
        id: codeowner-check
        uses: ./.github/actions/check-codeowner
        with:
          mode: 'manual'
          base-ref: 'main'

      - name: Make deployment decision with critical warnings
        id: decision
        run: |
          IS_OWNER="${{ steps.codeowner-check.outputs.is-owner }}"
          ACTOR="${{ steps.codeowner-check.outputs.target-user }}"
          NEON_BRANCH="${{ steps.neon-branch.outputs.branch }}"

          if [[ "${IS_OWNER}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ PRODUCTION DEPLOYMENT approved for code owner: ${ACTOR}"
            echo "üìä Neon Branch: ${NEON_BRANCH}"
            echo ""
            echo "üö® CRITICAL WARNING:"
            echo "   This will deploy to the PRODUCTION environment"
            echo "   All changes will be immediately available to users"
            echo "   This affects the live macro-ai.com application"
            echo "üö® CRITICAL WARNING"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå PRODUCTION DEPLOYMENT blocked: ${ACTOR} is not a code owner"
            exit 1
          fi

  # Build Docker image for ECS
  build-production:
    name: Build Docker Image for Production
    runs-on: ubuntu-latest
    needs: [validate-request]
    if: needs.validate-request.outputs.should-deploy == 'true'
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      image-tag: ${{ steps.build.outputs.image-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: 'main'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-BuildProduction-${{ github.run_id }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install CDK CLI
        run: pnpm add -g aws-cdk@2

      - name: Build and push Docker image
        id: build
        run: |
          cd apps/express-api

          # Generate image tag
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-8)
          IMAGE_TAG="production-${TIMESTAMP}-${GITHUB_SHA_SHORT}"

          # Build and push image
          ECR_REPOSITORY_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/macro-ai-api"

          echo "üèóÔ∏è Building Docker image..."
          docker build -t ${ECR_REPOSITORY_URI}:${IMAGE_TAG} .

          echo "üì§ Pushing to ECR..."
          docker push ${ECR_REPOSITORY_URI}:${IMAGE_TAG}

          # Output values
          echo "image-uri=${ECR_REPOSITORY_URI}:${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

          echo "‚úÖ Docker image built and pushed: ${ECR_REPOSITORY_URI}:${IMAGE_TAG}"

  # Deploy production infrastructure
  deploy-production:
    name: Deploy Production Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-request, build-production]
    if: needs.validate-request.outputs.should-deploy == 'true'
    environment: production

    permissions:
      id-token: write
      contents: read
      pull-requests: write
      issues: write

    outputs:
      api-endpoint: ${{ steps.deploy.outputs.api-endpoint }}
      stack-name: ${{ steps.deploy.outputs.stack-name }}
      neon-branch: ${{ needs.validate-request.outputs.neon-branch }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: 'main'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DeployProduction-${{ github.run_id }}

      - name: Install CDK CLI
        run: pnpm add -g aws-cdk@2

      - name: Install infrastructure dependencies
        run: |
          cd infrastructure
          pnpm install --frozen-lockfile

      - name: Pre-deployment safety checks
        run: |
          echo "üõ°Ô∏è PRODUCTION DEPLOYMENT SAFETY CHECKS"
          echo "======================================"

          # Check if production stack already exists
          STACK_EXISTS=$(aws cloudformation describe-stacks \
            --stack-name "${{ env.STACK_NAME }}" \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "DOES_NOT_EXIST")

          if [[ "${STACK_EXISTS}" != "DOES_NOT_EXIST" ]]; then
            echo "‚ö†Ô∏è PRODUCTION stack already exists with status: ${STACK_EXISTS}"
            echo "This deployment will UPDATE the existing production environment"
            echo "All production data will remain intact"
          else
            echo "‚ÑπÔ∏è This is the FIRST deployment to production"
            echo "A new production environment will be created"
          fi

          echo ""
          echo "üìã PRODUCTION DEPLOYMENT SUMMARY:"
          echo "  - Environment: ${{ env.ENVIRONMENT }}"
          echo "  - Stack: ${{ env.STACK_NAME }}"
          echo "  - Image: ${{ needs.build-production.outputs.image-uri }}"
          echo "  - Neon Branch: ${{ needs.validate-request.outputs.neon-branch }}"
          echo "  - Requested by: ${{ needs.validate-request.outputs.target-user }}"
          echo "  - Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

      - name: Deploy production infrastructure
        id: deploy
        run: |
          cd infrastructure

          IMAGE_URI="${{ needs.build-production.outputs.image-uri }}"
          NEON_BRANCH="${{ needs.validate-request.outputs.neon-branch }}"

          echo "üöÄ Deploying PRODUCTION infrastructure..."
          echo "üì¶ Stack: ${{ env.STACK_NAME }}"
          echo "üê≥ Image: ${IMAGE_URI}"
          echo "üóÑÔ∏è Neon Branch: ${NEON_BRANCH}"
          echo "üë§ Requested by: ${{ needs.validate-request.outputs.target-user }}"
          echo "üìÖ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "‚ö†Ô∏è This deployment will affect the live production environment"

          # Set deployment environment variables
          export CDK_DEPLOY_ENV="${{ env.ENVIRONMENT }}"
          export AWS_REGION="${{ env.AWS_REGION }}"

          # Deploy with CDK
          cdk deploy "${{ env.STACK_NAME }}" \
            --context environment="${{ env.ENVIRONMENT }}" \
            --context imageUri="${IMAGE_URI}" \
            --context neonBranch="${NEON_BRANCH}" \
            --require-approval never \
            --outputs-file "cdk-outputs-${{ env.ENVIRONMENT }}.json"

          # Extract outputs
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name "${{ env.STACK_NAME }}" \
            --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" \
            --output text 2>/dev/null || echo "")

          echo "stack-name=${{ env.STACK_NAME }}" >> $GITHUB_OUTPUT
          echo "api-endpoint=${API_ENDPOINT}" >> $GITHUB_OUTPUT

          echo "‚úÖ PRODUCTION infrastructure deployed successfully!"

  # Extended health check and verification
  verify-production:
    name: Verify Production Deployment
    runs-on: ubuntu-latest
    needs: [validate-request, deploy-production]
    if: always() && needs.validate-request.outputs.should-deploy == 'true'

    steps:
      - name: Extended health check
        run: |
          API_ENDPOINT="${{ needs.deploy-production.outputs.api-endpoint }}"

          if [[ -z "${API_ENDPOINT}" ]]; then
            echo "‚ùå No API endpoint found in deployment outputs"
            exit 1
          fi

          echo "üîç Health checking PRODUCTION deployment..."
          echo "üåê API Endpoint: ${API_ENDPOINT}"

          # Wait longer for production service to be ready
          echo "‚è≥ Waiting for production service to be ready..."
          sleep 120

          # Perform extended health check
          MAX_RETRIES=15
          RETRY_COUNT=0

          while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            if curl -f -s "${API_ENDPOINT}/health" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"

              # Additional verification for production
              echo "üîç Performing additional production verification..."

              # Check if API returns expected response structure
              RESPONSE=$(curl -s "${API_ENDPOINT}/health" 2>/dev/null || echo "")
              if [[ -n "${RESPONSE}" ]]; then
                echo "‚úÖ API health response received"
              else
                echo "‚ö†Ô∏è API health response is empty"
              fi

              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [[ $RETRY_COUNT -eq $MAX_RETRIES ]]; then
                echo "‚ùå Health check failed after ${MAX_RETRIES} attempts"
                echo "üö® PRODUCTION DEPLOYMENT MAY BE UNHEALTHY"
                exit 1
              fi
              echo "‚è≥ Health check attempt ${RETRY_COUNT}/${MAX_RETRIES} failed, retrying in 60 seconds..."
              sleep 60
            fi
          done

          echo "üéâ PRODUCTION DEPLOYMENT VERIFICATION COMPLETE"

  # Report deployment results
  deployment-report:
    name: Production Deployment Report
    runs-on: ubuntu-latest
    needs: [validate-request, deploy-production, verify-production]
    if: always() && needs.validate-request.outputs.should-deploy == 'true'

    steps:
      - name: Generate deployment report
        run: |
          echo "## üöÄ PRODUCTION ENVIRONMENT DEPLOYMENT REPORT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** PRODUCTION" >> $GITHUB_STEP_SUMMARY
          echo "**Stack:** \`${{ env.STACK_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Requested by:** @${{ needs.validate-request.outputs.target-user }}" >> $GITHUB_STEP_SUMMARY
          echo "**Neon Branch:** ${{ needs.validate-request.outputs.neon-branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Deployment status
          DEPLOY_JOB_STATUS="${{ needs.deploy-production.result }}"
          VERIFY_JOB_STATUS="${{ needs.verify-production.result }}"

          if [[ "${DEPLOY_JOB_STATUS}" == "success" && "${VERIFY_JOB_STATUS}" == "success" ]]; then
            echo "### ‚úÖ DEPLOYMENT SUCCESSFUL" >> $GITHUB_STEP_SUMMARY
            echo "The production environment has been deployed and verified." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**API Endpoint:** ${{ needs.deploy-production.outputs.api-endpoint }}" >> $GITHUB_STEP_SUMMARY
            echo "**Health Check:** ${{ needs.deploy-production.outputs.api-endpoint }}/health" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üö® PRODUCTION IMPACT" >> $GITHUB_STEP_SUMMARY
            echo "- **macro-ai.com** is now running the new deployment" >> $GITHUB_STEP_SUMMARY
            echo "- All users have immediate access to new features" >> $GITHUB_STEP_SUMMARY
            echo "- Production data and Neon database are active" >> $GITHUB_STEP_SUMMARY
          elif [[ "${DEPLOY_JOB_STATUS}" == "success" && "${VERIFY_JOB_STATUS}" == "failure" ]]; then
            echo "### ‚ö†Ô∏è DEPLOYMENT PARTIALLY SUCCESSFUL" >> $GITHUB_STEP_SUMMARY
            echo "Infrastructure deployed but health checks failed. IMMEDIATE ATTENTION REQUIRED." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**API Endpoint:** ${{ needs.deploy-production.outputs.api-endpoint }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üö® CRITICAL ACTIONS REQUIRED" >> $GITHUB_STEP_SUMMARY
            echo "1. **Check production logs immediately**" >> $GITHUB_STEP_SUMMARY
            echo "2. **Verify API functionality manually**" >> $GITHUB_STEP_SUMMARY
            echo "3. **Consider rollback if service is unavailable**" >> $GITHUB_STEP_SUMMARY
            echo "4. **Monitor CloudWatch alarms**" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå DEPLOYMENT FAILED" >> $GITHUB_STEP_SUMMARY
            echo "The production deployment encountered critical errors." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üö® IMMEDIATE ACTION REQUIRED" >> $GITHUB_STEP_SUMMARY
            echo "- Check deployment logs for failure reasons" >> $GITHUB_STEP_SUMMARY
            echo "- Verify AWS resources are in correct state" >> $GITHUB_STEP_SUMMARY
            echo "- Consider emergency rollback procedures" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Cost Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Estimated Monthly Cost:** ¬£15-25" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Fargate:** ¬£8-15 (24/7 availability)" >> $GITHUB_STEP_SUMMARY
          echo "- **ALB:** ¬£2-3" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudWatch:** ¬£2-4" >> $GITHUB_STEP_SUMMARY
          echo "- **Secrets Manager:** ¬£0.50" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üõ°Ô∏è Production Safeguards" >> $GITHUB_STEP_SUMMARY
          echo "- **24/7 Availability:** No scheduled shutdowns" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-scaling:** Min 2, Max 10 instances" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Checks:** Extended verification period" >> $GITHUB_STEP_SUMMARY
          echo "- **Rollback Ready:** Previous deployment available" >> $GITHUB_STEP_SUMMARY

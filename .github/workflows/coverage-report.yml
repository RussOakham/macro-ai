name: Coverage Report

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.4'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        run: |
          echo "🔧 Setting up test environment variables..."

          # Set environment variables for Express API tests (needed for coverage)
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "APP_ENV=test" >> $GITHUB_ENV
          echo "SERVER_PORT=3000" >> $GITHUB_ENV
          echo "API_KEY=test-api-key-at-least-32-chars-long-for-testing-purposes" >> $GITHUB_ENV
          echo "AWS_COGNITO_REGION=us-east-1" >> $GITHUB_ENV
          echo "AWS_COGNITO_USER_POOL_ID=test-pool-id" >> $GITHUB_ENV
          echo "AWS_COGNITO_USER_POOL_CLIENT_ID=test-client-id" >> $GITHUB_ENV
          echo "AWS_COGNITO_USER_POOL_SECRET_KEY=test-secret-key-at-least-32-chars-long-for-testing" >> $GITHUB_ENV
          echo "COOKIE_ENCRYPTION_KEY=test-cookie-key-at-least-32-chars-long-for-testing" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "RELATIONAL_DATABASE_URL=postgres://test:test@localhost:5432/test_db" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=sk-test-openai-key-for-testing-purposes-only" >> $GITHUB_ENV
          echo "COOKIE_DOMAIN=localhost" >> $GITHUB_ENV
          echo "AWS_COGNITO_REFRESH_TOKEN_EXPIRY=30" >> $GITHUB_ENV
          echo "RATE_LIMIT_WINDOW_MS=900000" >> $GITHUB_ENV
          echo "RATE_LIMIT_MAX_REQUESTS=100" >> $GITHUB_ENV
          echo "AUTH_RATE_LIMIT_WINDOW_MS=3600000" >> $GITHUB_ENV
          echo "AUTH_RATE_LIMIT_MAX_REQUESTS=10" >> $GITHUB_ENV
          echo "API_RATE_LIMIT_WINDOW_MS=60000" >> $GITHUB_ENV
          echo "API_RATE_LIMIT_MAX_REQUESTS=60" >> $GITHUB_ENV

          echo "✅ Test environment configured"

      - name: Build types package
        run: pnpm --filter @repo/macro-ai-api-client build

      - name: Generate MSW handlers
        run: |
          echo "🔧 Generating MSW handlers from OpenAPI spec..."
          pnpm --filter client-ui generate:msw
          echo "✅ MSW handlers generated successfully"

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Generate coverage report
        run: pnpm test:coverage:report

      - name: Analyze coverage gaps
        run: pnpm test:coverage:analyze
        continue-on-error: true

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/express-api/coverage/lcov.info,./apps/client-ui/coverage/lcov.info,./packages/macro-ai-api-client/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read coverage summary
            const coveragePath = path.join('apps', 'express-api', 'coverage', 'coverage-summary.json');
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const total = coverage.total;
              
              const comment = `## 📊 Coverage Report
              
              | Metric | Coverage |
              |--------|----------|
              | Statements | ${total.statements}% |
              | Branches | ${total.branches}% |
              | Functions | ${total.functions}% |
              | Lines | ${total.lines}% |
              
              **Overall Coverage: ${Math.round((total.statements + total.branches + total.functions + total.lines) / 4)}%**
              
              ${total.statements < 80 ? '⚠️ Statements coverage below 80% threshold' : '✅ Statements coverage meets threshold'}
              ${total.branches < 75 ? '⚠️ Branches coverage below 75% threshold' : '✅ Branches coverage meets threshold'}
              ${total.functions < 80 ? '⚠️ Functions coverage below 80% threshold' : '✅ Functions coverage meets threshold'}
              ${total.lines < 80 ? '⚠️ Lines coverage below 80% threshold' : '✅ Lines coverage meets threshold'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Archive coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            apps/*/coverage/
            packages/*/coverage/
          retention-days: 30

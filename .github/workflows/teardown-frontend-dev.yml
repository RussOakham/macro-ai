name: Manual Teardown - Frontend Development Environment

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number for the frontend development environment to destroy (e.g., 123 for pr-123)'
        required: true
        type: string
      confirm:
        description: 'Type "I UNDERSTAND" to confirm frontend environment destruction'
        required: true
        type: string

permissions:
  contents: read

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
  PNPM_VERSION: '10.14.0'
  # AWS environment variables
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  # Validate the teardown request
  validate-request:
    name: Validate Teardown Request
    runs-on: ubuntu-latest

    outputs:
      should-destroy: ${{ steps.decision.outputs.should-destroy }}
      env-name: ${{ steps.env-name.outputs.env-name }}
      target-user: ${{ steps.codeowner-check.outputs.target-user }}
      amplify-app-name: ${{ steps.amplify-info.outputs.amplify-app-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate PR number format
        id: validate-pr
        run: |
          PR_NUMBER="${{ github.event.inputs.pr_number }}"

          if [[ ! "$PR_NUMBER" =~ ^[0-9]+$ ]]; then
            echo "‚ùå Invalid PR number format: $PR_NUMBER"
            echo "PR number must be a positive integer (e.g., 123)"
            exit 1
          fi

          echo "‚úÖ PR number format valid: $PR_NUMBER"

      - name: Validate confirmation input
        id: validate-confirm
        run: |
          CONFIRM_INPUT="${{ github.event.inputs.confirm }}"

          if [[ "$CONFIRM_INPUT" != "I UNDERSTAND" ]]; then
            echo "‚ùå Confirmation failed. Expected: 'I UNDERSTAND', Got: '$CONFIRM_INPUT'"
            echo "This is a safety measure to prevent accidental environment destruction."
            exit 1
          fi

          echo "‚úÖ Confirmation validated"

      - name: Check code ownership
        id: codeowner-check
        uses: ./.github/actions/check-codeowner
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate environment name
        id: env-name
        run: |
          ENV_NAME="pr-${{ github.event.inputs.pr_number }}"
          echo "env-name=${ENV_NAME}" >> $GITHUB_OUTPUT
          echo "üåç Environment name: ${ENV_NAME}"

      - name: Generate Amplify app info
        id: amplify-info
        run: |
          AMPLIFY_APP_NAME="macro-ai-frontend-pr-${{ github.event.inputs.pr_number }}"
          echo "amplify-app-name=${AMPLIFY_APP_NAME}" >> $GITHUB_OUTPUT
          echo "üì± Amplify app name: ${AMPLIFY_APP_NAME}"

      - name: Make destruction decision
        id: decision
        run: |
          IS_OWNER="${{ steps.codeowner-check.outputs.is-owner }}"
          ACTOR="${{ steps.codeowner-check.outputs.target-user }}"

          if [[ "${IS_OWNER}" == "true" ]]; then
            echo "should-destroy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Manual frontend teardown approved for code owner: ${ACTOR}"
            echo "üóëÔ∏è Target environment: ${{ steps.env-name.outputs.env-name }}"
            echo "üì± Target Amplify app: ${{ steps.amplify-info.outputs.amplify-app-name }}"
          else
            echo "should-destroy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Manual frontend teardown blocked: ${ACTOR} is not a code owner"
            exit 1
          fi

  # Check if the Amplify app exists
  check-amplify-app:
    name: Check Amplify App
    runs-on: ubuntu-latest
    needs: [validate-request]
    if: needs.validate-request.outputs.should-destroy == 'true'

    permissions:
      id-token: write
      contents: read

    outputs:
      app-exists: ${{ steps.check-app.outputs.app-exists }}
      app-id: ${{ steps.check-app.outputs.app-id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check Amplify app existence
        id: check-app
        run: |
          AMPLIFY_APP_NAME="${{ needs.validate-request.outputs.amplify-app-name }}"

          echo "üîç Checking for Amplify app: ${AMPLIFY_APP_NAME}"

          # Check if Amplify app exists
          APP_INFO=$(aws amplify list-apps \
            --query "apps[?name=='${AMPLIFY_APP_NAME}'].{appId:appId,name:name,status:status}" \
            --output json 2>/dev/null || echo "[]")

          if [[ "$APP_INFO" != "[]" ]] && [[ -n "$APP_INFO" ]]; then
            APP_ID=$(echo "$APP_INFO" | jq -r '.[0].appId' 2>/dev/null || echo "")
            APP_STATUS=$(echo "$APP_INFO" | jq -r '.[0].status' 2>/dev/null || echo "")
            
            if [[ -n "$APP_ID" && "$APP_ID" != "null" ]]; then
              echo "app-exists=true" >> $GITHUB_OUTPUT
              echo "app-id=${APP_ID}" >> $GITHUB_OUTPUT
              echo "‚úÖ Amplify app found: ${APP_ID} (status: ${APP_STATUS})"
            else
              echo "app-exists=false" >> $GITHUB_OUTPUT
              echo "app-id=" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è Amplify app data found but could not extract app ID"
            fi
          else
            echo "app-exists=false" >> $GITHUB_OUTPUT
            echo "app-id=" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Amplify app not found"
            echo "This could mean:"
            echo "  - The frontend preview was never deployed"
            echo "  - The app was already deleted"
            echo "  - The PR number is incorrect"
          fi

  # Destroy the frontend development environment
  destroy-frontend-environment:
    name: Destroy Frontend Environment
    runs-on: ubuntu-latest
    needs: [validate-request, check-amplify-app]
    if: needs.validate-request.outputs.should-destroy == 'true' && needs.check-amplify-app.outputs.app-exists == 'true'

    permissions:
      id-token: write
      contents: read

    outputs:
      destroy-result: ${{ steps.destroy.outputs.destroy-result }}
      verification-result: ${{ steps.verify.outputs.verification-result }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Amplify CLI
        run: |
          npm install -g @aws-amplify/cli
          amplify --version

      - name: Destroy frontend infrastructure
        id: destroy
        run: |
          cd apps/client-ui

          APP_ID="${{ needs.check-amplify-app.outputs.app-id }}"
          ENV_NAME="${{ needs.validate-request.outputs.env-name }}"
          AMPLIFY_APP_NAME="${{ needs.validate-request.outputs.amplify-app-name }}"

          echo "üóëÔ∏è MANUAL TEARDOWN: Destroying frontend development environment"
          echo "üì± Amplify app: ${AMPLIFY_APP_NAME}"
          echo "üÜî App ID: ${APP_ID}"
          echo "üåç Environment: ${ENV_NAME}"
          echo "üë§ Requested by: ${{ needs.validate-request.outputs.target-user }}"
          echo "üìÖ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "‚ö†Ô∏è  This action will permanently destroy the frontend preview environment"

          # Make destroy script executable
          chmod +x scripts/destroy-amplify-preview.sh

          # Set environment variables for the script
          export AMPLIFY_APP_ID="${APP_ID}"
          export AMPLIFY_APP_NAME="${AMPLIFY_APP_NAME}"
          export ENVIRONMENT_NAME="${ENV_NAME}"
          export PR_NUMBER="${{ github.event.inputs.pr_number }}"
          export AWS_REGION="${{ env.AWS_REGION }}"

          # Attempt to destroy the app with retries
          DESTROY_SUCCESS=false
          for attempt in {1..3}; do
            echo "üîÑ Destruction attempt ${attempt}/3..."
            
            if ./scripts/destroy-amplify-preview.sh; then
              DESTROY_SUCCESS=true
              echo "‚úÖ Amplify app destroyed successfully"
              break
            else
              echo "‚ùå Destruction attempt ${attempt} failed"
              if [[ ${attempt} -lt 3 ]]; then
                echo "‚è≥ Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done

          if [[ "${DESTROY_SUCCESS}" == "true" ]]; then
            echo "destroy-result=success" >> $GITHUB_OUTPUT
          else
            echo "destroy-result=failed" >> $GITHUB_OUTPUT
            echo "‚ùå All destruction attempts failed"
            exit 1
          fi

      - name: Verify app deletion
        id: verify
        run: |
          APP_ID="${{ needs.check-amplify-app.outputs.app-id }}"

          echo "üîç Verifying app deletion..."

          # Wait a moment for AWS to process the deletion
          sleep 15

          # Check if app still exists
          APP_STATUS=$(aws amplify get-app \
            --app-id "${APP_ID}" \
            --query 'app.status' \
            --output text 2>/dev/null || echo "DOES_NOT_EXIST")

          if [[ "${APP_STATUS}" == "DOES_NOT_EXIST" ]]; then
            echo "verification-result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ App deletion verified - frontend environment fully cleaned up"
          else
            echo "verification-result=partial" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è App still exists with status: ${APP_STATUS}"
            echo "This may be normal if deletion is still in progress"
          fi

  # Generate manual teardown report
  generate-manual-teardown-report:
    name: Generate Manual Teardown Report
    runs-on: ubuntu-latest
    needs: [validate-request, check-amplify-app, destroy-frontend-environment]
    if: always() && needs.validate-request.outputs.should-destroy == 'true'

    steps:
      - name: Generate teardown report
        run: |
          echo "## üóëÔ∏è Manual Frontend Environment Teardown Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`${{ needs.validate-request.outputs.env-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Amplify App:** \`${{ needs.validate-request.outputs.amplify-app-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Requested by:** @${{ needs.validate-request.outputs.target-user }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          APP_EXISTS="${{ needs.check-amplify-app.outputs.app-exists }}"
          DESTROY_RESULT="${{ needs.destroy-frontend-environment.outputs.destroy-result }}"
          VERIFICATION_RESULT="${{ needs.destroy-frontend-environment.outputs.verification-result }}"

          if [[ "${APP_EXISTS}" == "false" ]]; then
            echo "**Status:** ‚ÑπÔ∏è No action taken - Amplify app was not found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Possible reasons:**" >> $GITHUB_STEP_SUMMARY
            echo "- Frontend preview was never deployed for this PR" >> $GITHUB_STEP_SUMMARY
            echo "- App was already manually deleted" >> $GITHUB_STEP_SUMMARY
            echo "- Incorrect PR number provided" >> $GITHUB_STEP_SUMMARY
          elif [[ "${DESTROY_RESULT}" == "success" ]]; then
            echo "**Status:** ‚úÖ Frontend development environment destroyed successfully" >> $GITHUB_STEP_SUMMARY
            if [[ "${VERIFICATION_RESULT}" == "success" ]]; then
              echo "**Verification:** ‚úÖ Deletion confirmed" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Verification:** ‚ö†Ô∏è Deletion in progress" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Status:** ‚ùå Frontend environment teardown failed" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:** Manual cleanup may be needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Manual cleanup commands:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "aws amplify delete-app --app-id ${{ needs.check-amplify-app.outputs.app-id }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This report was generated by manual teardown workflow.*" >> $GITHUB_STEP_SUMMARY

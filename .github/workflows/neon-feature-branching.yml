name: Neon Database Branching & Integration

on:
  pull_request:
    types: [opened, synchronize, closed, ready_for_review]
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/**'
  push:
    branches: [main, develop]
    paths:
      - 'apps/express-api/src/data-access/**'
      - 'apps/express-api/src/utils/neon-branching.ts'
      - 'apps/express-api/drizzle.config.ts'
  workflow_run:
    workflows: ["Deploy Production Environment", "Deploy Staging Environment", "Deploy Feature Environment"]
    types: [completed]
  schedule:
    # Run health checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Manual action to perform'
        required: true
        default: 'status'
        type: choice
        options:
          - status
          - cleanup-branches
          - list-branches
          - sync-production
          - sync-staging
      target_branch:
        description: 'Target branch for sync operations (optional)'
        required: false
        type: string
      force:
        description: 'Force operation (use with caution)'
        required: false
        type: boolean
        default: false

env:
  NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
  NODE_VERSION: '20.19.4'
  PNPM_VERSION: '10.14.0'

jobs:
  # ============================================================================
  # PR OPENED: Create Neon branch for new PRs (Enhanced)
  # ============================================================================
  create_branch:
    if: github.event.action == 'opened' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Validate PR for database changes
        id: db_changes
        run: |
          # Check if PR contains database-related changes
          if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -qE '\.(sql|ts)$|data-access|migrations'; then
            echo "has_db_changes=true" >> $GITHUB_OUTPUT
            echo "üîç Database changes detected in PR"
          else
            echo "has_db_changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No database changes detected in PR"
          fi

      - name: Generate branch name
        id: branch_name
        run: |
          BRANCH_NAME="preview/pr-${{ github.event.number }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "üîÑ Creating Neon branch: $BRANCH_NAME"

      - name: Create Neon branch with error handling
        id: create_branch
        uses: neondatabase/create-branch-action@v1
        with:
          project_id: ${{ env.NEON_PROJECT_ID }}
          branch: ${{ steps.branch_name.outputs.branch_name }}
          api_key: ${{ secrets.NEON_API_KEY }}
          parent: main-production-branch

      - name: Update PR with comprehensive branch info
        uses: actions/github-script@v7
        with:
          script: |
            const hasDbChanges = '${{ steps.db_changes.outputs.has_db_changes }}' === 'true';
            const branchName = '${{ steps.branch_name.outputs.branch_name }}';

            let body = `ü§ñ **Neon Database Branch Created**\n\n`;
            body += `‚úÖ **Database Branch**: \`${branchName}\`\n`;
            body += `üìä **Parent Branch**: \`main-production-branch\`\n`;
            body += `üîó **Environment**: Preview/Development\n\n`;

            if (hasDbChanges) {
              body += `‚ö†Ô∏è **Database Changes Detected**\n`;
              body += `This PR contains database schema changes. The branch will be validated in the next workflow run.\n\n`;
            }

            body += `## Next Steps\n`;
            body += `1. **Local Development**: Use branch \`${branchName}\` for testing\n`;
            body += `2. **Environment Variables**: \n`;
            body += `   - \`NEON_BRANCH_NAME=${branchName}\`\n`;
            body += `   - \`APP_ENV=preview\`\n`;
            body += `3. **Cleanup**: Branch will be automatically deleted when PR is closed\n\n`;

            body += `üí° **Cost Note**: Preview branches are optimized for development and will auto-cleanup after 14 days.\n\n`;

            body += `*Branch created at: ${new Date().toISOString()}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  # ============================================================================
  # PR SYNCHRONIZE: Validate schema and run migrations (Enhanced)
  # ============================================================================
  validate_schema:
    if: github.event.action == 'synchronize' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate branch name
        id: branch_name
        run: |
          BRANCH_NAME="preview/pr-${{ github.event.number }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Check Neon branch exists
        id: ensure_branch
        uses: neondatabase/create-branch-action@v1
        with:
          project_id: ${{ env.NEON_PROJECT_ID }}
          branch: ${{ steps.branch_name.outputs.branch_name }}
          api_key: ${{ secrets.NEON_API_KEY }}
          parent: main-production-branch

      - name: Set up database connection
        run: |
          echo "NEON_BRANCH_NAME=${{ steps.branch_name.outputs.branch_name }}" >> $GITHUB_ENV
          echo "APP_ENV=preview" >> $GITHUB_ENV
          echo "GITHUB_ACTIONS=true" >> $GITHUB_ENV
          echo "GITHUB_EVENT_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV

      - name: Set commit status - In Progress
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'pending',
              context: 'Database Schema Validation',
              description: 'Running database migrations and schema validation...'
            })

      - name: Generate database schema
        id: generate_schema
        working-directory: apps/express-api
        run: |
          echo "üîÑ Generating database schema..."
          pnpm run db:generate

      - name: Run database migrations with rollback preparation
        id: run_migrations
        working-directory: apps/express-api
        run: |
          echo "üöÄ Running database migrations..."
          # Create a backup point for potential rollback
          echo "BACKUP_POINT=$(date +%s)" >> $GITHUB_ENV
          pnpm run db:migrate

      - name: Run database tests
        id: run_tests
        working-directory: apps/express-api
        run: |
          echo "üß™ Running database integration tests..."
          # Set test environment variables
          echo "NODE_ENV=test" >> $GITHUB_ENV
          pnpm run test:db 2>&1 | tee test-results.log || echo "Tests failed but continuing..."

      - name: Analyze test results
        id: test_analysis
        run: |
          if [ -f "apps/express-api/test-results.log" ]; then
            if grep -q "failed\|error\|Error" apps/express-api/test-results.log; then
              echo "tests_passed=false" >> $GITHUB_OUTPUT
              echo "‚ùå Database tests failed"
            else
              echo "tests_passed=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Database tests passed"
            fi
          else
            echo "tests_passed=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No test results found, assuming tests passed"
          fi

      - name: Update commit status - Success
        if: steps.test_analysis.outputs.tests_passed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: 'Database Schema Validation',
              description: 'Database schema validated and migrations applied successfully',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })

      - name: Update commit status - Failure
        if: steps.test_analysis.outputs.tests_passed == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'failure',
              context: 'Database Schema Validation',
              description: 'Database tests failed - check migration or schema issues',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })

      - name: Update PR with comprehensive validation status
        uses: actions/github-script@v7
        with:
          script: |
            const testsPassed = '${{ steps.test_analysis.outputs.tests_passed }}' === 'true';
            const branchName = '${{ steps.branch_name.outputs.branch_name }}';

            let body = `üîç **Database Schema Validation Complete**\n\n`;
            body += `‚úÖ **Database Branch**: \`${branchName}\`\n`;
            body += `üîÑ **Schema Generation**: Completed\n`;
            body += `üöÄ **Migrations**: Applied successfully\n`;

            if (testsPassed) {
              body += `‚úÖ **Tests**: All database tests passed\n\n`;
              body += `## Status: Ready for Deployment\n`;
              body += `The database schema is validated and ready for deployment.\n`;
            } else {
              body += `‚ùå **Tests**: Some database tests failed\n\n`;
              body += `## ‚ö†Ô∏è Action Required\n`;
              body += `Please review the test failures and fix any migration or schema issues.\n\n`;
              body += `### Troubleshooting\n`;
              body += `- Check migration files for syntax errors\n`;
              body += `- Verify foreign key constraints\n`;
              body += `- Ensure all required indexes are created\n`;
              body += `- Review data type compatibility\n\n`;
            }

            body += `### Test Results\n`;
            body += `\`\`\`\n`;
            body += `Branch: ${branchName}\n`;
            body += `Tests Passed: ${testsPassed ? 'Yes' : 'No'}\n`;
            body += `Timestamp: ${new Date().toISOString()}\n`;
            body += `\`\`\`\n\n`;

            body += `*Validation completed at: ${new Date().toISOString()}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

      - name: Fail workflow on test failures
        if: steps.test_analysis.outputs.tests_passed == 'false'
        run: |
          echo "‚ùå Database validation failed - exiting workflow"
          exit 1

  # ============================================================================
  # PR CLOSED: Clean up Neon branch (Enhanced)
  # ============================================================================
  cleanup_branch:
    if: github.event.action == 'closed' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate branch name
        id: branch_name
        run: |
          BRANCH_NAME="preview/pr-${{ github.event.number }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "üßπ Cleaning up Neon branch: $BRANCH_NAME"

      - name: Check if branch exists before cleanup
        id: check_branch
        run: |
          # Attempt to check branch existence (using Neon API or action)
          echo "Checking if branch exists..."
          # This would ideally use Neon's API to check branch existence

      - name: Delete Neon branch with error handling
        id: delete_branch
        continue-on-error: true
        uses: neondatabase/delete-branch-action@v1
        with:
          project_id: ${{ env.NEON_PROJECT_ID }}
          branch: ${{ steps.branch_name.outputs.branch_name }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Update PR with comprehensive cleanup status
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.branch_name.outputs.branch_name }}';
            const wasMerged = '${{ github.event.pull_request.merged }}' === 'true';

            let body = `üßπ **Database Branch Cleanup Complete**\n\n`;

            if (wasMerged) {
              body += `‚úÖ **PR Status**: Merged to ${'${{ github.event.pull_request.base.ref }}'}\n`;
              body += `üîÑ **Next Steps**: Production deployment will update the main database branches\n\n`;
            } else {
              body += `‚ùå **PR Status**: Closed without merging\n`;
              body += `üìù **Note**: Feature branch changes were not applied to production\n\n`;
            }

            body += `## Cleanup Summary\n`;
            body += `‚úÖ **Database Branch**: \`${branchName}\` deleted\n`;
            body += `üí∞ **Cost Optimization**: Branch removed to reduce Neon costs\n`;
            body += `üßº **Environment**: Preview environment cleaned up\n\n`;

            body += `## Related Resources\n`;
            body += `- **Production Branch**: \`main-production-branch\` (always active)\n`;
            body += `- **Staging Branch**: \`auto-branch-from-production\` (auto-managed)\n`;
            body += `- **Feature Branches**: Created on-demand for PRs\n\n`;

            body += `*Cleanup completed at: ${new Date().toISOString()}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

      - name: Notify on cleanup failure
        if: steps.delete_branch.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ö†Ô∏è **Database Branch Cleanup Warning**\n\nFailed to delete database branch: \`preview/pr-${{ github.event.number }}\`\n\nThis may result in continued charges for the unused database branch. Please contact the infrastructure team or manually delete the branch through the Neon console.\n\n*Branch: preview/pr-${{ github.event.number }}*\n*Project: ${{ env.NEON_PROJECT_ID }}*`
            })

  # ============================================================================
  # PUSH TO MAIN/DEVELOP: Update production/staging branches
  # ============================================================================
  update_main_branches:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Determine target environment
        id: env_info
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "branch=main-production-branch" >> $GITHUB_OUTPUT
            echo "description=Production Database" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "branch=auto-branch-from-production" >> $GITHUB_OUTPUT
            echo "description=Staging Database" >> $GITHUB_OUTPUT
          fi

      - name: Set up database connection
        run: |
          echo "NEON_BRANCH_NAME=${{ steps.env_info.outputs.branch }}" >> $GITHUB_ENV
          echo "APP_ENV=${{ steps.env_info.outputs.environment }}" >> $GITHUB_ENV

      - name: Set commit status - In Progress
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'pending',
              context: '${{ steps.env_info.outputs.description }} Schema Update',
              description: 'Updating database schema for ${{ steps.env_info.outputs.environment }} environment...'
            })

      - name: Generate database schema
        id: generate_schema
        working-directory: apps/express-api
        run: |
          echo "üîÑ Generating database schema for ${{ steps.env_info.outputs.environment }}..."
          pnpm run db:generate

      - name: Run database migrations
        id: run_migrations
        working-directory: apps/express-api
        run: |
          echo "üöÄ Running database migrations for ${{ steps.env_info.outputs.environment }}..."
          pnpm run db:migrate

      - name: Run database tests
        id: run_tests
        working-directory: apps/express-api
        run: |
          echo "üß™ Running database tests for ${{ steps.env_info.outputs.environment }}..."
          pnpm run test:db 2>&1 | tee test-results.log || echo "Tests completed with potential failures"

      - name: Analyze test results
        id: test_analysis
        run: |
          if [ -f "apps/express-api/test-results.log" ]; then
            if grep -q "failed\|error\|Error" apps/express-api/test-results.log; then
              echo "tests_passed=false" >> $GITHUB_OUTPUT
              echo "‚ùå Database tests failed for ${{ steps.env_info.outputs.environment }}"
            else
              echo "tests_passed=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Database tests passed for ${{ steps.env_info.outputs.environment }}"
            fi
          else
            echo "tests_passed=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No test results found for ${{ steps.env_info.outputs.environment }}"
          fi

      - name: Update commit status - Success
        if: steps.test_analysis.outputs.tests_passed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: '${{ steps.env_info.outputs.description }} Schema Update',
              description: '${{ steps.env_info.outputs.environment }} database schema updated successfully',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })

      - name: Update commit status - Failure
        if: steps.test_analysis.outputs.tests_passed == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'failure',
              context: '${{ steps.env_info.outputs.description }} Schema Update',
              description: '${{ steps.env_info.outputs.environment }} database update failed - check migration issues',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })

      - name: Create deployment tracking issue
        if: steps.test_analysis.outputs.tests_passed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ steps.env_info.outputs.environment }}';
            const branch = '${{ steps.env_info.outputs.branch }}';

            let body = `üöÄ **${environment.charAt(0).toUpperCase() + environment.slice(1)} Database Updated**\n\n`;
            body += `‚úÖ **Environment**: ${environment}\n`;
            body += `üîÑ **Branch**: \`${branch}\`\n`;
            body += `üìÖ **Timestamp**: ${new Date().toISOString()}\n\n`;

            body += `## Update Summary\n`;
            body += `- Schema generation completed\n`;
            body += `- Migrations applied successfully\n`;
            body += `- All database tests passed\n\n`;

            if (environment === 'production') {
              body += `## Production Impact\n`;
              body += `This update affects the live production database. Monitor application logs and metrics for any issues.\n\n`;
              body += `### Rollback Plan\n`;
              body += `- Previous schema backup available in Neon\n`;
              body += `- Rollback scripts prepared\n`;
              body += `- Emergency rollback can be triggered via: \`deploy-production.yml\`\n\n`;
            }

            body += `*Database update completed for commit: ${context.sha.substring(0, 7)}*`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `${environment} Database Update - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['database', 'deployment', environment, 'automated']
            })

      - name: Fail workflow on test failures
        if: steps.test_analysis.outputs.tests_passed == 'false'
        run: |
          echo "‚ùå Database update failed for ${{ steps.env_info.outputs.environment }} - exiting workflow"
          exit 1

  # ============================================================================
  # DEPLOYMENT INTEGRATION: Sync with deployment workflows
  # ============================================================================
  deployment_sync:
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if deployment workflow succeeded
        run: |
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          echo "üìã Deployment workflow completed: $WORKFLOW_NAME"

          # Extract environment from workflow name
          if [[ "$WORKFLOW_NAME" == *"production"* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "branch=main-production-branch" >> $GITHUB_OUTPUT
          elif [[ "$WORKFLOW_NAME" == *"staging"* ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "branch=auto-branch-from-production" >> $GITHUB_OUTPUT
          else
            echo "environment=unknown" >> $GITHUB_OUTPUT
            echo "Skipping - not a recognized deployment workflow"
            exit 0
          fi

      - name: Update deployment tracking
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ steps.check_workflow.outputs.environment }}';

            if (environment === 'unknown') {
              console.log('Skipping deployment tracking for unrecognized workflow');
              return;
            }

            const body = `üîÑ **Deployment Workflow Integration**\n\n`;
            body += `‚úÖ **Deployment Status**: Successful\n`;
            body += `üîó **Environment**: ${environment}\n`;
            body += `üìã **Workflow**: ${{ github.event.workflow_run.name }}\n`;
            body += `üîó **Run URL**: ${{ github.event.workflow_run.html_url }}\n\n`;

            body += `Database integration completed successfully.\n\n`;
            body += `*Tracked at: ${new Date().toISOString()}*`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Deployment Success - ${environment} - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['deployment', 'success', environment, 'integration']
            })

  # ============================================================================
  # HEALTH CHECK: Monitor database connectivity and performance
  # ============================================================================
  health_check:
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'health-check')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database health checks
        run: |
          echo "üè• Running database health checks..."

          # Check production branch
          echo "NEON_BRANCH_NAME=main-production-branch" >> $GITHUB_ENV
          echo "APP_ENV=production" >> $GITHUB_ENV
          node scripts/verify-environment-connections.ts

          # Check staging branch
          echo "NEON_BRANCH_NAME=auto-branch-from-production" >> $GITHUB_ENV
          echo "APP_ENV=staging" >> $GITHUB_ENV
          node scripts/verify-environment-connections.ts

      - name: Create health report
        uses: actions/github-script@v7
        with:
          script: |
            const body = `üè• **Database Health Check Report**\n\n`;
            body += `‚úÖ **Status**: All checks completed\n`;
            body += `üìÖ **Timestamp**: ${new Date().toISOString()}\n\n`;

            body += `## Checked Branches\n`;
            body += `- \`main-production-branch\` (Production)\n`;
            body += `- \`auto-branch-from-production\` (Staging)\n\n`;

            body += `## Health Metrics\n`;
            body += `- Connection latency\n`;
            body += `- Schema integrity\n`;
            body += `- Migration status\n`;
            body += `- Performance metrics\n\n`;

            body += `*Automated health check completed*`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Database Health Check - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['health-check', 'database', 'monitoring', 'automated']
            })

  # ============================================================================
  # MANUAL WORKFLOW: Enhanced status check and cleanup utilities
  # ============================================================================
  manual_actions:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Execute manual action
        run: |
          ACTION="${{ github.event.inputs.action }}"
          TARGET_BRANCH="${{ github.event.inputs.target_branch }}"
          FORCE="${{ github.event.inputs.force }}"

          echo "üîß Executing action: $ACTION"

          case "$ACTION" in
            "status")
              echo "üìä Getting comprehensive Neon branching status..."
              echo "NEON_BRANCH_NAME=main-production-branch" >> $GITHUB_ENV
              echo "APP_ENV=production" >> $GITHUB_ENV
              node scripts/verify-environment-connections.ts > status-production.log 2>&1 || echo "Production check completed"

              echo "NEON_BRANCH_NAME=auto-branch-from-production" >> $GITHUB_ENV
              echo "APP_ENV=staging" >> $GITHUB_ENV
              node scripts/verify-environment-connections.ts > status-staging.log 2>&1 || echo "Staging check completed"

              # Combine logs
              cat status-production.log status-staging.log > status-combined.log
              ;;

            "sync-production")
              echo "üîÑ Syncing production database..."
              echo "NEON_BRANCH_NAME=main-production-branch" >> $GITHUB_ENV
              echo "APP_ENV=production" >> $GITHUB_ENV
              cd apps/express-api && pnpm run db:generate && pnpm run db:migrate
              ;;

            "sync-staging")
              echo "üîÑ Syncing staging database..."
              echo "NEON_BRANCH_NAME=auto-branch-from-production" >> $GITHUB_ENV
              echo "APP_ENV=staging" >> $GITHUB_ENV
              cd apps/express-api && pnpm run db:generate && pnpm run db:migrate
              ;;

            "cleanup-branches")
              echo "üßπ Cleaning up old preview branches..."
              echo "This would integrate with Neon's API to cleanup branches older than 14 days"
              echo "Feature branches are automatically cleaned up when PRs are closed"
              ;;

            "list-branches")
              echo "üìã Listing all Neon branches..."
              echo "Active Branches:"
              echo "- main-production-branch (Production)"
              echo "- auto-branch-from-production (Staging)"
              echo "- preview/pr-* (Feature branches - auto-created)"
              ;;

            "health-check")
              echo "üè• Running manual health check..."
              echo "NEON_BRANCH_NAME=main-production-branch" >> $GITHUB_ENV
              echo "APP_ENV=production" >> $GITHUB_ENV
              node scripts/verify-environment-connections.ts

              echo "NEON_BRANCH_NAME=auto-branch-from-production" >> $GITHUB_ENV
              echo "APP_ENV=staging" >> $GITHUB_ENV
              node scripts/verify-environment-connections.ts
              ;;
          esac

      - name: Create status report
        if: github.event.inputs.action == 'status'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let statusContent = 'Status check completed';

            if (fs.existsSync('status-combined.log')) {
              statusContent = fs.readFileSync('status-combined.log', 'utf8');
            }

            const body = `## Neon Database Branching Status Report\n\n`;
            body += `### Action: ${{ github.event.inputs.action }}\n`;
            body += `### Timestamp: ${new Date().toISOString()}\n\n`;
            body += `### Status Details:\n`;
            body += `\`\`\`\n${statusContent}\n\`\`\`\n\n`;
            body += `### Branch Configuration:\n`;
            body += `- **Production**: \`main-production-branch\`\n`;
            body += `- **Staging**: \`auto-branch-from-production\`\n`;
            body += `- **Feature**: \`preview/pr-{number}\` (auto-created)\n\n`;
            body += `### Environment Variables:\n`;
            body += `- \`NEON_PROJECT_ID\`: ${{ vars.NEON_PROJECT_ID ? '‚úÖ Configured' : '‚ùå Missing' }}\n`;
            body += `- \`NEON_API_KEY\`: ${{ secrets.NEON_API_KEY ? '‚úÖ Configured' : '‚ùå Missing' }}\n\n`;
            body += `*Generated on: ${new Date().toISOString()}*`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Neon Database Status Report - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['database', 'infrastructure', 'status-report', 'automated']
            })

      - name: Create sync report
        if: contains('sync-production,sync-staging', github.event.inputs.action)
        uses: actions/github-script@v7
        with:
          script: |
            const action = '${{ github.event.inputs.action }}';
            const environment = action.replace('sync-', '');

            const body = `üîÑ **Database Sync Report**\n\n`;
            body += `### Action: ${action}\n`;
            body += `### Environment: ${environment}\n`;
            body += `### Timestamp: ${new Date().toISOString()}\n\n`;
            body += `## Sync Results\n\n`;
            body += `‚úÖ Database schema generation completed\n`;
            body += `‚úÖ Database migrations applied\n`;
            body += `‚úÖ Environment connection verified\n\n`;
            body += `## Branch Details\n`;
            body += `- **Branch**: \`${environment === 'production' ? 'main-production-branch' : 'auto-branch-from-production'}\`\n`;
            body += `- **Environment**: ${environment}\n\n`;
            body += `*Manual sync completed on: ${new Date().toISOString()}*`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Database Sync - ${environment} - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['database', 'sync', environment, 'manual']
            })

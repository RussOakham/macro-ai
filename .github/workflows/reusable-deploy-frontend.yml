---
name: Reusable Frontend Deployment

permissions:
  contents: read
  id-token: write

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'Environment name (e.g., pr-123, staging, production)'
        required: true
        type: string
      deployment-type:
        description: 'Deployment type (preview, staging, production)'
        required: true
        type: string
      pr-number:
        description: 'PR number (for preview environments)'
        required: false
        type: string
        default: ''
      branch-name:
        description: 'Branch name'
        required: false
        type: string
        default: ''
      backend-url:
        description: 'Backend API URL for frontend configuration'
        required: true
        type: string
      custom-domain-name:
        description: 'Custom domain name (optional)'
        required: false
        type: string
        default: ''
      hosted-zone-id:
        description: 'Hosted zone ID for custom domain (optional)'
        required: false
        type: string
        default: ''
      should-deploy:
        description: 'Whether to actually deploy (for conditional deployment)'
        required: false
        type: boolean
        default: true
    secrets:
      AWS_ACCOUNT_ID:
        required: true
      AWS_ROLE_ARN:
        required: true
      API_KEY:
        required: true
      DOPPLER_TOKEN_DEV:
        required: false
      DOPPLER_TOKEN_STAGING:
        required: false
      DOPPLER_TOKEN_PROD:
        required: false
    outputs:
      app-url:
        description: 'Deployed frontend app URL'
        value: ${{ jobs.deploy-frontend.outputs.app-url }}
      app-id:
        description: 'Amplify app ID'
        value: ${{ jobs.deploy-frontend.outputs.app-id }}
      frontend-health-status:
        description: 'Frontend health check status'
        value: ${{ jobs.frontend-health-check.outputs.frontend-health-status }}

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20.19.4'
  PNPM_VERSION: '10.14.0'
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_REGION: us-east-1

jobs:
  deploy-frontend:
    name: Deploy Frontend to Amplify
    runs-on: ubuntu-latest
    if: inputs.should-deploy == true

    permissions:
      id-token: write
      contents: read

    outputs:
      app-url: ${{ steps.deploy.outputs.app-url }}
      app-id: ${{ steps.deploy.outputs.app-id }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-Frontend-Deploy-${{ github.run_id }}

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pnpm-store
          node_modules
        key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          pnpm-${{ runner.os }}-

    - name: Install dependencies
      run: |
        cd apps/client-ui
        pnpm install --frozen-lockfile

    - name: Configure Doppler secrets
      id: configure-doppler
      shell: bash
      env:
        DOPPLER_TOKEN_DEV: ${{ secrets.DOPPLER_TOKEN_DEV }}
        DOPPLER_TOKEN_STAGING: ${{ secrets.DOPPLER_TOKEN_STAGING }}
        DOPPLER_TOKEN_PROD: ${{ secrets.DOPPLER_TOKEN_PROD }}
        DEPLOYMENT_TYPE: ${{ inputs.deployment-type }}
      run: |
        if [[ "${{ env.ACT_LOCAL }}" == "true" ]]; then
          echo "DOPPLER_DISABLED=true" >> "$GITHUB_ENV"
          cat <<'EOF' >> "$GITHUB_ENV"
          API_KEY=dummy-api-key-at-least-32-chars-long
          SERVER_PORT=3040
          APP_ENV=development
          AWS_COGNITO_REGION=us-east-1
          AWS_COGNITO_USER_POOL_ID=us-east-1_mock_pool
          AWS_COGNITO_USER_POOL_CLIENT_ID=mock_client_id
          AWS_COGNITO_USER_POOL_SECRET_KEY=mock_secret_key
          AWS_COGNITO_REFRESH_TOKEN_EXPIRY=2592000
          COOKIE_DOMAIN=localhost
          COOKIE_ENCRYPTION_KEY=mock-encryption-key-for-local-testing-only
          RELATIONAL_DATABASE_URL=postgresql://user:password@localhost:5432/macro_ai_test
          REDIS_URL=redis://localhost:6379
          OPENAI_API_KEY=mock-openai-key-for-local-testing-only
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100
          AUTH_RATE_LIMIT_WINDOW_MS=900000
          AUTH_RATE_LIMIT_MAX_REQUESTS=5
          API_RATE_LIMIT_WINDOW_MS=60000
          API_RATE_LIMIT_MAX_REQUESTS=10
          VITE_API_URL=http://localhost:3040/api
          VITE_API_KEY=dummy-api-key-at-least-32-chars-long
          EOF
        else
          case "$DEPLOYMENT_TYPE" in
            production)
              TOKEN="$DOPPLER_TOKEN_PROD"
              ;;
            staging)
              TOKEN="$DOPPLER_TOKEN_STAGING"
              ;;
            *)
              TOKEN="$DOPPLER_TOKEN_DEV"
              ;;
          esac

          if [[ -z "$TOKEN" ]]; then
            echo "❌ Missing Doppler token for deployment type $DEPLOYMENT_TYPE"
            exit 1
          fi

          echo "::add-mask::$TOKEN"
          echo "DOPPLER_TOKEN=$TOKEN" >> "$GITHUB_ENV"
          doppler secrets download --no-file --format env >> "$GITHUB_ENV"
        fi

    - name: Generate API client package
      run: |
        echo "🔧 Generating API client package from OpenAPI specification"

        cd apps/express-api
        pnpm install --frozen-lockfile
        doppler run -- pnpm run generate-swagger

        cd ../../packages/macro-ai-api-client
        pnpm install --frozen-lockfile
        doppler run -- pnpm run build

        echo "✅ API client package built successfully"

    - name: Generate environment configuration
      id: generate-env
      uses: ./.github/actions/generate-frontend-env
      with:
        environment: ${{ inputs.environment-name }}
        pr-number: ${{ inputs.pr-number }}
        build-mode: ${{ inputs.deployment-type }}
        # Use Doppler synced secrets instead of hardcoded values
        api-endpoint: ${{ inputs.backend-url }}
        custom-domain-name: ${{ inputs.custom-domain-name }}
        hosted-zone-id: ${{ inputs.hosted-zone-id }}
        # Use Doppler synced API key
        api-key: ${{ secrets.API_KEY }}
        backend-stack-name: 'placeholder'
        resolution-method: 'artifact-based'
        output-file: '.env.preview'
        include-build-metadata: 'true'
        validate-variables: 'true'
        debug: 'false'

    - name: Generate Amplify configuration
      run: |
        cd apps/client-ui

        ENV_NAME="${{ inputs.environment-name }}"
        DEPLOYMENT_TYPE="${{ inputs.deployment-type }}"
        PNPM_VERSION="${{ env.PNPM_VERSION }}"

        cat > amplify.yml <<EOF
        version: 1
        applications:
          - appRoot: apps/client-ui
            frontend:
              phases:
                preBuild:
                  commands:
                    - echo "Installing dependencies..."
                    - npm install -g pnpm@${PNPM_VERSION}
                    - pnpm install --frozen-lockfile
                build:
                  commands:
                    - echo "Building React application..."
                    - pnpm run build
              artifacts:
                baseDirectory: dist
                files:
                  - "**/*"
              cache:
                paths:
                  - node_modules/**/*
                  - .pnpm-store/**/*
        EOF

        echo "✅ Generated amplify.yml configuration"

    - name: Build React application
      run: |
        cd apps/client-ui

        # Build the application
        echo "🔨 Building React application..."
        if [[ "${DOPPLER_DISABLED}" == "true" ]]; then
          pnpm run build
        else
          doppler run -- pnpm run build
        fi

        echo "✅ Build completed successfully"

        # Verify build output
        if [[ -d "dist" && -f "dist/index.html" ]]; then
          echo "✅ Build artifacts verified"
          echo "📊 Build size: $(du -sh dist)"
        else
          echo "❌ Build verification failed"
          exit 1
        fi

    - name: Deploy to Amplify
      id: deploy
      run: |
        cd apps/client-ui

        ENV_NAME="${{ inputs.environment-name }}"
        DEPLOYMENT_TYPE="${{ inputs.deployment-type }}"
        AMPLIFY_APP_NAME="macro-ai-frontend-${ENV_NAME}"

        echo "🚀 Deploying to Amplify app: '${AMPLIFY_APP_NAME}'"

        # Check if app exists, create if needed
        APP_ID=$(aws amplify list-apps \
          --region "${{ env.AWS_REGION }}" \
          --query "apps[?name=='${AMPLIFY_APP_NAME}'].appId" \
          --output text 2>/dev/null || echo "")

        if [[ -z "$APP_ID" || "$APP_ID" == "None" ]]; then
          echo "📱 Creating new Amplify app: ${AMPLIFY_APP_NAME}"
          APP_ID=$(aws amplify create-app \
            --name "${AMPLIFY_APP_NAME}" \
            --description "Frontend for ${DEPLOYMENT_TYPE} environment ${ENV_NAME}" \
            --platform WEB \
            --region ${{ env.AWS_REGION }} \
            --query 'app.appId' \
            --output text)
          echo "✅ Created Amplify app with ID: ${APP_ID}"
        else
          echo "✅ Using existing Amplify app with ID: ${APP_ID}"
        fi

        # Create or update branch
        BRANCH_NAME="${{ inputs.branch-name }}"
        SANITIZED_BRANCH="${BRANCH_NAME//\//-}"
        echo "🌿 Setting up branch: ${BRANCH_NAME}"

        # Check if branch exists
        BRANCH_EXISTS=$(aws amplify list-branches \
          --app-id "$APP_ID" \
          --region ${{ env.AWS_REGION }} \
          --query "branches[?branchName=='${BRANCH_NAME}'].branchName" \
          --output text 2>/dev/null || echo "")

        if [[ -z "$BRANCH_EXISTS" || "$BRANCH_EXISTS" == "None" ]]; then
          echo "🌱 Creating new branch: ${BRANCH_NAME}"
          aws amplify create-branch \
            --app-id "$APP_ID" \
            --branch-name "${BRANCH_NAME}" \
            --description "Branch for ${DEPLOYMENT_TYPE} environment ${ENV_NAME}" \
            --region ${{ env.AWS_REGION }}
        else
          echo "✅ Branch already exists: ${BRANCH_NAME}"
        fi

        # Deploy the application
        echo "🚀 Starting deployment..."

        # Ensure build artifacts exist and zip them
        if [[ -d "dist" ]]; then
          (cd dist && zip -qr ../build.zip .)
        else
          echo "❌ Build artifacts not found in apps/client-ui/dist"
          exit 1
        fi

        # Request a deployment
        DEPLOY_JSON=$(aws amplify create-deployment \
          --app-id "$APP_ID" \
          --branch-name "${BRANCH_NAME}" \
          --region "${{ env.AWS_REGION }}")
        JOB_ID=$(echo "$DEPLOY_JSON" | jq -r '.jobId')
        UPLOAD_URL=$(echo "$DEPLOY_JSON" | jq -r '.zipUploadUrl')

        if [[ -z "$JOB_ID" || -z "$UPLOAD_URL" || "$JOB_ID" == "null" || "$UPLOAD_URL" == "null" ]]; then
          echo "❌ Failed to create deployment or retrieve upload URL"
          exit 1
        fi

        echo "📋 Deployment job ID: ${JOB_ID}"
        echo "⬆️ Uploading build.zip to pre-signed URL"
        curl -sS -X PUT -H "Content-Type: application/zip" --upload-file build.zip "$UPLOAD_URL"

        # Start the deployment
        aws amplify start-deployment \
          --app-id "$APP_ID" \
          --branch-name "${BRANCH_NAME}" \
          --job-id "$JOB_ID" \
          --region ${{ env.AWS_REGION }}

        # Wait for deployment to complete
        echo "⏳ Waiting for deployment to complete..."
        MAX_ATTEMPTS=90; SLEEP=10
        for ((i=1;i<=MAX_ATTEMPTS;i++)); do
          STATUS=$(aws amplify get-job \
            --app-id "$APP_ID" \
            --branch-name "${BRANCH_NAME}" \
            --job-id "$JOB_ID" \
            --region ${{ env.AWS_REGION }} \
            --query 'job.summary.status' \
            --output text)
          echo "🔎 Attempt $i/$MAX_ATTEMPTS: status=${STATUS}"
          if [[ "$STATUS" == "SUCCEED" || "$STATUS" == "FAILED" || "$STATUS" == "CANCELLED" ]]; then
            break
          fi
          sleep $SLEEP
        done

        # Get final deployment status
        JOB_STATUS=$(aws amplify get-job \
          --app-id "$APP_ID" \
          --branch-name "${BRANCH_NAME}" \
          --job-id "$JOB_ID" \
          --region ${{ env.AWS_REGION }} \
          --query 'job.summary.status' \
          --output text)

        if [[ "$JOB_STATUS" == "SUCCEED" ]]; then
          # Generate app URL
          SANITIZED_BRANCH="${BRANCH_NAME//\//-}"
          DEFAULT_APP_URL="https://${SANITIZED_BRANCH}.${APP_ID}.amplifyapp.com/"
          FINAL_APP_URL="$DEFAULT_APP_URL"

          # Configure custom domain if available
          if [[ -n "${{ inputs.custom-domain-name }}" && -n "${{ inputs.hosted-zone-id }}" ]]; then
            echo "🌐 Configuring custom domain: ${{ inputs.custom-domain-name }}"

            if [[ -f "scripts/configure-amplify-custom-domain.sh" ]]; then
              chmod +x scripts/configure-amplify-custom-domain.sh
              if [[ "${{ inputs.deployment-type }}" == "preview" ]]; then
                CUSTOM_SUBDOMAIN="pr-${{ inputs.pr-number }}.${{ inputs.custom-domain-name }}"
              else
                CUSTOM_SUBDOMAIN="${{ inputs.environment-name }}.${{ inputs.custom-domain-name }}"
              fi

              if scripts/configure-amplify-custom-domain.sh \
                --app-id "$APP_ID" \
                --domain "$CUSTOM_SUBDOMAIN" \
                --hosted-zone-id "${{ inputs.hosted-zone-id }}" \
                --environment "${{ inputs.deployment-type }}" \
                --branch "$BRANCH_NAME" \
                --no-wait; then
                FINAL_APP_URL="https://${CUSTOM_SUBDOMAIN}/"
                echo "✅ Custom domain configured successfully!"
              else
                echo "⚠️ Custom domain configuration failed, using default URL"
              fi
            else
              echo "⚠️ Custom domain script not found, using default URL"
            fi
          fi

          echo "app-id=${APP_ID}" >> $GITHUB_OUTPUT
          echo "app-url=${FINAL_APP_URL}" >> $GITHUB_OUTPUT
          echo "✅ Frontend deployment successful!"
          echo "🌐 Frontend URL: ${FINAL_APP_URL}"
        else
          echo "❌ Frontend deployment failed with status: ${JOB_STATUS}"
          exit 1
        fi

  frontend-health-check:
    name: Frontend Health Check
    runs-on: ubuntu-latest
    needs: deploy-frontend
    if: always() && needs.deploy-frontend.outputs.app-url != ''
    outputs:
      frontend-health-status: ${{ steps.health-check.outputs.frontend-health-status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '${{ env.PNPM_VERSION }}'

    - name: Perform Frontend Health Check
      id: health-check
      run: |
        FRONTEND_URL="${{ needs.deploy-frontend.outputs.app-url }}"
        echo "🔍 Performing frontend health check on: '$FRONTEND_URL'"

        # Wait for the frontend to be ready
        sleep 30

        # Perform frontend health check
        for i in {1..10}; do
          if curl -f -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL" | grep -q "200"; then
            echo "✅ Frontend health check passed on attempt ${i}"
            echo "frontend-health-status=healthy" >> "$GITHUB_OUTPUT"
            echo "✅ Frontend is responding at ${FRONTEND_URL}"
            exit 0
          fi
          echo "⏳ Frontend health check attempt ${i} failed, retrying..."
          sleep 15
        done

        echo "⚠️ Frontend health check failed after 10 attempts"
        echo "frontend-health-status=unknown" >> "$GITHUB_OUTPUT"
        echo "⚠️ Frontend health status unknown - will proceed anyway"
        exit 0

// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * Standard error response
 */
export const zErrorResponse = z.object({
    message: z.string(),
    details: z.optional(z.record(z.string(), z.unknown()))
});

export type ErrorResponseZodType = z.infer<typeof zErrorResponse>;

/**
 * Rate limit exceeded error response
 */
export const zRateLimitError = z.object({
    status: z.number(),
    message: z.string()
});

export type RateLimitErrorZodType = z.infer<typeof zRateLimitError>;

/**
 * Request validation error response
 */
export const zValidationError = z.object({
    message: z.string(),
    details: z.optional(z.record(z.string(), z.unknown()))
});

export type ValidationErrorZodType = z.infer<typeof zValidationError>;

/**
 * Internal server error response
 */
export const zInternalServerError = z.object({
    message: z.string()
});

export type InternalServerErrorZodType = z.infer<typeof zInternalServerError>;

/**
 * Unauthorized access error response
 */
export const zUnauthorizedError = z.object({
    message: z.string()
});

export type UnauthorizedErrorZodType = z.infer<typeof zUnauthorizedError>;

/**
 * Resource not found error response
 */
export const zNotFoundError = z.object({
    message: z.string()
});

export type NotFoundErrorZodType = z.infer<typeof zNotFoundError>;

/**
 * Resource conflict error response
 */
export const zConflictError = z.object({
    message: z.string()
});

export type ConflictErrorZodType = z.infer<typeof zConflictError>;

/**
 * Forbidden access error response
 */
export const zForbiddenError = z.object({
    message: z.string()
});

export type ForbiddenErrorZodType = z.infer<typeof zForbiddenError>;

/**
 * Invalid verification code error response
 */
export const zCognitoCodeMismatchError = z.object({
    message: z.string()
});

export type CognitoCodeMismatchErrorZodType = z.infer<typeof zCognitoCodeMismatchError>;

/**
 * Expired verification code error response
 */
export const zCognitoExpiredCodeError = z.object({
    message: z.string()
});

export type CognitoExpiredCodeErrorZodType = z.infer<typeof zCognitoExpiredCodeError>;

/**
 * User not confirmed error response
 */
export const zCognitoUserNotConfirmedError = z.object({
    message: z.string()
});

export type CognitoUserNotConfirmedErrorZodType = z.infer<typeof zCognitoUserNotConfirmedError>;

/**
 * User already exists error response
 */
export const zCognitoUsernameExistsError = z.object({
    message: z.string()
});

export type CognitoUsernameExistsErrorZodType = z.infer<typeof zCognitoUsernameExistsError>;

export const zUserProfile = z.object({
    id: z.uuid(),
    email: z.string().max(255),
    emailVerified: z.union([
        z.boolean(),
        z.null()
    ]),
    firstName: z.union([
        z.string().max(255),
        z.null()
    ]),
    lastName: z.union([
        z.string().max(255),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    lastLogin: z.union([
        z.string(),
        z.null()
    ])
});

export type UserProfileZodType = z.infer<typeof zUserProfile>;

/**
 * Update user profile request
 */
export const zUpdateUserProfile = z.object({
    firstName: z.optional(z.string()),
    lastName: z.optional(z.string())
});

export type UpdateUserProfileZodType = z.infer<typeof zUpdateUserProfile>;

/**
 * User profile response
 */
export const zUserResponse = z.object({
    user: z.object({
        id: z.uuid(),
        email: z.string().max(255),
        emailVerified: z.union([
            z.boolean(),
            z.null()
        ]),
        firstName: z.union([
            z.string().max(255),
            z.null()
        ]),
        lastName: z.union([
            z.string().max(255),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastLogin: z.union([
            z.string(),
            z.null()
        ])
    })
});

export type UserResponseZodType = z.infer<typeof zUserResponse>;

/**
 * Base response with a message
 */
export const zMessageBase = z.object({
    message: z.string()
});

export type MessageBaseZodType = z.infer<typeof zMessageBase>;

/**
 * User ID validation schema
 */
export const zUserId = z.uuid();

export type UserIdZodType = z.infer<typeof zUserId>;

/**
 * Generic authentication response
 */
export const zAuthResponse = z.object({
    message: z.string()
});

export type AuthResponseZodType = z.infer<typeof zAuthResponse>;

/**
 * User registration request
 */
export const zRegisterRequest = z.object({
    email: z.email(),
    password: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{}|;:,.<>?])/),
    confirmPassword: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{}|;:,.<>?])/)
});

export type RegisterRequestZodType = z.infer<typeof zRegisterRequest>;

/**
 * User registration response
 */
export const zRegisterResponse = z.object({
    message: z.string(),
    user: z.object({
        id: z.string(),
        email: z.string()
    })
});

export type RegisterResponseZodType = z.infer<typeof zRegisterResponse>;

/**
 * Confirm user registration with verification code
 */
export const zConfirmRegistration = z.object({
    email: z.email(),
    code: z.number()
});

export type ConfirmRegistrationZodType = z.infer<typeof zConfirmRegistration>;

/**
 * Request to resend confirmation code
 */
export const zResendConfirmationCode = z.object({
    email: z.email()
});

export type ResendConfirmationCodeZodType = z.infer<typeof zResendConfirmationCode>;

/**
 * User login request
 */
export const zLoginRequest = z.object({
    email: z.email(),
    password: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{}|;:,.<>?])/)
});

export type LoginRequestZodType = z.infer<typeof zLoginRequest>;

/**
 * Authentication tokens response
 */
export const zTokenResponse = z.object({
    accessToken: z.string(),
    refreshToken: z.string(),
    expiresIn: z.number()
});

export type TokenResponseZodType = z.infer<typeof zTokenResponse>;

/**
 * Request to initiate password reset
 */
export const zForgotPasswordRequest = z.object({
    email: z.email()
});

export type ForgotPasswordRequestZodType = z.infer<typeof zForgotPasswordRequest>;

/**
 * Request to confirm password reset with code
 */
export const zConfirmForgotPasswordRequest = z.object({
    email: z.email(),
    code: z.string().length(6),
    newPassword: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{}|;:,.<>?])/),
    confirmPassword: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{}|;:,.<>?])/)
});

export type ConfirmForgotPasswordRequestZodType = z.infer<typeof zConfirmForgotPasswordRequest>;

/**
 * Authenticated user information response
 */
export const zGetAuthUserResponse = z.object({
    id: z.string(),
    email: z.string(),
    emailVerified: z.boolean()
});

export type GetAuthUserResponseZodType = z.infer<typeof zGetAuthUserResponse>;

export const zChat = z.object({
    id: z.uuid(),
    userId: z.uuid(),
    title: z.string().max(255),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ])
});

export type ChatZodType = z.infer<typeof zChat>;

export const zChatMessage = z.object({
    id: z.uuid(),
    chatId: z.uuid(),
    role: z.string().max(20),
    content: z.string(),
    metadata: z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.unknown(),
        z.record(z.string(), z.unknown()),
        z.array(z.unknown())
    ]),
    embedding: z.union([
        z.array(z.number()),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ])
});

export type ChatMessageZodType = z.infer<typeof zChatMessage>;

export const zChatVector = z.object({
    id: z.uuid(),
    userId: z.uuid(),
    chatId: z.union([
        z.uuid(),
        z.null()
    ]),
    messageId: z.union([
        z.uuid(),
        z.null()
    ]),
    content: z.string(),
    embedding: z.union([
        z.array(z.number()),
        z.null()
    ]),
    metadata: z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.unknown(),
        z.record(z.string(), z.unknown()),
        z.array(z.unknown())
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ])
});

export type ChatVectorZodType = z.infer<typeof zChatVector>;

/**
 * Create new chat request
 */
export const zCreateChatRequest = z.object({
    title: z.string().min(1).max(255)
});

export type CreateChatRequestZodType = z.infer<typeof zCreateChatRequest>;

/**
 * Update chat request
 */
export const zUpdateChatRequest = z.object({
    title: z.string().min(1).max(255)
});

export type UpdateChatRequestZodType = z.infer<typeof zUpdateChatRequest>;

/**
 * Send message request
 */
export const zSendMessageRequest = z.object({
    messages: z.array(z.object({
        role: z.enum([
            'user',
            'assistant',
            'system'
        ]),
        content: z.string().min(1).max(10000)
    })).min(1)
});

export type SendMessageRequestZodType = z.infer<typeof zSendMessageRequest>;

/**
 * Semantic search request
 */
export const zSearchChatRequest = z.object({
    query: z.string().min(1).max(1000),
    limit: z.optional(z.number().gte(1).lte(50)).default(10),
    threshold: z.optional(z.number().gte(0).lte(1)).default(0.7)
});

export type SearchChatRequestZodType = z.infer<typeof zSearchChatRequest>;

/**
 * Chat response
 */
export const zChatResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.uuid(),
        userId: z.uuid(),
        title: z.string().max(255),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ])
    })
});

export type ChatResponseZodType = z.infer<typeof zChatResponse>;

/**
 * Chat list response
 */
export const zChatListResponse = z.object({
    success: z.boolean(),
    data: z.array(z.object({
        id: z.uuid(),
        userId: z.uuid(),
        title: z.string().max(255),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ])
    })),
    meta: z.object({
        page: z.number(),
        limit: z.number(),
        total: z.number()
    })
});

export type ChatListResponseZodType = z.infer<typeof zChatListResponse>;

/**
 * Chat with messages response
 */
export const zChatWithMessagesResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.uuid(),
        userId: z.uuid(),
        title: z.string(),
        createdAt: z.string(),
        updatedAt: z.string(),
        messages: z.array(z.object({
            id: z.uuid(),
            chatId: z.uuid(),
            role: z.string().max(20),
            content: z.string(),
            metadata: z.union([
                z.string(),
                z.number(),
                z.boolean(),
                z.unknown(),
                z.record(z.string(), z.unknown()),
                z.array(z.unknown())
            ]),
            embedding: z.union([
                z.array(z.number()),
                z.null()
            ]),
            createdAt: z.union([
                z.string(),
                z.null()
            ])
        }))
    })
});

export type ChatWithMessagesResponseZodType = z.infer<typeof zChatWithMessagesResponse>;

/**
 * Server-Sent Event for streaming chat
 */
export const zStreamingEvent = z.union([
    z.object({
        type: z.enum([
            'connected'
        ]),
        message: z.string()
    }),
    z.object({
        type: z.enum([
            'user_message'
        ]),
        message: z.object({
            id: z.uuid(),
            chatId: z.uuid(),
            role: z.string().max(20),
            content: z.string(),
            metadata: z.union([
                z.string(),
                z.number(),
                z.boolean(),
                z.unknown(),
                z.record(z.string(), z.unknown()),
                z.array(z.unknown())
            ]),
            embedding: z.union([
                z.array(z.number()),
                z.null()
            ]),
            createdAt: z.union([
                z.string(),
                z.null()
            ])
        })
    }),
    z.object({
        type: z.enum([
            'stream_start'
        ]),
        messageId: z.uuid()
    }),
    z.object({
        type: z.enum([
            'chunk'
        ]),
        content: z.string(),
        messageId: z.uuid()
    }),
    z.object({
        type: z.enum([
            'stream_complete'
        ]),
        messageId: z.uuid(),
        fullContent: z.string()
    }),
    z.object({
        type: z.enum([
            'error'
        ]),
        error: z.string()
    })
]);

export type StreamingEventZodType = z.infer<typeof zStreamingEvent>;

/**
 * API health check response
 */
export const zHealthResponse = z.object({
    message: z.string()
});

export type HealthResponseZodType = z.infer<typeof zHealthResponse>;

/**
 * System information response
 */
export const zSystemInfoResponse = z.object({
    nodeVersion: z.string(),
    platform: z.string(),
    architecture: z.string(),
    uptime: z.number(),
    memoryUsage: z.object({
        rss: z.number(),
        heapTotal: z.number(),
        heapUsed: z.number(),
        external: z.number()
    }),
    cpuUsage: z.object({
        user: z.number(),
        system: z.number()
    }),
    timestamp: z.string()
});

export type SystemInfoResponseZodType = z.infer<typeof zSystemInfoResponse>;

/**
 * Detailed API health check response for ALB and monitoring
 */
export const zDetailedHealthResponse = z.object({
    status: z.enum([
        'healthy',
        'unhealthy',
        'degraded'
    ]),
    message: z.string(),
    timestamp: z.string(),
    uptime: z.number(),
    version: z.string(),
    environment: z.string(),
    checks: z.object({
        database: z.object({
            status: z.enum([
                'healthy',
                'unhealthy',
                'unknown'
            ]),
            responseTime: z.optional(z.number()),
            error: z.optional(z.string())
        }),
        memory: z.object({
            status: z.enum([
                'healthy',
                'unhealthy'
            ]),
            usagePercent: z.number(),
            usageMB: z.number()
        }),
        disk: z.object({
            status: z.enum([
                'healthy',
                'unhealthy'
            ]),
            usagePercent: z.optional(z.number())
        }),
        dependencies: z.object({
            status: z.enum([
                'healthy',
                'unhealthy',
                'degraded'
            ]),
            services: z.array(z.object({
                name: z.string(),
                status: z.enum([
                    'healthy',
                    'unhealthy'
                ]),
                responseTime: z.optional(z.number()),
                error: z.optional(z.string())
            }))
        })
    })
});

export type DetailedHealthResponseZodType = z.infer<typeof zDetailedHealthResponse>;

/**
 * Application readiness probe response
 */
export const zReadinessResponse = z.object({
    ready: z.boolean(),
    message: z.string(),
    timestamp: z.string(),
    checks: z.object({
        database: z.boolean(),
        dependencies: z.boolean(),
        configuration: z.boolean()
    })
});

export type ReadinessResponseZodType = z.infer<typeof zReadinessResponse>;

/**
 * Application liveness probe response
 */
export const zLivenessResponse = z.object({
    alive: z.boolean(),
    message: z.string(),
    timestamp: z.string(),
    uptime: z.number()
});

export type LivenessResponseZodType = z.infer<typeof zLivenessResponse>;

/**
 * Configuration validation response
 */
export const zConfigurationResponse = z.object({
    status: z.enum([
        'healthy',
        'unhealthy',
        'degraded'
    ]),
    message: z.string(),
    timestamp: z.string(),
    checks: z.object({
        critical: z.object({
            ready: z.boolean(),
            missing: z.array(z.string())
        }),
        important: z.object({
            ready: z.boolean(),
            missing: z.array(z.string())
        }),
        optional: z.object({
            ready: z.boolean(),
            missing: z.array(z.string())
        })
    })
});

export type ConfigurationResponseZodType = z.infer<typeof zConfigurationResponse>;

/**
 * API health check error response
 */
export const zHealthErrorResponse = z.object({
    message: z.string()
});

export type HealthErrorResponseZodType = z.infer<typeof zHealthErrorResponse>;

export const zPostAuthRegisterData = z.object({
    body: z.optional(z.object({
        email: z.email(),
        password: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{}|;:,.<>?])/),
        confirmPassword: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{}|;:,.<>?])/)
    })),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type PostAuthRegisterDataZodType = z.infer<typeof zPostAuthRegisterData>;

/**
 * User registered successfully - confirmation email sent
 */
export const zPostAuthRegisterResponse = z.object({
    message: z.string()
});

export type PostAuthRegisterResponseZodType = z.infer<typeof zPostAuthRegisterResponse>;

export const zPostAuthConfirmRegistrationData = z.object({
    body: z.optional(z.object({
        email: z.email(),
        code: z.number()
    })),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type PostAuthConfirmRegistrationDataZodType = z.infer<typeof zPostAuthConfirmRegistrationData>;

/**
 * User registration confirmed successfully
 */
export const zPostAuthConfirmRegistrationResponse = z.object({
    message: z.string()
});

export type PostAuthConfirmRegistrationResponseZodType = z.infer<typeof zPostAuthConfirmRegistrationResponse>;

export const zPostAuthResendConfirmationCodeData = z.object({
    body: z.optional(z.object({
        email: z.email()
    })),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type PostAuthResendConfirmationCodeDataZodType = z.infer<typeof zPostAuthResendConfirmationCodeData>;

/**
 * Confirmation code resent successfully
 */
export const zPostAuthResendConfirmationCodeResponse = z.object({
    message: z.string()
});

export type PostAuthResendConfirmationCodeResponseZodType = z.infer<typeof zPostAuthResendConfirmationCodeResponse>;

export const zPostAuthLoginData = z.object({
    body: z.optional(z.object({
        email: z.email(),
        password: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{}|;:,.<>?])/)
    })),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type PostAuthLoginDataZodType = z.infer<typeof zPostAuthLoginData>;

/**
 * Authentication response
 */
export const zPostAuthLoginResponse = z.object({
    message: z.string(),
    tokens: z.object({
        accessToken: z.string(),
        refreshToken: z.string(),
        expiresIn: z.number()
    })
});

export type PostAuthLoginResponseZodType = z.infer<typeof zPostAuthLoginResponse>;

export const zPostAuthForgotPasswordData = z.object({
    body: z.optional(z.object({
        email: z.email()
    })),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type PostAuthForgotPasswordDataZodType = z.infer<typeof zPostAuthForgotPasswordData>;

/**
 * Password reset initiated successfully - reset code sent to email
 */
export const zPostAuthForgotPasswordResponse = z.object({
    message: z.string()
});

export type PostAuthForgotPasswordResponseZodType = z.infer<typeof zPostAuthForgotPasswordResponse>;

export const zPostAuthConfirmForgotPasswordData = z.object({
    body: z.optional(z.object({
        email: z.email(),
        code: z.string().length(6),
        newPassword: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{}|;:,.<>?])/),
        confirmPassword: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{}|;:,.<>?])/)
    })),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type PostAuthConfirmForgotPasswordDataZodType = z.infer<typeof zPostAuthConfirmForgotPasswordData>;

/**
 * Password reset successfully
 */
export const zPostAuthConfirmForgotPasswordResponse = z.object({
    message: z.string()
});

export type PostAuthConfirmForgotPasswordResponseZodType = z.infer<typeof zPostAuthConfirmForgotPasswordResponse>;

export const zPostAuthLogoutData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type PostAuthLogoutDataZodType = z.infer<typeof zPostAuthLogoutData>;

/**
 * User logged out successfully
 */
export const zPostAuthLogoutResponse = z.object({
    message: z.string()
});

export type PostAuthLogoutResponseZodType = z.infer<typeof zPostAuthLogoutResponse>;

export const zPostAuthRefreshData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type PostAuthRefreshDataZodType = z.infer<typeof zPostAuthRefreshData>;

/**
 * Authentication response
 */
export const zPostAuthRefreshResponse = z.object({
    message: z.string(),
    tokens: z.object({
        accessToken: z.string(),
        refreshToken: z.string(),
        expiresIn: z.number()
    })
});

export type PostAuthRefreshResponseZodType = z.infer<typeof zPostAuthRefreshResponse>;

export const zGetAuthUserData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type GetAuthUserDataZodType = z.infer<typeof zGetAuthUserData>;

/**
 * User information retrieved successfully
 */
export const zGetAuthUserResponse2 = z.object({
    id: z.string(),
    email: z.string(),
    emailVerified: z.boolean()
});

export type GetAuthUserResponseZodType2 = z.infer<typeof zGetAuthUserResponse2>;

export const zGetChatsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        page: z.optional(z.int().gte(1)).default(1),
        limit: z.optional(z.int().gte(1).lte(100)).default(20)
    }))
});

export type GetChatsDataZodType = z.infer<typeof zGetChatsData>;

/**
 * Successfully retrieved user chats
 */
export const zGetChatsResponse = z.object({
    success: z.boolean(),
    data: z.array(z.object({
        id: z.uuid(),
        userId: z.uuid(),
        title: z.string().max(255),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ])
    })),
    meta: z.object({
        page: z.number(),
        limit: z.number(),
        total: z.number()
    })
});

export type GetChatsResponseZodType = z.infer<typeof zGetChatsResponse>;

export const zPostChatsData = z.object({
    body: z.optional(z.object({
        title: z.string().min(1).max(255)
    })),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type PostChatsDataZodType = z.infer<typeof zPostChatsData>;

/**
 * Chat created successfully
 */
export const zPostChatsResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.uuid(),
        userId: z.uuid(),
        title: z.string().max(255),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ])
    })
});

export type PostChatsResponseZodType = z.infer<typeof zPostChatsResponse>;

export const zDeleteChatsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export type DeleteChatsByIdDataZodType = z.infer<typeof zDeleteChatsByIdData>;

/**
 * Chat deleted successfully
 */
export const zDeleteChatsByIdResponse = z.object({
    success: z.optional(z.boolean()),
    message: z.optional(z.string())
});

export type DeleteChatsByIdResponseZodType = z.infer<typeof zDeleteChatsByIdResponse>;

export const zGetChatsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export type GetChatsByIdDataZodType = z.infer<typeof zGetChatsByIdData>;

/**
 * Successfully retrieved chat with messages
 */
export const zGetChatsByIdResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.uuid(),
        userId: z.uuid(),
        title: z.string(),
        createdAt: z.string(),
        updatedAt: z.string(),
        messages: z.array(z.object({
            id: z.uuid(),
            chatId: z.uuid(),
            role: z.string().max(20),
            content: z.string(),
            metadata: z.union([
                z.string(),
                z.number(),
                z.boolean(),
                z.unknown(),
                z.record(z.string(), z.unknown()),
                z.array(z.unknown())
            ]),
            embedding: z.union([
                z.array(z.number()),
                z.null()
            ]),
            createdAt: z.union([
                z.string(),
                z.null()
            ])
        }))
    })
});

export type GetChatsByIdResponseZodType = z.infer<typeof zGetChatsByIdResponse>;

export const zPutChatsByIdData = z.object({
    body: z.optional(z.object({
        title: z.string().min(1).max(255)
    })),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export type PutChatsByIdDataZodType = z.infer<typeof zPutChatsByIdData>;

/**
 * Chat updated successfully
 */
export const zPutChatsByIdResponse = z.object({
    success: z.boolean(),
    data: z.object({
        id: z.uuid(),
        userId: z.uuid(),
        title: z.string().max(255),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ])
    })
});

export type PutChatsByIdResponseZodType = z.infer<typeof zPutChatsByIdResponse>;

export const zPostChatsByIdStreamData = z.object({
    body: z.optional(z.object({
        messages: z.array(z.object({
            role: z.enum([
                'user',
                'assistant',
                'system'
            ]),
            content: z.string().min(1).max(10000)
        })).min(1)
    })),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export type PostChatsByIdStreamDataZodType = z.infer<typeof zPostChatsByIdStreamData>;

/**
 * Plain text chunks streamed directly to client
 */
export const zPostChatsByIdStreamResponse = z.string();

export type PostChatsByIdStreamResponseZodType = z.infer<typeof zPostChatsByIdStreamResponse>;

export const zGetUsersByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export type GetUsersByIdDataZodType = z.infer<typeof zGetUsersByIdData>;

/**
 * User profile retrieved successfully
 */
export const zGetUsersByIdResponse = z.object({
    user: z.object({
        id: z.uuid(),
        email: z.string().max(255),
        emailVerified: z.union([
            z.boolean(),
            z.null()
        ]),
        firstName: z.union([
            z.string().max(255),
            z.null()
        ]),
        lastName: z.union([
            z.string().max(255),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastLogin: z.union([
            z.string(),
            z.null()
        ])
    })
});

export type GetUsersByIdResponseZodType = z.infer<typeof zGetUsersByIdResponse>;

export const zGetUsersMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type GetUsersMeDataZodType = z.infer<typeof zGetUsersMeData>;

/**
 * User profile retrieved successfully
 */
export const zGetUsersMeResponse = z.object({
    user: z.object({
        id: z.uuid(),
        email: z.string().max(255),
        emailVerified: z.union([
            z.boolean(),
            z.null()
        ]),
        firstName: z.union([
            z.string().max(255),
            z.null()
        ]),
        lastName: z.union([
            z.string().max(255),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastLogin: z.union([
            z.string(),
            z.null()
        ])
    })
});

export type GetUsersMeResponseZodType = z.infer<typeof zGetUsersMeResponse>;

export const zGetHealthData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type GetHealthDataZodType = z.infer<typeof zGetHealthData>;

/**
 * Health check successful
 */
export const zGetHealthResponse = z.object({
    message: z.string()
});

export type GetHealthResponseZodType = z.infer<typeof zGetHealthResponse>;

export const zGetSystemInfoData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type GetSystemInfoDataZodType = z.infer<typeof zGetSystemInfoData>;

/**
 * System information retrieved successfully
 */
export const zGetSystemInfoResponse = z.object({
    nodeVersion: z.string(),
    platform: z.string(),
    architecture: z.string(),
    uptime: z.number(),
    memoryUsage: z.object({
        rss: z.number(),
        heapTotal: z.number(),
        heapUsed: z.number(),
        external: z.number()
    }),
    cpuUsage: z.object({
        user: z.number(),
        system: z.number()
    }),
    timestamp: z.string()
});

export type GetSystemInfoResponseZodType = z.infer<typeof zGetSystemInfoResponse>;

export const zGetHealthDetailedData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type GetHealthDetailedDataZodType = z.infer<typeof zGetHealthDetailedData>;

/**
 * Detailed health check successful
 */
export const zGetHealthDetailedResponse = z.object({
    status: z.enum([
        'healthy',
        'unhealthy',
        'degraded'
    ]),
    message: z.string(),
    timestamp: z.string(),
    uptime: z.number(),
    version: z.string(),
    environment: z.string(),
    checks: z.object({
        database: z.object({
            status: z.enum([
                'healthy',
                'unhealthy',
                'unknown'
            ]),
            responseTime: z.optional(z.number()),
            error: z.optional(z.string())
        }),
        memory: z.object({
            status: z.enum([
                'healthy',
                'unhealthy'
            ]),
            usagePercent: z.number(),
            usageMB: z.number()
        }),
        disk: z.object({
            status: z.enum([
                'healthy',
                'unhealthy'
            ]),
            usagePercent: z.optional(z.number())
        }),
        dependencies: z.object({
            status: z.enum([
                'healthy',
                'unhealthy',
                'degraded'
            ]),
            services: z.array(z.object({
                name: z.string(),
                status: z.enum([
                    'healthy',
                    'unhealthy'
                ]),
                responseTime: z.optional(z.number()),
                error: z.optional(z.string())
            }))
        })
    })
});

export type GetHealthDetailedResponseZodType = z.infer<typeof zGetHealthDetailedResponse>;

export const zGetHealthReadyData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type GetHealthReadyDataZodType = z.infer<typeof zGetHealthReadyData>;

/**
 * Application is ready
 */
export const zGetHealthReadyResponse = z.object({
    ready: z.boolean(),
    message: z.string(),
    timestamp: z.string(),
    checks: z.object({
        database: z.boolean(),
        dependencies: z.boolean(),
        configuration: z.boolean()
    })
});

export type GetHealthReadyResponseZodType = z.infer<typeof zGetHealthReadyResponse>;

export const zGetHealthReadyPublicData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type GetHealthReadyPublicDataZodType = z.infer<typeof zGetHealthReadyPublicData>;

/**
 * Application is ready
 */
export const zGetHealthReadyPublicResponse = z.object({
    ready: z.boolean(),
    message: z.string(),
    timestamp: z.string(),
    checks: z.object({
        database: z.boolean(),
        dependencies: z.boolean(),
        configuration: z.boolean()
    })
});

export type GetHealthReadyPublicResponseZodType = z.infer<typeof zGetHealthReadyPublicResponse>;

export const zGetHealthLiveData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type GetHealthLiveDataZodType = z.infer<typeof zGetHealthLiveData>;

/**
 * Application is alive
 */
export const zGetHealthLiveResponse = z.object({
    alive: z.boolean(),
    message: z.string(),
    timestamp: z.string(),
    uptime: z.number()
});

export type GetHealthLiveResponseZodType = z.infer<typeof zGetHealthLiveResponse>;

export const zGetHealthConfigData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export type GetHealthConfigDataZodType = z.infer<typeof zGetHealthConfigData>;

/**
 * Configuration validation successful
 */
export const zGetHealthConfigResponse = z.object({
    status: z.enum([
        'healthy',
        'unhealthy',
        'degraded'
    ]),
    message: z.string(),
    timestamp: z.string(),
    checks: z.object({
        critical: z.object({
            ready: z.boolean(),
            missing: z.array(z.string())
        }),
        important: z.object({
            ready: z.boolean(),
            missing: z.array(z.string())
        }),
        optional: z.object({
            ready: z.boolean(),
            missing: z.array(z.string())
        })
    })
});

export type GetHealthConfigResponseZodType = z.infer<typeof zGetHealthConfigResponse>;
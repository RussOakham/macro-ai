// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client'
import type {
	PostAuthRegisterData,
	PostAuthRegisterResponses,
	PostAuthRegisterErrors,
	PostAuthConfirmRegistrationData,
	PostAuthConfirmRegistrationResponses,
	PostAuthConfirmRegistrationErrors,
	PostAuthResendConfirmationCodeData,
	PostAuthResendConfirmationCodeResponses,
	PostAuthResendConfirmationCodeErrors,
	PostAuthLoginData,
	PostAuthLoginResponses,
	PostAuthLoginErrors,
	PostAuthForgotPasswordData,
	PostAuthForgotPasswordResponses,
	PostAuthForgotPasswordErrors,
	PostAuthConfirmForgotPasswordData,
	PostAuthConfirmForgotPasswordResponses,
	PostAuthConfirmForgotPasswordErrors,
	PostAuthLogoutData,
	PostAuthLogoutResponses,
	PostAuthLogoutErrors,
	PostAuthRefreshData,
	PostAuthRefreshResponses,
	PostAuthRefreshErrors,
	GetAuthUserData,
	GetAuthUserResponses,
	GetAuthUserErrors,
	GetChatsData,
	GetChatsResponses,
	GetChatsErrors,
	PostChatsData,
	PostChatsResponses,
	PostChatsErrors,
	DeleteChatsByIdData,
	DeleteChatsByIdResponses,
	DeleteChatsByIdErrors,
	GetChatsByIdData,
	GetChatsByIdResponses,
	GetChatsByIdErrors,
	PutChatsByIdData,
	PutChatsByIdResponses,
	PutChatsByIdErrors,
	PostChatsByIdStreamData,
	PostChatsByIdStreamResponses,
	PostChatsByIdStreamErrors,
	GetUsersByIdData,
	GetUsersByIdResponses,
	GetUsersByIdErrors,
	GetUsersMeData,
	GetUsersMeResponses,
	GetUsersMeErrors,
	GetHealthData,
	GetHealthResponses,
	GetHealthErrors,
	GetSystemInfoData,
	GetSystemInfoResponses,
	GetSystemInfoErrors,
	GetHealthDetailedData,
	GetHealthDetailedResponses,
	GetHealthDetailedErrors,
	GetHealthReadyData,
	GetHealthReadyResponses,
	GetHealthReadyErrors,
	GetHealthReadyPublicData,
	GetHealthReadyPublicResponses,
	GetHealthReadyPublicErrors,
	GetHealthLiveData,
	GetHealthLiveResponses,
	GetHealthLiveErrors,
	GetHealthConfigData,
	GetHealthConfigResponses,
	GetHealthConfigErrors,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>
}

/**
 * Register new user
 * Creates a new user account with email and password. Sends confirmation email to verify the account.
 */
export const postAuthRegister = <ThrowOnError extends boolean = false>(
	options?: Options<PostAuthRegisterData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostAuthRegisterResponses,
		PostAuthRegisterErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/auth/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Confirm user registration
 * Confirms user registration using the confirmation code sent via email.
 */
export const postAuthConfirmRegistration = <
	ThrowOnError extends boolean = false,
>(
	options?: Options<PostAuthConfirmRegistrationData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostAuthConfirmRegistrationResponses,
		PostAuthConfirmRegistrationErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/auth/confirm-registration',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Resend confirmation code
 * Resends the confirmation code to the user's email address for account verification.
 */
export const postAuthResendConfirmationCode = <
	ThrowOnError extends boolean = false,
>(
	options?: Options<PostAuthResendConfirmationCodeData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostAuthResendConfirmationCodeResponses,
		PostAuthResendConfirmationCodeErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/auth/resend-confirmation-code',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * User login
 * Authenticates a user with email and password, returning access tokens upon successful login.
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(
	options?: Options<PostAuthLoginData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostAuthLoginResponses,
		PostAuthLoginErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/auth/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Initiate password reset
 * Initiates password reset process by sending a reset code to the user's email address.
 */
export const postAuthForgotPassword = <ThrowOnError extends boolean = false>(
	options?: Options<PostAuthForgotPasswordData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostAuthForgotPasswordResponses,
		PostAuthForgotPasswordErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/auth/forgot-password',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Confirm password reset
 * Confirms password reset using the reset code and sets a new password.
 */
export const postAuthConfirmForgotPassword = <
	ThrowOnError extends boolean = false,
>(
	options?: Options<PostAuthConfirmForgotPasswordData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostAuthConfirmForgotPasswordResponses,
		PostAuthConfirmForgotPasswordErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/auth/confirm-forgot-password',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * User logout
 * Logs out the authenticated user and invalidates their session.
 */
export const postAuthLogout = <ThrowOnError extends boolean = false>(
	options?: Options<PostAuthLogoutData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostAuthLogoutResponses,
		PostAuthLogoutErrors,
		ThrowOnError
	>({
		responseType: 'json',
		security: [
			{
				in: 'cookie',
				name: 'macro-ai-accessToken',
				type: 'apiKey',
			},
		],
		url: '/auth/logout',
		...options,
	})
}

/**
 * Refresh access token
 * Refreshes the user's access token using a valid refresh token.
 */
export const postAuthRefresh = <ThrowOnError extends boolean = false>(
	options?: Options<PostAuthRefreshData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostAuthRefreshResponses,
		PostAuthRefreshErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/auth/refresh',
		...options,
	})
}

/**
 * Get authenticated user information
 * Retrieves the authenticated user's information from Cognito.
 */
export const getAuthUser = <ThrowOnError extends boolean = false>(
	options?: Options<GetAuthUserData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetAuthUserResponses,
		GetAuthUserErrors,
		ThrowOnError
	>({
		responseType: 'json',
		security: [
			{
				in: 'cookie',
				name: 'macro-ai-accessToken',
				type: 'apiKey',
			},
		],
		url: '/auth/user',
		...options,
	})
}

/**
 * Get user chats
 * Retrieves all chats for the authenticated user with pagination support. Supports optional query parameters: page (default: 1) and limit (default: 20, max: 100).
 */
export const getChats = <ThrowOnError extends boolean = false>(
	options?: Options<GetChatsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetChatsResponses,
		GetChatsErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/chats',
		...options,
	})
}

/**
 * Create new chat
 * Creates a new chat conversation for the authenticated user.
 */
export const postChats = <ThrowOnError extends boolean = false>(
	options?: Options<PostChatsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostChatsResponses,
		PostChatsErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/chats',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete chat
 * Deletes a chat and all its messages. User must own the chat. This action cannot be undone.
 */
export const deleteChatsById = <ThrowOnError extends boolean = false>(
	options: Options<DeleteChatsByIdData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteChatsByIdResponses,
		DeleteChatsByIdErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/chats/{id}',
		...options,
	})
}

/**
 * Get chat by ID
 * Retrieves a specific chat with all its messages. User must own the chat.
 */
export const getChatsById = <ThrowOnError extends boolean = false>(
	options: Options<GetChatsByIdData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetChatsByIdResponses,
		GetChatsByIdErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/chats/{id}',
		...options,
	})
}

/**
 * Update chat
 * Updates chat title. User must own the chat.
 */
export const putChatsById = <ThrowOnError extends boolean = false>(
	options: Options<PutChatsByIdData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		PutChatsByIdResponses,
		PutChatsByIdErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/chats/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Stream chat message response
 * Send a message and receive streaming AI response via Server-Sent Events
 */
export const postChatsByIdStream = <ThrowOnError extends boolean = false>(
	options: Options<PostChatsByIdStreamData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		PostChatsByIdStreamResponses,
		PostChatsByIdStreamErrors,
		ThrowOnError
	>({
		responseType: 'text',
		url: '/chats/{id}/stream',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Get user by ID
 * Retrieves a user's profile information by their unique identifier. Requires authentication.
 */
export const getUsersById = <ThrowOnError extends boolean = false>(
	options: Options<GetUsersByIdData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetUsersByIdResponses,
		GetUsersByIdErrors,
		ThrowOnError
	>({
		responseType: 'json',
		security: [
			{
				in: 'cookie',
				name: 'macro-ai-accessToken',
				type: 'apiKey',
			},
		],
		url: '/users/{id}',
		...options,
	})
}

/**
 * Get current user profile
 * Retrieves the authenticated user's profile information including personal details and account status
 */
export const getUsersMe = <ThrowOnError extends boolean = false>(
	options?: Options<GetUsersMeData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetUsersMeResponses,
		GetUsersMeErrors,
		ThrowOnError
	>({
		responseType: 'json',
		security: [
			{
				in: 'cookie',
				name: 'macro-ai-accessToken',
				type: 'apiKey',
			},
		],
		url: '/users/me',
		...options,
	})
}

/**
 * Health check endpoint
 * Returns the current health status of the API service. No rate limiting applied to ensure ALB health checks work reliably.
 */
export const getHealth = <ThrowOnError extends boolean = false>(
	options?: Options<GetHealthData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetHealthResponses,
		GetHealthErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/health',
		...options,
	})
}

/**
 * System information endpoint
 * Returns detailed system information including Node.js version, platform, memory usage, and CPU statistics
 */
export const getSystemInfo = <ThrowOnError extends boolean = false>(
	options?: Options<GetSystemInfoData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetSystemInfoResponses,
		GetSystemInfoErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/system-info',
		...options,
	})
}

/**
 * Detailed health check endpoint for ALB and monitoring
 * Returns comprehensive health status including database, memory, disk, and dependencies checks. No rate limiting applied to ensure ALB health checks work reliably.
 */
export const getHealthDetailed = <ThrowOnError extends boolean = false>(
	options?: Options<GetHealthDetailedData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetHealthDetailedResponses,
		GetHealthDetailedErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/health/detailed',
		...options,
	})
}

/**
 * Readiness probe endpoint
 * Returns whether the application is ready to receive traffic (Kubernetes-style readiness probe). No rate limiting applied to ensure ALB health checks work reliably.
 */
export const getHealthReady = <ThrowOnError extends boolean = false>(
	options?: Options<GetHealthReadyData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetHealthReadyResponses,
		GetHealthReadyErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/health/ready',
		...options,
	})
}

/**
 * Public readiness probe endpoint
 * Returns minimal readiness information without detailed error messages in production. Suitable for public ALB health checks. No rate limiting applied.
 */
export const getHealthReadyPublic = <ThrowOnError extends boolean = false>(
	options?: Options<GetHealthReadyPublicData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetHealthReadyPublicResponses,
		GetHealthReadyPublicErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/health/ready/public',
		...options,
	})
}

/**
 * Liveness probe endpoint
 * Returns whether the application is alive and should not be restarted (Kubernetes-style liveness probe). No rate limiting applied to ensure ALB health checks work reliably.
 */
export const getHealthLive = <ThrowOnError extends boolean = false>(
	options?: Options<GetHealthLiveData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetHealthLiveResponses,
		GetHealthLiveErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/health/live',
		...options,
	})
}

/**
 * Configuration validation endpoint
 * Returns detailed configuration validation status for debugging deployment issues. No rate limiting applied to ensure ALB health checks work reliably.
 */
export const getHealthConfig = <ThrowOnError extends boolean = false>(
	options?: Options<GetHealthConfigData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetHealthConfigResponses,
		GetHealthConfigErrors,
		ThrowOnError
	>({
		responseType: 'json',
		url: '/health/config',
		...options,
	})
}

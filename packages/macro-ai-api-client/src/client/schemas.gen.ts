// This file is auto-generated by @hey-api/openapi-ts

export const ErrorResponseSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Error message',
		},
		details: {
			type: 'object',
			additionalProperties: {
				nullable: true,
			},
			description: 'Error details',
		},
	},
	required: ['message'],
	description: 'Standard error response',
} as const

export const RateLimitErrorSchema = {
	type: 'object',
	properties: {
		status: {
			type: 'number',
			description: 'HTTP status code',
			example: 429,
		},
		message: {
			type: 'string',
			description: 'Rate limit error message',
			example: 'Too many requests, please try again later.',
		},
	},
	required: ['status', 'message'],
	description: 'Rate limit exceeded error response',
} as const

export const ValidationErrorSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Validation error message',
			example: 'Validation Failed',
		},
		details: {
			type: 'object',
			additionalProperties: {
				nullable: true,
			},
			description: 'Detailed validation error information',
			example: {
				field: 'email',
				message: 'Invalid email format',
			},
		},
	},
	required: ['message'],
	description: 'Request validation error response',
} as const

export const InternalServerErrorSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Internal server error message',
			example: 'Internal server error',
		},
	},
	required: ['message'],
	description: 'Internal server error response',
} as const

export const UnauthorizedErrorSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Unauthorized error message',
			example: 'Authentication required',
		},
	},
	required: ['message'],
	description: 'Unauthorized access error response',
} as const

export const NotFoundErrorSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Not found error message',
			example: 'Resource not found',
		},
	},
	required: ['message'],
	description: 'Resource not found error response',
} as const

export const ConflictErrorSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Conflict error message',
			example: 'Resource conflict',
		},
	},
	required: ['message'],
	description: 'Resource conflict error response',
} as const

export const ForbiddenErrorSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Forbidden error message',
			example: 'Forbidden',
		},
	},
	required: ['message'],
	description: 'Forbidden access error response',
} as const

export const CognitoCodeMismatchErrorSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Invalid verification code error message',
			example: 'Invalid verification code',
		},
	},
	required: ['message'],
	description: 'Invalid verification code error response',
} as const

export const CognitoExpiredCodeErrorSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Expired verification code error message',
			example: 'Verification code has expired',
		},
	},
	required: ['message'],
	description: 'Expired verification code error response',
} as const

export const CognitoUserNotConfirmedErrorSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'User not confirmed error message',
			example: 'User is not confirmed',
		},
	},
	required: ['message'],
	description: 'User not confirmed error response',
} as const

export const CognitoUsernameExistsErrorSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'User already exists error message',
			example: 'User already exists',
		},
	},
	required: ['message'],
	description: 'User already exists error response',
} as const

export const UserProfileSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'string',
			format: 'uuid',
		},
		email: {
			type: 'string',
			maxLength: 255,
		},
		emailVerified: {
			type: 'boolean',
			nullable: true,
		},
		firstName: {
			type: 'string',
			nullable: true,
			maxLength: 255,
		},
		lastName: {
			type: 'string',
			nullable: true,
			maxLength: 255,
		},
		createdAt: {
			type: 'string',
			nullable: true,
		},
		updatedAt: {
			type: 'string',
			nullable: true,
		},
		lastLogin: {
			type: 'string',
			nullable: true,
		},
	},
	required: [
		'id',
		'email',
		'emailVerified',
		'firstName',
		'lastName',
		'createdAt',
		'updatedAt',
		'lastLogin',
	],
} as const

export const UpdateUserProfileSchema = {
	type: 'object',
	properties: {
		firstName: {
			type: 'string',
			description: 'User first name',
		},
		lastName: {
			type: 'string',
			description: 'User last name',
		},
	},
	description: 'Update user profile request',
} as const

export const UserResponseSchema = {
	type: 'object',
	properties: {
		user: {
			type: 'object',
			properties: {
				id: {
					type: 'string',
					format: 'uuid',
				},
				email: {
					type: 'string',
					maxLength: 255,
				},
				emailVerified: {
					type: 'boolean',
					nullable: true,
				},
				firstName: {
					type: 'string',
					nullable: true,
					maxLength: 255,
				},
				lastName: {
					type: 'string',
					nullable: true,
					maxLength: 255,
				},
				createdAt: {
					type: 'string',
					nullable: true,
				},
				updatedAt: {
					type: 'string',
					nullable: true,
				},
				lastLogin: {
					type: 'string',
					nullable: true,
				},
			},
			required: [
				'id',
				'email',
				'emailVerified',
				'firstName',
				'lastName',
				'createdAt',
				'updatedAt',
				'lastLogin',
			],
			description: 'User profile data',
		},
	},
	required: ['user'],
	description: 'User profile response',
} as const

export const MessageBaseSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Response message',
		},
	},
	required: ['message'],
	description: 'Base response with a message',
} as const

export const UserIdSchema = {
	type: 'string',
	format: 'uuid',
	description: 'User ID validation schema',
} as const

export const AuthResponseSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Response message',
		},
	},
	required: ['message'],
	description: 'Generic authentication response',
} as const

export const RegisterRequestSchema = {
	type: 'object',
	properties: {
		email: {
			type: 'string',
			format: 'email',
			description: 'User email address',
		},
		password: {
			type: 'string',
			minLength: 8,
			pattern:
				'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])',
			description: 'User password',
		},
		confirmPassword: {
			type: 'string',
			minLength: 8,
			pattern:
				'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])',
			description: 'Confirm password',
		},
	},
	required: ['email', 'password', 'confirmPassword'],
	description: 'User registration request',
} as const

export const RegisterResponseSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Response message',
		},
		user: {
			type: 'object',
			properties: {
				id: {
					type: 'string',
					description: 'User ID',
				},
				email: {
					type: 'string',
					description: 'User email address',
				},
			},
			required: ['id', 'email'],
		},
	},
	required: ['message', 'user'],
	description: 'User registration response',
} as const

export const ConfirmRegistrationSchema = {
	type: 'object',
	properties: {
		email: {
			type: 'string',
			format: 'email',
			description: 'User email address',
		},
		code: {
			type: 'number',
			description: 'Verification code sent to email',
		},
	},
	required: ['email', 'code'],
	description: 'Confirm user registration with verification code',
} as const

export const ResendConfirmationCodeSchema = {
	type: 'object',
	properties: {
		email: {
			type: 'string',
			format: 'email',
			description: 'User email address',
		},
	},
	required: ['email'],
	description: 'Request to resend confirmation code',
} as const

export const LoginRequestSchema = {
	type: 'object',
	properties: {
		email: {
			type: 'string',
			format: 'email',
			description: 'User email address',
		},
		password: {
			type: 'string',
			minLength: 8,
			pattern:
				'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])',
			description: 'User password',
		},
	},
	required: ['email', 'password'],
	description: 'User login request',
} as const

export const TokenResponseSchema = {
	type: 'object',
	properties: {
		accessToken: {
			type: 'string',
			description: 'JWT access token',
		},
		refreshToken: {
			type: 'string',
			description: 'JWT refresh token',
		},
		expiresIn: {
			type: 'number',
			description: 'Token expiration time in seconds',
		},
	},
	required: ['accessToken', 'refreshToken', 'expiresIn'],
	description: 'Authentication tokens response',
} as const

export const ForgotPasswordRequestSchema = {
	type: 'object',
	properties: {
		email: {
			type: 'string',
			format: 'email',
			description: 'User email address',
		},
	},
	required: ['email'],
	description: 'Request to initiate password reset',
} as const

export const ConfirmForgotPasswordRequestSchema = {
	type: 'object',
	properties: {
		email: {
			type: 'string',
			format: 'email',
			description: 'User email address',
		},
		code: {
			type: 'string',
			minLength: 6,
			maxLength: 6,
			description: 'Verification code sent to email',
		},
		newPassword: {
			type: 'string',
			minLength: 8,
			pattern:
				'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])',
			description: 'New password',
		},
		confirmPassword: {
			type: 'string',
			minLength: 8,
			pattern:
				'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{}|;:,.<>?])',
			description: 'Confirm new password',
		},
	},
	required: ['email', 'code', 'newPassword', 'confirmPassword'],
	description: 'Request to confirm password reset with code',
} as const

export const GetAuthUserResponseSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'string',
			description: 'User ID',
		},
		email: {
			type: 'string',
			description: 'User email address',
		},
		emailVerified: {
			type: 'boolean',
			description: 'Email verification status',
		},
	},
	required: ['id', 'email', 'emailVerified'],
	description: 'Authenticated user information response',
} as const

export const ChatSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'string',
			format: 'uuid',
		},
		userId: {
			type: 'string',
			format: 'uuid',
		},
		title: {
			type: 'string',
			maxLength: 255,
		},
		createdAt: {
			type: 'string',
			nullable: true,
		},
		updatedAt: {
			type: 'string',
			nullable: true,
		},
	},
	required: ['id', 'userId', 'title', 'createdAt', 'updatedAt'],
} as const

export const ChatMessageSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'string',
			format: 'uuid',
		},
		chatId: {
			type: 'string',
			format: 'uuid',
		},
		role: {
			type: 'string',
			maxLength: 20,
		},
		content: {
			type: 'string',
		},
		metadata: {
			anyOf: [
				{
					type: 'string',
				},
				{
					type: 'number',
				},
				{
					type: 'boolean',
				},
				{
					nullable: true,
				},
				{
					type: 'object',
					additionalProperties: {
						nullable: true,
					},
				},
				{
					type: 'array',
					items: {
						nullable: true,
					},
				},
				{
					nullable: true,
				},
			],
		},
		embedding: {
			type: 'array',
			nullable: true,
			items: {
				type: 'number',
			},
		},
		createdAt: {
			type: 'string',
			nullable: true,
		},
	},
	required: [
		'id',
		'chatId',
		'role',
		'content',
		'metadata',
		'embedding',
		'createdAt',
	],
} as const

export const ChatVectorSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'string',
			format: 'uuid',
		},
		userId: {
			type: 'string',
			format: 'uuid',
		},
		chatId: {
			type: 'string',
			nullable: true,
			format: 'uuid',
		},
		messageId: {
			type: 'string',
			nullable: true,
			format: 'uuid',
		},
		content: {
			type: 'string',
		},
		embedding: {
			type: 'array',
			nullable: true,
			items: {
				type: 'number',
			},
		},
		metadata: {
			anyOf: [
				{
					type: 'string',
				},
				{
					type: 'number',
				},
				{
					type: 'boolean',
				},
				{
					nullable: true,
				},
				{
					type: 'object',
					additionalProperties: {
						nullable: true,
					},
				},
				{
					type: 'array',
					items: {
						nullable: true,
					},
				},
				{
					nullable: true,
				},
			],
		},
		createdAt: {
			type: 'string',
			nullable: true,
		},
		updatedAt: {
			type: 'string',
			nullable: true,
		},
	},
	required: [
		'id',
		'userId',
		'chatId',
		'messageId',
		'content',
		'embedding',
		'metadata',
		'createdAt',
		'updatedAt',
	],
} as const

export const CreateChatRequestSchema = {
	type: 'object',
	properties: {
		title: {
			type: 'string',
			minLength: 1,
			maxLength: 255,
			description: 'Chat title',
		},
	},
	required: ['title'],
	description: 'Create new chat request',
} as const

export const UpdateChatRequestSchema = {
	type: 'object',
	properties: {
		title: {
			type: 'string',
			minLength: 1,
			maxLength: 255,
			description: 'Chat title',
		},
	},
	required: ['title'],
	description: 'Update chat request',
} as const

export const SendMessageRequestSchema = {
	type: 'object',
	properties: {
		messages: {
			type: 'array',
			items: {
				type: 'object',
				properties: {
					role: {
						type: 'string',
						enum: ['user', 'assistant', 'system'],
						description: 'Message role',
					},
					content: {
						type: 'string',
						minLength: 1,
						maxLength: 10000,
						description: 'Message content',
					},
				},
				required: ['role', 'content'],
			},
			minItems: 1,
			description: 'Array of conversation messages',
		},
	},
	required: ['messages'],
	description: 'Send message request',
} as const

export const SearchChatRequestSchema = {
	type: 'object',
	properties: {
		query: {
			type: 'string',
			minLength: 1,
			maxLength: 1000,
			description: 'Search query',
		},
		limit: {
			type: 'number',
			minimum: 1,
			maximum: 50,
			default: 10,
			description: 'Maximum number of results',
		},
		threshold: {
			type: 'number',
			minimum: 0,
			maximum: 1,
			default: 0.7,
			description: 'Similarity threshold',
		},
	},
	required: ['query'],
	description: 'Semantic search request',
} as const

export const ChatResponseSchema = {
	type: 'object',
	properties: {
		success: {
			type: 'boolean',
			description: 'Request success status',
		},
		data: {
			type: 'object',
			properties: {
				id: {
					type: 'string',
					format: 'uuid',
				},
				userId: {
					type: 'string',
					format: 'uuid',
				},
				title: {
					type: 'string',
					maxLength: 255,
				},
				createdAt: {
					type: 'string',
					nullable: true,
				},
				updatedAt: {
					type: 'string',
					nullable: true,
				},
			},
			required: ['id', 'userId', 'title', 'createdAt', 'updatedAt'],
			description: 'Chat data',
		},
	},
	required: ['success', 'data'],
	description: 'Chat response',
} as const

export const ChatListResponseSchema = {
	type: 'object',
	properties: {
		success: {
			type: 'boolean',
			description: 'Request success status',
		},
		data: {
			type: 'array',
			items: {
				type: 'object',
				properties: {
					id: {
						type: 'string',
						format: 'uuid',
					},
					userId: {
						type: 'string',
						format: 'uuid',
					},
					title: {
						type: 'string',
						maxLength: 255,
					},
					createdAt: {
						type: 'string',
						nullable: true,
					},
					updatedAt: {
						type: 'string',
						nullable: true,
					},
				},
				required: ['id', 'userId', 'title', 'createdAt', 'updatedAt'],
				description: 'Chat conversation metadata',
			},
			description: 'List of chats',
		},
		meta: {
			type: 'object',
			properties: {
				page: {
					type: 'number',
					description: 'Current page number',
				},
				limit: {
					type: 'number',
					description: 'Items per page',
				},
				total: {
					type: 'number',
					description: 'Total number of items',
				},
			},
			required: ['page', 'limit', 'total'],
			description: 'Pagination metadata',
		},
	},
	required: ['success', 'data', 'meta'],
	description: 'Chat list response',
} as const

export const ChatWithMessagesResponseSchema = {
	type: 'object',
	properties: {
		success: {
			type: 'boolean',
			description: 'Request success status',
		},
		data: {
			type: 'object',
			properties: {
				id: {
					type: 'string',
					format: 'uuid',
					description: 'Chat ID',
				},
				userId: {
					type: 'string',
					format: 'uuid',
					description: 'User ID',
				},
				title: {
					type: 'string',
					description: 'Chat title',
				},
				createdAt: {
					type: 'string',
					description: 'Creation timestamp',
				},
				updatedAt: {
					type: 'string',
					description: 'Last update timestamp',
				},
				messages: {
					type: 'array',
					items: {
						type: 'object',
						properties: {
							id: {
								type: 'string',
								format: 'uuid',
							},
							chatId: {
								type: 'string',
								format: 'uuid',
							},
							role: {
								type: 'string',
								maxLength: 20,
							},
							content: {
								type: 'string',
							},
							metadata: {
								anyOf: [
									{
										type: 'string',
									},
									{
										type: 'number',
									},
									{
										type: 'boolean',
									},
									{
										nullable: true,
									},
									{
										type: 'object',
										additionalProperties: {
											nullable: true,
										},
									},
									{
										type: 'array',
										items: {
											nullable: true,
										},
									},
									{
										nullable: true,
									},
								],
							},
							embedding: {
								type: 'array',
								nullable: true,
								items: {
									type: 'number',
								},
							},
							createdAt: {
								type: 'string',
								nullable: true,
							},
						},
						required: [
							'id',
							'chatId',
							'role',
							'content',
							'metadata',
							'embedding',
							'createdAt',
						],
						description: 'Individual chat message',
					},
					description: 'Chat messages',
				},
			},
			required: ['id', 'userId', 'title', 'createdAt', 'updatedAt', 'messages'],
			description: 'Chat with messages',
		},
	},
	required: ['success', 'data'],
	description: 'Chat with messages response',
} as const

export const StreamingEventSchema = {
	oneOf: [
		{
			type: 'object',
			properties: {
				type: {
					type: 'string',
					enum: ['connected'],
					description: 'Connection established',
				},
				message: {
					type: 'string',
					description: 'Connection message',
				},
			},
			required: ['type', 'message'],
		},
		{
			type: 'object',
			properties: {
				type: {
					type: 'string',
					enum: ['user_message'],
					description: 'User message saved',
				},
				message: {
					type: 'object',
					properties: {
						id: {
							type: 'string',
							format: 'uuid',
						},
						chatId: {
							type: 'string',
							format: 'uuid',
						},
						role: {
							type: 'string',
							maxLength: 20,
						},
						content: {
							type: 'string',
						},
						metadata: {
							anyOf: [
								{
									type: 'string',
								},
								{
									type: 'number',
								},
								{
									type: 'boolean',
								},
								{
									nullable: true,
								},
								{
									type: 'object',
									additionalProperties: {
										nullable: true,
									},
								},
								{
									type: 'array',
									items: {
										nullable: true,
									},
								},
								{
									nullable: true,
								},
							],
						},
						embedding: {
							type: 'array',
							nullable: true,
							items: {
								type: 'number',
							},
						},
						createdAt: {
							type: 'string',
							nullable: true,
						},
					},
					required: [
						'id',
						'chatId',
						'role',
						'content',
						'metadata',
						'embedding',
						'createdAt',
					],
					description: 'Saved user message',
				},
			},
			required: ['type', 'message'],
		},
		{
			type: 'object',
			properties: {
				type: {
					type: 'string',
					enum: ['stream_start'],
					description: 'AI response streaming started',
				},
				messageId: {
					type: 'string',
					format: 'uuid',
					description: 'AI message ID',
				},
			},
			required: ['type', 'messageId'],
		},
		{
			type: 'object',
			properties: {
				type: {
					type: 'string',
					enum: ['chunk'],
					description: 'AI response chunk',
				},
				content: {
					type: 'string',
					description: 'Chunk content',
				},
				messageId: {
					type: 'string',
					format: 'uuid',
					description: 'AI message ID',
				},
			},
			required: ['type', 'content', 'messageId'],
		},
		{
			type: 'object',
			properties: {
				type: {
					type: 'string',
					enum: ['stream_complete'],
					description: 'AI response streaming completed',
				},
				messageId: {
					type: 'string',
					format: 'uuid',
					description: 'AI message ID',
				},
				fullContent: {
					type: 'string',
					description: 'Complete AI response',
				},
			},
			required: ['type', 'messageId', 'fullContent'],
		},
		{
			type: 'object',
			properties: {
				type: {
					type: 'string',
					enum: ['error'],
					description: 'Error occurred',
				},
				error: {
					type: 'string',
					description: 'Error message',
				},
			},
			required: ['type', 'error'],
		},
	],
	description: 'Server-Sent Event for streaming chat',
} as const

export const HealthResponseSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Health status message',
			example: 'Api Health Status: OK',
		},
	},
	required: ['message'],
	description: 'API health check response',
} as const

export const SystemInfoResponseSchema = {
	type: 'object',
	properties: {
		nodeVersion: {
			type: 'string',
			description: 'Node.js version',
			example: 'v18.17.0',
		},
		platform: {
			type: 'string',
			description: 'Operating system platform',
			example: 'linux',
		},
		architecture: {
			type: 'string',
			description: 'System architecture',
			example: 'x64',
		},
		uptime: {
			type: 'number',
			description: 'System uptime in seconds',
			example: 3600,
		},
		memoryUsage: {
			type: 'object',
			properties: {
				rss: {
					type: 'number',
					description: 'Resident Set Size in bytes',
					example: 50331648,
				},
				heapTotal: {
					type: 'number',
					description: 'Total heap size in bytes',
					example: 20971520,
				},
				heapUsed: {
					type: 'number',
					description: 'Used heap size in bytes',
					example: 15728640,
				},
				external: {
					type: 'number',
					description: 'External memory usage in bytes',
					example: 1048576,
				},
			},
			required: ['rss', 'heapTotal', 'heapUsed', 'external'],
			description: 'Memory usage statistics',
		},
		cpuUsage: {
			type: 'object',
			properties: {
				user: {
					type: 'number',
					description: 'User CPU time in microseconds',
					example: 1000000,
				},
				system: {
					type: 'number',
					description: 'System CPU time in microseconds',
					example: 500000,
				},
			},
			required: ['user', 'system'],
			description: 'CPU usage statistics',
		},
		timestamp: {
			type: 'string',
			description: 'ISO timestamp when the information was collected',
			example: '2024-01-01T12:00:00.000Z',
		},
	},
	required: [
		'nodeVersion',
		'platform',
		'architecture',
		'uptime',
		'memoryUsage',
		'cpuUsage',
		'timestamp',
	],
	description: 'System information response',
} as const

export const DetailedHealthResponseSchema = {
	type: 'object',
	properties: {
		status: {
			type: 'string',
			enum: ['healthy', 'unhealthy', 'degraded'],
			description: 'Overall health status',
			example: 'healthy',
		},
		message: {
			type: 'string',
			description: 'Health status message',
			example: 'API Health Status: HEALTHY',
		},
		timestamp: {
			type: 'string',
			description: 'ISO timestamp when the health check was performed',
			example: '2024-01-01T12:00:00.000Z',
		},
		uptime: {
			type: 'number',
			description: 'Application uptime in seconds',
			example: 3600,
		},
		version: {
			type: 'string',
			description: 'Application version',
			example: '1.0.0',
		},
		environment: {
			type: 'string',
			description: 'Environment name',
			example: 'production',
		},
		checks: {
			type: 'object',
			properties: {
				database: {
					type: 'object',
					properties: {
						status: {
							type: 'string',
							enum: ['healthy', 'unhealthy', 'unknown'],
							description: 'Database health status',
						},
						responseTime: {
							type: 'number',
							description: 'Database response time in milliseconds',
						},
						error: {
							type: 'string',
							description: 'Database error message if unhealthy',
						},
					},
					required: ['status'],
				},
				memory: {
					type: 'object',
					properties: {
						status: {
							type: 'string',
							enum: ['healthy', 'unhealthy'],
							description: 'Memory health status',
						},
						usagePercent: {
							type: 'number',
							description: 'Memory usage percentage',
						},
						usageMB: {
							type: 'number',
							description: 'Memory usage in megabytes',
						},
					},
					required: ['status', 'usagePercent', 'usageMB'],
				},
				disk: {
					type: 'object',
					properties: {
						status: {
							type: 'string',
							enum: ['healthy', 'unhealthy'],
							description: 'Disk health status',
						},
						usagePercent: {
							type: 'number',
							description: 'Disk usage percentage',
						},
					},
					required: ['status'],
				},
				dependencies: {
					type: 'object',
					properties: {
						status: {
							type: 'string',
							enum: ['healthy', 'unhealthy', 'degraded'],
							description: 'Dependencies health status',
						},
						services: {
							type: 'array',
							items: {
								type: 'object',
								properties: {
									name: {
										type: 'string',
										description: 'Service name',
									},
									status: {
										type: 'string',
										enum: ['healthy', 'unhealthy'],
										description: 'Service health status',
									},
									responseTime: {
										type: 'number',
										description: 'Service response time in milliseconds',
									},
									error: {
										type: 'string',
										description: 'Service error message if unhealthy',
									},
								},
								required: ['name', 'status'],
							},
						},
					},
					required: ['status', 'services'],
				},
			},
			required: ['database', 'memory', 'disk', 'dependencies'],
		},
	},
	required: [
		'status',
		'message',
		'timestamp',
		'uptime',
		'version',
		'environment',
		'checks',
	],
	description: 'Detailed API health check response for ALB and monitoring',
} as const

export const ReadinessResponseSchema = {
	type: 'object',
	properties: {
		ready: {
			type: 'boolean',
			description: 'Whether the application is ready to receive traffic',
			example: true,
		},
		message: {
			type: 'string',
			description: 'Readiness status message',
			example: 'Application is ready',
		},
		timestamp: {
			type: 'string',
			description: 'ISO timestamp when the readiness check was performed',
			example: '2024-01-01T12:00:00.000Z',
		},
		checks: {
			type: 'object',
			properties: {
				database: {
					type: 'boolean',
					description: 'Database readiness status',
				},
				dependencies: {
					type: 'boolean',
					description: 'Dependencies readiness status',
				},
				configuration: {
					type: 'boolean',
					description: 'Configuration readiness status',
				},
			},
			required: ['database', 'dependencies', 'configuration'],
		},
	},
	required: ['ready', 'message', 'timestamp', 'checks'],
	description: 'Application readiness probe response',
} as const

export const LivenessResponseSchema = {
	type: 'object',
	properties: {
		alive: {
			type: 'boolean',
			description: 'Whether the application is alive',
			example: true,
		},
		message: {
			type: 'string',
			description: 'Liveness status message',
			example: 'Application is alive',
		},
		timestamp: {
			type: 'string',
			description: 'ISO timestamp when the liveness check was performed',
			example: '2024-01-01T12:00:00.000Z',
		},
		uptime: {
			type: 'number',
			description: 'Application uptime in seconds',
			example: 3600,
		},
	},
	required: ['alive', 'message', 'timestamp', 'uptime'],
	description: 'Application liveness probe response',
} as const

export const ConfigurationResponseSchema = {
	type: 'object',
	properties: {
		status: {
			type: 'string',
			enum: ['healthy', 'unhealthy', 'degraded'],
			description: 'Overall configuration health status',
			example: 'healthy',
		},
		message: {
			type: 'string',
			description: 'Configuration status message',
			example: 'Configuration is healthy',
		},
		timestamp: {
			type: 'string',
			description: 'ISO timestamp when the configuration check was performed',
			example: '2024-01-01T12:00:00.000Z',
		},
		checks: {
			type: 'object',
			properties: {
				critical: {
					type: 'object',
					properties: {
						ready: {
							type: 'boolean',
							description: 'Critical configuration variables status',
						},
						missing: {
							type: 'array',
							items: {
								type: 'string',
							},
							description: 'Missing critical configuration variables',
						},
					},
					required: ['ready', 'missing'],
				},
				important: {
					type: 'object',
					properties: {
						ready: {
							type: 'boolean',
							description: 'Important configuration variables status',
						},
						missing: {
							type: 'array',
							items: {
								type: 'string',
							},
							description: 'Missing important configuration variables',
						},
					},
					required: ['ready', 'missing'],
				},
				optional: {
					type: 'object',
					properties: {
						ready: {
							type: 'boolean',
							description: 'Optional configuration variables status',
						},
						missing: {
							type: 'array',
							items: {
								type: 'string',
							},
							description: 'Missing optional configuration variables',
						},
					},
					required: ['ready', 'missing'],
				},
			},
			required: ['critical', 'important', 'optional'],
		},
	},
	required: ['status', 'message', 'timestamp', 'checks'],
	description: 'Configuration validation response',
} as const

export const HealthErrorResponseSchema = {
	type: 'object',
	properties: {
		message: {
			type: 'string',
			description: 'Error message',
			example: 'Api Status: Error',
		},
	},
	required: ['message'],
	description: 'API health check error response',
} as const

// This file is auto-generated by @hey-api/openapi-ts

/**
 * Standard error response
 */
export type ErrorResponse = {
	/**
	 * Error message
	 */
	message: string
	/**
	 * Error details
	 */
	details?: {
		[key: string]: unknown
	}
}

/**
 * Rate limit exceeded error response
 */
export type RateLimitError = {
	/**
	 * HTTP status code
	 */
	status: number
	/**
	 * Rate limit error message
	 */
	message: string
}

/**
 * Request validation error response
 */
export type ValidationError = {
	/**
	 * Validation error message
	 */
	message: string
	/**
	 * Detailed validation error information
	 */
	details?: {
		[key: string]: unknown
	}
}

/**
 * Internal server error response
 */
export type InternalServerError = {
	/**
	 * Internal server error message
	 */
	message: string
}

/**
 * Unauthorized access error response
 */
export type UnauthorizedError = {
	/**
	 * Unauthorized error message
	 */
	message: string
}

/**
 * Resource not found error response
 */
export type NotFoundError = {
	/**
	 * Not found error message
	 */
	message: string
}

/**
 * Resource conflict error response
 */
export type ConflictError = {
	/**
	 * Conflict error message
	 */
	message: string
}

/**
 * Forbidden access error response
 */
export type ForbiddenError = {
	/**
	 * Forbidden error message
	 */
	message: string
}

/**
 * Invalid verification code error response
 */
export type CognitoCodeMismatchError = {
	/**
	 * Invalid verification code error message
	 */
	message: string
}

/**
 * Expired verification code error response
 */
export type CognitoExpiredCodeError = {
	/**
	 * Expired verification code error message
	 */
	message: string
}

/**
 * User not confirmed error response
 */
export type CognitoUserNotConfirmedError = {
	/**
	 * User not confirmed error message
	 */
	message: string
}

/**
 * User already exists error response
 */
export type CognitoUsernameExistsError = {
	/**
	 * User already exists error message
	 */
	message: string
}

export type UserProfile = {
	id: string
	email: string
	emailVerified: boolean | null
	firstName: string | null
	lastName: string | null
	createdAt: string | null
	updatedAt: string | null
	lastLogin: string | null
}

/**
 * Update user profile request
 */
export type UpdateUserProfile = {
	/**
	 * User first name
	 */
	firstName?: string
	/**
	 * User last name
	 */
	lastName?: string
}

/**
 * User profile response
 */
export type UserResponse = {
	/**
	 * User profile data
	 */
	user: {
		id: string
		email: string
		emailVerified: boolean | null
		firstName: string | null
		lastName: string | null
		createdAt: string | null
		updatedAt: string | null
		lastLogin: string | null
	}
}

/**
 * Base response with a message
 */
export type MessageBase = {
	/**
	 * Response message
	 */
	message: string
}

/**
 * User ID validation schema
 */
export type UserId = string

/**
 * Generic authentication response
 */
export type AuthResponse = {
	/**
	 * Response message
	 */
	message: string
}

/**
 * User registration request
 */
export type RegisterRequest = {
	/**
	 * User email address
	 */
	email: string
	/**
	 * User password
	 */
	password: string
	/**
	 * Confirm password
	 */
	confirmPassword: string
}

/**
 * User registration response
 */
export type RegisterResponse = {
	/**
	 * Response message
	 */
	message: string
	user: {
		/**
		 * User ID
		 */
		id: string
		/**
		 * User email address
		 */
		email: string
	}
}

/**
 * Confirm user registration with verification code
 */
export type ConfirmRegistration = {
	/**
	 * User email address
	 */
	email: string
	/**
	 * Verification code sent to email
	 */
	code: number
}

/**
 * Request to resend confirmation code
 */
export type ResendConfirmationCode = {
	/**
	 * User email address
	 */
	email: string
}

/**
 * User login request
 */
export type LoginRequest = {
	/**
	 * User email address
	 */
	email: string
	/**
	 * User password
	 */
	password: string
}

/**
 * Authentication tokens response
 */
export type TokenResponse = {
	/**
	 * JWT access token
	 */
	accessToken: string
	/**
	 * JWT refresh token
	 */
	refreshToken: string
	/**
	 * Token expiration time in seconds
	 */
	expiresIn: number
}

/**
 * Request to initiate password reset
 */
export type ForgotPasswordRequest = {
	/**
	 * User email address
	 */
	email: string
}

/**
 * Request to confirm password reset with code
 */
export type ConfirmForgotPasswordRequest = {
	/**
	 * User email address
	 */
	email: string
	/**
	 * Verification code sent to email
	 */
	code: string
	/**
	 * New password
	 */
	newPassword: string
	/**
	 * Confirm new password
	 */
	confirmPassword: string
}

/**
 * Authenticated user information response
 */
export type GetAuthUserResponse = {
	/**
	 * User ID
	 */
	id: string
	/**
	 * User email address
	 */
	email: string
	/**
	 * Email verification status
	 */
	emailVerified: boolean
}

export type Chat = {
	id: string
	userId: string
	title: string
	createdAt: string | null
	updatedAt: string | null
}

export type ChatMessage = {
	id: string
	chatId: string
	role: string
	content: string
	metadata:
		| string
		| number
		| boolean
		| unknown
		| {
				[key: string]: unknown
		  }
		| Array<unknown>
	embedding: Array<number> | null
	createdAt: string | null
}

export type ChatVector = {
	id: string
	userId: string
	chatId: string | null
	messageId: string | null
	content: string
	embedding: Array<number> | null
	metadata:
		| string
		| number
		| boolean
		| unknown
		| {
				[key: string]: unknown
		  }
		| Array<unknown>
	createdAt: string | null
	updatedAt: string | null
}

/**
 * Create new chat request
 */
export type CreateChatRequest = {
	/**
	 * Chat title
	 */
	title: string
}

/**
 * Update chat request
 */
export type UpdateChatRequest = {
	/**
	 * Chat title
	 */
	title: string
}

/**
 * Send message request
 */
export type SendMessageRequest = {
	/**
	 * Array of conversation messages
	 */
	messages: Array<{
		/**
		 * Message role
		 */
		role: 'user' | 'assistant' | 'system'
		/**
		 * Message content
		 */
		content: string
	}>
}

/**
 * Semantic search request
 */
export type SearchChatRequest = {
	/**
	 * Search query
	 */
	query: string
	/**
	 * Maximum number of results
	 */
	limit?: number
	/**
	 * Similarity threshold
	 */
	threshold?: number
}

/**
 * Chat response
 */
export type ChatResponse = {
	/**
	 * Request success status
	 */
	success: boolean
	/**
	 * Chat data
	 */
	data: {
		id: string
		userId: string
		title: string
		createdAt: string | null
		updatedAt: string | null
	}
}

/**
 * Chat list response
 */
export type ChatListResponse = {
	/**
	 * Request success status
	 */
	success: boolean
	/**
	 * List of chats
	 */
	data: Array<{
		id: string
		userId: string
		title: string
		createdAt: string | null
		updatedAt: string | null
	}>
	/**
	 * Pagination metadata
	 */
	meta: {
		/**
		 * Current page number
		 */
		page: number
		/**
		 * Items per page
		 */
		limit: number
		/**
		 * Total number of items
		 */
		total: number
	}
}

/**
 * Chat with messages response
 */
export type ChatWithMessagesResponse = {
	/**
	 * Request success status
	 */
	success: boolean
	/**
	 * Chat with messages
	 */
	data: {
		/**
		 * Chat ID
		 */
		id: string
		/**
		 * User ID
		 */
		userId: string
		/**
		 * Chat title
		 */
		title: string
		/**
		 * Creation timestamp
		 */
		createdAt: string
		/**
		 * Last update timestamp
		 */
		updatedAt: string
		/**
		 * Chat messages
		 */
		messages: Array<{
			id: string
			chatId: string
			role: string
			content: string
			metadata:
				| string
				| number
				| boolean
				| unknown
				| {
						[key: string]: unknown
				  }
				| Array<unknown>
			embedding: Array<number> | null
			createdAt: string | null
		}>
	}
}

/**
 * Server-Sent Event for streaming chat
 */
export type StreamingEvent =
	| {
			/**
			 * Connection established
			 */
			type: 'connected'
			/**
			 * Connection message
			 */
			message: string
	  }
	| {
			/**
			 * User message saved
			 */
			type: 'user_message'
			/**
			 * Saved user message
			 */
			message: {
				id: string
				chatId: string
				role: string
				content: string
				metadata:
					| string
					| number
					| boolean
					| unknown
					| {
							[key: string]: unknown
					  }
					| Array<unknown>
				embedding: Array<number> | null
				createdAt: string | null
			}
	  }
	| {
			/**
			 * AI response streaming started
			 */
			type: 'stream_start'
			/**
			 * AI message ID
			 */
			messageId: string
	  }
	| {
			/**
			 * AI response chunk
			 */
			type: 'chunk'
			/**
			 * Chunk content
			 */
			content: string
			/**
			 * AI message ID
			 */
			messageId: string
	  }
	| {
			/**
			 * AI response streaming completed
			 */
			type: 'stream_complete'
			/**
			 * AI message ID
			 */
			messageId: string
			/**
			 * Complete AI response
			 */
			fullContent: string
	  }
	| {
			/**
			 * Error occurred
			 */
			type: 'error'
			/**
			 * Error message
			 */
			error: string
	  }

/**
 * API health check response
 */
export type HealthResponse = {
	/**
	 * Health status message
	 */
	message: string
}

/**
 * System information response
 */
export type SystemInfoResponse = {
	/**
	 * Node.js version
	 */
	nodeVersion: string
	/**
	 * Operating system platform
	 */
	platform: string
	/**
	 * System architecture
	 */
	architecture: string
	/**
	 * System uptime in seconds
	 */
	uptime: number
	/**
	 * Memory usage statistics
	 */
	memoryUsage: {
		/**
		 * Resident Set Size in bytes
		 */
		rss: number
		/**
		 * Total heap size in bytes
		 */
		heapTotal: number
		/**
		 * Used heap size in bytes
		 */
		heapUsed: number
		/**
		 * External memory usage in bytes
		 */
		external: number
	}
	/**
	 * CPU usage statistics
	 */
	cpuUsage: {
		/**
		 * User CPU time in microseconds
		 */
		user: number
		/**
		 * System CPU time in microseconds
		 */
		system: number
	}
	/**
	 * ISO timestamp when the information was collected
	 */
	timestamp: string
}

/**
 * Detailed API health check response for ALB and monitoring
 */
export type DetailedHealthResponse = {
	/**
	 * Overall health status
	 */
	status: 'healthy' | 'unhealthy' | 'degraded'
	/**
	 * Health status message
	 */
	message: string
	/**
	 * ISO timestamp when the health check was performed
	 */
	timestamp: string
	/**
	 * Application uptime in seconds
	 */
	uptime: number
	/**
	 * Application version
	 */
	version: string
	/**
	 * Environment name
	 */
	environment: string
	checks: {
		database: {
			/**
			 * Database health status
			 */
			status: 'healthy' | 'unhealthy' | 'unknown'
			/**
			 * Database response time in milliseconds
			 */
			responseTime?: number
			/**
			 * Database error message if unhealthy
			 */
			error?: string
		}
		memory: {
			/**
			 * Memory health status
			 */
			status: 'healthy' | 'unhealthy'
			/**
			 * Memory usage percentage
			 */
			usagePercent: number
			/**
			 * Memory usage in megabytes
			 */
			usageMB: number
		}
		disk: {
			/**
			 * Disk health status
			 */
			status: 'healthy' | 'unhealthy'
			/**
			 * Disk usage percentage
			 */
			usagePercent?: number
		}
		dependencies: {
			/**
			 * Dependencies health status
			 */
			status: 'healthy' | 'unhealthy' | 'degraded'
			services: Array<{
				/**
				 * Service name
				 */
				name: string
				/**
				 * Service health status
				 */
				status: 'healthy' | 'unhealthy'
				/**
				 * Service response time in milliseconds
				 */
				responseTime?: number
				/**
				 * Service error message if unhealthy
				 */
				error?: string
			}>
		}
	}
}

/**
 * Application readiness probe response
 */
export type ReadinessResponse = {
	/**
	 * Whether the application is ready to receive traffic
	 */
	ready: boolean
	/**
	 * Readiness status message
	 */
	message: string
	/**
	 * ISO timestamp when the readiness check was performed
	 */
	timestamp: string
	checks: {
		/**
		 * Database readiness status
		 */
		database: boolean
		/**
		 * Dependencies readiness status
		 */
		dependencies: boolean
		/**
		 * Configuration readiness status
		 */
		configuration: boolean
	}
}

/**
 * Application liveness probe response
 */
export type LivenessResponse = {
	/**
	 * Whether the application is alive
	 */
	alive: boolean
	/**
	 * Liveness status message
	 */
	message: string
	/**
	 * ISO timestamp when the liveness check was performed
	 */
	timestamp: string
	/**
	 * Application uptime in seconds
	 */
	uptime: number
}

/**
 * Configuration validation response
 */
export type ConfigurationResponse = {
	/**
	 * Overall configuration health status
	 */
	status: 'healthy' | 'unhealthy' | 'degraded'
	/**
	 * Configuration status message
	 */
	message: string
	/**
	 * ISO timestamp when the configuration check was performed
	 */
	timestamp: string
	checks: {
		critical: {
			/**
			 * Critical configuration variables status
			 */
			ready: boolean
			/**
			 * Missing critical configuration variables
			 */
			missing: Array<string>
		}
		important: {
			/**
			 * Important configuration variables status
			 */
			ready: boolean
			/**
			 * Missing important configuration variables
			 */
			missing: Array<string>
		}
		optional: {
			/**
			 * Optional configuration variables status
			 */
			ready: boolean
			/**
			 * Missing optional configuration variables
			 */
			missing: Array<string>
		}
	}
}

/**
 * API health check error response
 */
export type HealthErrorResponse = {
	/**
	 * Error message
	 */
	message: string
}

export type PostAuthRegisterData = {
	body?: {
		/**
		 * User email address
		 */
		email: string
		/**
		 * User password
		 */
		password: string
		/**
		 * Confirm password
		 */
		confirmPassword: string
	}
	path?: never
	query?: never
	url: '/auth/register'
}

export type PostAuthRegisterErrors = {
	/**
	 * Invalid request data - validation failed or passwords do not match
	 */
	400: {
		/**
		 * Validation error message
		 */
		message: string
		/**
		 * Detailed validation error information
		 */
		details?: {
			[key: string]: unknown
		}
	}
	/**
	 * Conflict - User already exists (from database check)
	 */
	409: {
		/**
		 * Conflict error message
		 */
		message: string
	}
	/**
	 * User already exists in Cognito (UsernameExistsException)
	 */
	422: {
		/**
		 * User already exists error message
		 */
		message: string
	}
	/**
	 * Too many registration attempts - rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Server error - Cognito or database error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type PostAuthRegisterError =
	PostAuthRegisterErrors[keyof PostAuthRegisterErrors]

export type PostAuthRegisterResponses = {
	/**
	 * User registered successfully - confirmation email sent
	 */
	201: {
		/**
		 * Response message
		 */
		message: string
	}
}

export type PostAuthRegisterResponse =
	PostAuthRegisterResponses[keyof PostAuthRegisterResponses]

export type PostAuthConfirmRegistrationData = {
	body?: {
		/**
		 * User email address
		 */
		email: string
		/**
		 * Verification code sent to email
		 */
		code: number
	}
	path?: never
	query?: never
	url: '/auth/confirm-registration'
}

export type PostAuthConfirmRegistrationErrors = {
	/**
	 * Invalid confirmation code (CodeMismatchException) or request data validation failed
	 */
	400: {
		/**
		 * Invalid verification code error message
		 */
		message: string
	}
	/**
	 * Forbidden - User already confirmed
	 */
	403: {
		/**
		 * Forbidden error message
		 */
		message: string
	}
	/**
	 * User not found
	 */
	404: {
		/**
		 * Not found error message
		 */
		message: string
	}
	/**
	 * Verification code has expired (ExpiredCodeException)
	 */
	410: {
		/**
		 * Expired verification code error message
		 */
		message: string
	}
	/**
	 * Too many confirmation attempts - rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Server error - Cognito or database error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type PostAuthConfirmRegistrationError =
	PostAuthConfirmRegistrationErrors[keyof PostAuthConfirmRegistrationErrors]

export type PostAuthConfirmRegistrationResponses = {
	/**
	 * User registration confirmed successfully
	 */
	200: {
		/**
		 * Response message
		 */
		message: string
	}
}

export type PostAuthConfirmRegistrationResponse =
	PostAuthConfirmRegistrationResponses[keyof PostAuthConfirmRegistrationResponses]

export type PostAuthResendConfirmationCodeData = {
	body?: {
		/**
		 * User email address
		 */
		email: string
	}
	path?: never
	query?: never
	url: '/auth/resend-confirmation-code'
}

export type PostAuthResendConfirmationCodeErrors = {
	/**
	 * Invalid request data - validation failed or invalid email format
	 */
	400: {
		/**
		 * Validation error message
		 */
		message: string
		/**
		 * Detailed validation error information
		 */
		details?: {
			[key: string]: unknown
		}
	}
	/**
	 * Forbidden - User already confirmed
	 */
	403: {
		/**
		 * Forbidden error message
		 */
		message: string
	}
	/**
	 * User not found
	 */
	404: {
		/**
		 * Not found error message
		 */
		message: string
	}
	/**
	 * Too many resend attempts - rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Server error - Cognito or database error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type PostAuthResendConfirmationCodeError =
	PostAuthResendConfirmationCodeErrors[keyof PostAuthResendConfirmationCodeErrors]

export type PostAuthResendConfirmationCodeResponses = {
	/**
	 * Confirmation code resent successfully
	 */
	200: {
		/**
		 * Response message
		 */
		message: string
	}
}

export type PostAuthResendConfirmationCodeResponse =
	PostAuthResendConfirmationCodeResponses[keyof PostAuthResendConfirmationCodeResponses]

export type PostAuthLoginData = {
	body?: {
		/**
		 * User email address
		 */
		email: string
		/**
		 * User password
		 */
		password: string
	}
	path?: never
	query?: never
	url: '/auth/login'
}

export type PostAuthLoginErrors = {
	/**
	 * Invalid credentials or request data
	 */
	400: {
		/**
		 * Validation error message
		 */
		message: string
		/**
		 * Detailed validation error information
		 */
		details?: {
			[key: string]: unknown
		}
	}
	/**
	 * Unauthorized - Invalid email or password
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * Forbidden - User not confirmed (UserNotConfirmedException)
	 */
	403: {
		/**
		 * User not confirmed error message
		 */
		message: string
	}
	/**
	 * Too many login attempts - rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Server error - Cognito or database error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors]

export type PostAuthLoginResponses = {
	/**
	 * Authentication response
	 */
	200: {
		/**
		 * Response message
		 */
		message: string
		/**
		 * Authentication tokens
		 */
		tokens: {
			/**
			 * JWT access token
			 */
			accessToken: string
			/**
			 * JWT refresh token
			 */
			refreshToken: string
			/**
			 * Token expiration time in seconds
			 */
			expiresIn: number
		}
	}
}

export type PostAuthLoginResponse =
	PostAuthLoginResponses[keyof PostAuthLoginResponses]

export type PostAuthForgotPasswordData = {
	body?: {
		/**
		 * User email address
		 */
		email: string
	}
	path?: never
	query?: never
	url: '/auth/forgot-password'
}

export type PostAuthForgotPasswordErrors = {
	/**
	 * Invalid request data - validation failed
	 */
	400: {
		/**
		 * Validation error message
		 */
		message: string
		/**
		 * Detailed validation error information
		 */
		details?: {
			[key: string]: unknown
		}
	}
	/**
	 * User not found
	 */
	404: {
		/**
		 * Not found error message
		 */
		message: string
	}
	/**
	 * Too many password reset attempts - rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Server error - Cognito or database error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type PostAuthForgotPasswordError =
	PostAuthForgotPasswordErrors[keyof PostAuthForgotPasswordErrors]

export type PostAuthForgotPasswordResponses = {
	/**
	 * Password reset initiated successfully - reset code sent to email
	 */
	200: {
		/**
		 * Response message
		 */
		message: string
	}
}

export type PostAuthForgotPasswordResponse =
	PostAuthForgotPasswordResponses[keyof PostAuthForgotPasswordResponses]

export type PostAuthConfirmForgotPasswordData = {
	body?: {
		/**
		 * User email address
		 */
		email: string
		/**
		 * Verification code sent to email
		 */
		code: string
		/**
		 * New password
		 */
		newPassword: string
		/**
		 * Confirm new password
		 */
		confirmPassword: string
	}
	path?: never
	query?: never
	url: '/auth/confirm-forgot-password'
}

export type PostAuthConfirmForgotPasswordErrors = {
	/**
	 * Invalid reset code (CodeMismatchException) or request data validation failed
	 */
	400: {
		/**
		 * Invalid verification code error message
		 */
		message: string
	}
	/**
	 * User not found
	 */
	404: {
		/**
		 * Not found error message
		 */
		message: string
	}
	/**
	 * Reset code has expired (ExpiredCodeException)
	 */
	410: {
		/**
		 * Expired verification code error message
		 */
		message: string
	}
	/**
	 * Too many password reset attempts - rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Server error - Cognito or database error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type PostAuthConfirmForgotPasswordError =
	PostAuthConfirmForgotPasswordErrors[keyof PostAuthConfirmForgotPasswordErrors]

export type PostAuthConfirmForgotPasswordResponses = {
	/**
	 * Password reset successfully
	 */
	200: {
		/**
		 * Response message
		 */
		message: string
	}
}

export type PostAuthConfirmForgotPasswordResponse =
	PostAuthConfirmForgotPasswordResponses[keyof PostAuthConfirmForgotPasswordResponses]

export type PostAuthLogoutData = {
	body?: never
	path?: never
	query?: never
	url: '/auth/logout'
}

export type PostAuthLogoutErrors = {
	/**
	 * Unauthorized - Authentication required
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * Server error - Cognito or database error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type PostAuthLogoutError =
	PostAuthLogoutErrors[keyof PostAuthLogoutErrors]

export type PostAuthLogoutResponses = {
	/**
	 * User logged out successfully
	 */
	200: {
		/**
		 * Response message
		 */
		message: string
	}
}

export type PostAuthLogoutResponse =
	PostAuthLogoutResponses[keyof PostAuthLogoutResponses]

export type PostAuthRefreshData = {
	body?: never
	path?: never
	query?: never
	url: '/auth/refresh'
}

export type PostAuthRefreshErrors = {
	/**
	 * Invalid refresh token or request data
	 */
	400: {
		/**
		 * Validation error message
		 */
		message: string
		/**
		 * Detailed validation error information
		 */
		details?: {
			[key: string]: unknown
		}
	}
	/**
	 * Unauthorized - Invalid or expired refresh token
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * Server error - Cognito or database error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type PostAuthRefreshError =
	PostAuthRefreshErrors[keyof PostAuthRefreshErrors]

export type PostAuthRefreshResponses = {
	/**
	 * Authentication response
	 */
	200: {
		/**
		 * Response message
		 */
		message: string
		/**
		 * Authentication tokens
		 */
		tokens: {
			/**
			 * JWT access token
			 */
			accessToken: string
			/**
			 * JWT refresh token
			 */
			refreshToken: string
			/**
			 * Token expiration time in seconds
			 */
			expiresIn: number
		}
	}
}

export type PostAuthRefreshResponse =
	PostAuthRefreshResponses[keyof PostAuthRefreshResponses]

export type GetAuthUserData = {
	body?: never
	path?: never
	query?: never
	url: '/auth/user'
}

export type GetAuthUserErrors = {
	/**
	 * Unauthorized - Authentication required
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * Server error - Cognito or database error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type GetAuthUserError = GetAuthUserErrors[keyof GetAuthUserErrors]

export type GetAuthUserResponses = {
	/**
	 * User information retrieved successfully
	 */
	200: {
		/**
		 * User ID
		 */
		id: string
		/**
		 * User email address
		 */
		email: string
		/**
		 * Email verification status
		 */
		emailVerified: boolean
	}
}

export type GetAuthUserResponse2 =
	GetAuthUserResponses[keyof GetAuthUserResponses]

export type GetChatsData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Page number for pagination
		 */
		page?: number
		/**
		 * Number of chats per page (max 100)
		 */
		limit?: number
	}
	url: '/chats'
}

export type GetChatsErrors = {
	/**
	 * Authentication required
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * Rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Server error - Database or service error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type GetChatsError = GetChatsErrors[keyof GetChatsErrors]

export type GetChatsResponses = {
	/**
	 * Successfully retrieved user chats
	 */
	200: {
		/**
		 * Request success status
		 */
		success: boolean
		/**
		 * List of chats
		 */
		data: Array<{
			id: string
			userId: string
			title: string
			createdAt: string | null
			updatedAt: string | null
		}>
		/**
		 * Pagination metadata
		 */
		meta: {
			/**
			 * Current page number
			 */
			page: number
			/**
			 * Items per page
			 */
			limit: number
			/**
			 * Total number of items
			 */
			total: number
		}
	}
}

export type GetChatsResponse = GetChatsResponses[keyof GetChatsResponses]

export type PostChatsData = {
	body?: {
		/**
		 * Chat title
		 */
		title: string
	}
	path?: never
	query?: never
	url: '/chats'
}

export type PostChatsErrors = {
	/**
	 * Invalid request data
	 */
	400: {
		/**
		 * Validation error message
		 */
		message: string
		/**
		 * Detailed validation error information
		 */
		details?: {
			[key: string]: unknown
		}
	}
	/**
	 * Authentication required
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * Rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Server error - Database or service error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type PostChatsError = PostChatsErrors[keyof PostChatsErrors]

export type PostChatsResponses = {
	/**
	 * Chat created successfully
	 */
	201: {
		/**
		 * Request success status
		 */
		success: boolean
		/**
		 * Chat data
		 */
		data: {
			id: string
			userId: string
			title: string
			createdAt: string | null
			updatedAt: string | null
		}
	}
}

export type PostChatsResponse = PostChatsResponses[keyof PostChatsResponses]

export type DeleteChatsByIdData = {
	body?: never
	path: {
		/**
		 * Chat ID
		 */
		id: string
	}
	query?: never
	url: '/chats/{id}'
}

export type DeleteChatsByIdErrors = {
	/**
	 * Authentication required
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * Chat not found or access denied
	 */
	404: {
		/**
		 * Not found error message
		 */
		message: string
	}
	/**
	 * Rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Server error - Database or service error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type DeleteChatsByIdError =
	DeleteChatsByIdErrors[keyof DeleteChatsByIdErrors]

export type DeleteChatsByIdResponses = {
	/**
	 * Chat deleted successfully
	 */
	200: {
		success?: boolean
		message?: string
	}
}

export type DeleteChatsByIdResponse =
	DeleteChatsByIdResponses[keyof DeleteChatsByIdResponses]

export type GetChatsByIdData = {
	body?: never
	path: {
		/**
		 * Chat ID
		 */
		id: string
	}
	query?: never
	url: '/chats/{id}'
}

export type GetChatsByIdErrors = {
	/**
	 * Authentication required
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * Chat not found or access denied
	 */
	404: {
		/**
		 * Not found error message
		 */
		message: string
	}
	/**
	 * Rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Server error - Database or service error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type GetChatsByIdError = GetChatsByIdErrors[keyof GetChatsByIdErrors]

export type GetChatsByIdResponses = {
	/**
	 * Successfully retrieved chat with messages
	 */
	200: {
		/**
		 * Request success status
		 */
		success: boolean
		/**
		 * Chat with messages
		 */
		data: {
			/**
			 * Chat ID
			 */
			id: string
			/**
			 * User ID
			 */
			userId: string
			/**
			 * Chat title
			 */
			title: string
			/**
			 * Creation timestamp
			 */
			createdAt: string
			/**
			 * Last update timestamp
			 */
			updatedAt: string
			/**
			 * Chat messages
			 */
			messages: Array<{
				id: string
				chatId: string
				role: string
				content: string
				metadata:
					| string
					| number
					| boolean
					| unknown
					| {
							[key: string]: unknown
					  }
					| Array<unknown>
				embedding: Array<number> | null
				createdAt: string | null
			}>
		}
	}
}

export type GetChatsByIdResponse =
	GetChatsByIdResponses[keyof GetChatsByIdResponses]

export type PutChatsByIdData = {
	body?: {
		/**
		 * Chat title
		 */
		title: string
	}
	path: {
		/**
		 * Chat ID
		 */
		id: string
	}
	query?: never
	url: '/chats/{id}'
}

export type PutChatsByIdErrors = {
	/**
	 * Invalid request data
	 */
	400: {
		/**
		 * Validation error message
		 */
		message: string
		/**
		 * Detailed validation error information
		 */
		details?: {
			[key: string]: unknown
		}
	}
	/**
	 * Authentication required
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * Chat not found or access denied
	 */
	404: {
		/**
		 * Not found error message
		 */
		message: string
	}
	/**
	 * Rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Server error - Database or service error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type PutChatsByIdError = PutChatsByIdErrors[keyof PutChatsByIdErrors]

export type PutChatsByIdResponses = {
	/**
	 * Chat updated successfully
	 */
	200: {
		/**
		 * Request success status
		 */
		success: boolean
		/**
		 * Chat data
		 */
		data: {
			id: string
			userId: string
			title: string
			createdAt: string | null
			updatedAt: string | null
		}
	}
}

export type PutChatsByIdResponse =
	PutChatsByIdResponses[keyof PutChatsByIdResponses]

export type PostChatsByIdStreamData = {
	/**
	 * Message to send
	 */
	body?: {
		/**
		 * Array of conversation messages
		 */
		messages: Array<{
			/**
			 * Message role
			 */
			role: 'user' | 'assistant' | 'system'
			/**
			 * Message content
			 */
			content: string
		}>
	}
	path: {
		/**
		 * Chat ID
		 */
		id: string
	}
	query?: never
	url: '/chats/{id}/stream'
}

export type PostChatsByIdStreamErrors = {
	/**
	 * Invalid request parameters
	 */
	400: {
		/**
		 * Validation error message
		 */
		message: string
		/**
		 * Detailed validation error information
		 */
		details?: {
			[key: string]: unknown
		}
	}
	/**
	 * Authentication required
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * Chat not found or access denied
	 */
	404: {
		/**
		 * Not found error message
		 */
		message: string
	}
	/**
	 * Rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Internal server error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type PostChatsByIdStreamError =
	PostChatsByIdStreamErrors[keyof PostChatsByIdStreamErrors]

export type PostChatsByIdStreamResponses = {
	/**
	 * Plain text chunks streamed directly to client
	 */
	200: string
}

export type PostChatsByIdStreamResponse =
	PostChatsByIdStreamResponses[keyof PostChatsByIdStreamResponses]

export type GetUsersByIdData = {
	body?: never
	path: {
		/**
		 * The unique identifier of the user
		 */
		id: string
	}
	query?: never
	url: '/users/{id}'
}

export type GetUsersByIdErrors = {
	/**
	 * Invalid user ID format or missing required parameters
	 */
	400: {
		/**
		 * Validation error message
		 */
		message: string
		/**
		 * Detailed validation error information
		 */
		details?: {
			[key: string]: unknown
		}
	}
	/**
	 * Unauthorized - Authentication required, token expired, or invalid token
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * User not found - No user exists with the specified ID
	 */
	404: {
		/**
		 * Not found error message
		 */
		message: string
	}
	/**
	 * Too many requests - rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Internal server error - Database or service error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type GetUsersByIdError = GetUsersByIdErrors[keyof GetUsersByIdErrors]

export type GetUsersByIdResponses = {
	/**
	 * User profile retrieved successfully
	 */
	200: {
		/**
		 * User profile data
		 */
		user: {
			id: string
			email: string
			emailVerified: boolean | null
			firstName: string | null
			lastName: string | null
			createdAt: string | null
			updatedAt: string | null
			lastLogin: string | null
		}
	}
}

export type GetUsersByIdResponse =
	GetUsersByIdResponses[keyof GetUsersByIdResponses]

export type GetUsersMeData = {
	body?: never
	path?: never
	query?: never
	url: '/users/me'
}

export type GetUsersMeErrors = {
	/**
	 * Invalid request - Authentication token validation failed
	 */
	400: {
		/**
		 * Validation error message
		 */
		message: string
		/**
		 * Detailed validation error information
		 */
		details?: {
			[key: string]: unknown
		}
	}
	/**
	 * Unauthorized - Authentication required, token expired, or invalid token
	 */
	401: {
		/**
		 * Unauthorized error message
		 */
		message: string
	}
	/**
	 * User not found - The authenticated user does not exist in the system
	 */
	404: {
		/**
		 * Not found error message
		 */
		message: string
	}
	/**
	 * Too many requests - rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Internal server error - Database or service error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type GetUsersMeError = GetUsersMeErrors[keyof GetUsersMeErrors]

export type GetUsersMeResponses = {
	/**
	 * User profile retrieved successfully
	 */
	200: {
		/**
		 * User profile data
		 */
		user: {
			id: string
			email: string
			emailVerified: boolean | null
			firstName: string | null
			lastName: string | null
			createdAt: string | null
			updatedAt: string | null
			lastLogin: string | null
		}
	}
}

export type GetUsersMeResponse = GetUsersMeResponses[keyof GetUsersMeResponses]

export type GetHealthData = {
	body?: never
	path?: never
	query?: never
	url: '/health'
}

export type GetHealthErrors = {
	/**
	 * Health check failed - internal server error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type GetHealthError = GetHealthErrors[keyof GetHealthErrors]

export type GetHealthResponses = {
	/**
	 * Health check successful
	 */
	200: {
		/**
		 * Health status message
		 */
		message: string
	}
}

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses]

export type GetSystemInfoData = {
	body?: never
	path?: never
	query?: never
	url: '/system-info'
}

export type GetSystemInfoErrors = {
	/**
	 * Too many requests - rate limit exceeded
	 */
	429: {
		/**
		 * HTTP status code
		 */
		status: number
		/**
		 * Rate limit error message
		 */
		message: string
	}
	/**
	 * Failed to retrieve system information - internal server error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type GetSystemInfoError = GetSystemInfoErrors[keyof GetSystemInfoErrors]

export type GetSystemInfoResponses = {
	/**
	 * System information retrieved successfully
	 */
	200: {
		/**
		 * Node.js version
		 */
		nodeVersion: string
		/**
		 * Operating system platform
		 */
		platform: string
		/**
		 * System architecture
		 */
		architecture: string
		/**
		 * System uptime in seconds
		 */
		uptime: number
		/**
		 * Memory usage statistics
		 */
		memoryUsage: {
			/**
			 * Resident Set Size in bytes
			 */
			rss: number
			/**
			 * Total heap size in bytes
			 */
			heapTotal: number
			/**
			 * Used heap size in bytes
			 */
			heapUsed: number
			/**
			 * External memory usage in bytes
			 */
			external: number
		}
		/**
		 * CPU usage statistics
		 */
		cpuUsage: {
			/**
			 * User CPU time in microseconds
			 */
			user: number
			/**
			 * System CPU time in microseconds
			 */
			system: number
		}
		/**
		 * ISO timestamp when the information was collected
		 */
		timestamp: string
	}
}

export type GetSystemInfoResponse =
	GetSystemInfoResponses[keyof GetSystemInfoResponses]

export type GetHealthDetailedData = {
	body?: never
	path?: never
	query?: never
	url: '/health/detailed'
}

export type GetHealthDetailedErrors = {
	/**
	 * Health check failed - internal server error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
	/**
	 * Service is unhealthy
	 */
	503: {
		/**
		 * Overall health status
		 */
		status: 'healthy' | 'unhealthy' | 'degraded'
		/**
		 * Health status message
		 */
		message: string
		/**
		 * ISO timestamp when the health check was performed
		 */
		timestamp: string
		/**
		 * Application uptime in seconds
		 */
		uptime: number
		/**
		 * Application version
		 */
		version: string
		/**
		 * Environment name
		 */
		environment: string
		checks: {
			database: {
				/**
				 * Database health status
				 */
				status: 'healthy' | 'unhealthy' | 'unknown'
				/**
				 * Database response time in milliseconds
				 */
				responseTime?: number
				/**
				 * Database error message if unhealthy
				 */
				error?: string
			}
			memory: {
				/**
				 * Memory health status
				 */
				status: 'healthy' | 'unhealthy'
				/**
				 * Memory usage percentage
				 */
				usagePercent: number
				/**
				 * Memory usage in megabytes
				 */
				usageMB: number
			}
			disk: {
				/**
				 * Disk health status
				 */
				status: 'healthy' | 'unhealthy'
				/**
				 * Disk usage percentage
				 */
				usagePercent?: number
			}
			dependencies: {
				/**
				 * Dependencies health status
				 */
				status: 'healthy' | 'unhealthy' | 'degraded'
				services: Array<{
					/**
					 * Service name
					 */
					name: string
					/**
					 * Service health status
					 */
					status: 'healthy' | 'unhealthy'
					/**
					 * Service response time in milliseconds
					 */
					responseTime?: number
					/**
					 * Service error message if unhealthy
					 */
					error?: string
				}>
			}
		}
	}
}

export type GetHealthDetailedError =
	GetHealthDetailedErrors[keyof GetHealthDetailedErrors]

export type GetHealthDetailedResponses = {
	/**
	 * Detailed health check successful
	 */
	200: {
		/**
		 * Overall health status
		 */
		status: 'healthy' | 'unhealthy' | 'degraded'
		/**
		 * Health status message
		 */
		message: string
		/**
		 * ISO timestamp when the health check was performed
		 */
		timestamp: string
		/**
		 * Application uptime in seconds
		 */
		uptime: number
		/**
		 * Application version
		 */
		version: string
		/**
		 * Environment name
		 */
		environment: string
		checks: {
			database: {
				/**
				 * Database health status
				 */
				status: 'healthy' | 'unhealthy' | 'unknown'
				/**
				 * Database response time in milliseconds
				 */
				responseTime?: number
				/**
				 * Database error message if unhealthy
				 */
				error?: string
			}
			memory: {
				/**
				 * Memory health status
				 */
				status: 'healthy' | 'unhealthy'
				/**
				 * Memory usage percentage
				 */
				usagePercent: number
				/**
				 * Memory usage in megabytes
				 */
				usageMB: number
			}
			disk: {
				/**
				 * Disk health status
				 */
				status: 'healthy' | 'unhealthy'
				/**
				 * Disk usage percentage
				 */
				usagePercent?: number
			}
			dependencies: {
				/**
				 * Dependencies health status
				 */
				status: 'healthy' | 'unhealthy' | 'degraded'
				services: Array<{
					/**
					 * Service name
					 */
					name: string
					/**
					 * Service health status
					 */
					status: 'healthy' | 'unhealthy'
					/**
					 * Service response time in milliseconds
					 */
					responseTime?: number
					/**
					 * Service error message if unhealthy
					 */
					error?: string
				}>
			}
		}
	}
}

export type GetHealthDetailedResponse =
	GetHealthDetailedResponses[keyof GetHealthDetailedResponses]

export type GetHealthReadyData = {
	body?: never
	path?: never
	query?: never
	url: '/health/ready'
}

export type GetHealthReadyErrors = {
	/**
	 * Readiness check failed - internal server error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
	/**
	 * Application is not ready
	 */
	503: {
		/**
		 * Whether the application is ready to receive traffic
		 */
		ready: boolean
		/**
		 * Readiness status message
		 */
		message: string
		/**
		 * ISO timestamp when the readiness check was performed
		 */
		timestamp: string
		checks: {
			/**
			 * Database readiness status
			 */
			database: boolean
			/**
			 * Dependencies readiness status
			 */
			dependencies: boolean
			/**
			 * Configuration readiness status
			 */
			configuration: boolean
		}
	}
}

export type GetHealthReadyError =
	GetHealthReadyErrors[keyof GetHealthReadyErrors]

export type GetHealthReadyResponses = {
	/**
	 * Application is ready
	 */
	200: {
		/**
		 * Whether the application is ready to receive traffic
		 */
		ready: boolean
		/**
		 * Readiness status message
		 */
		message: string
		/**
		 * ISO timestamp when the readiness check was performed
		 */
		timestamp: string
		checks: {
			/**
			 * Database readiness status
			 */
			database: boolean
			/**
			 * Dependencies readiness status
			 */
			dependencies: boolean
			/**
			 * Configuration readiness status
			 */
			configuration: boolean
		}
	}
}

export type GetHealthReadyResponse =
	GetHealthReadyResponses[keyof GetHealthReadyResponses]

export type GetHealthReadyPublicData = {
	body?: never
	path?: never
	query?: never
	url: '/health/ready/public'
}

export type GetHealthReadyPublicErrors = {
	/**
	 * Readiness check failed - internal server error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
	/**
	 * Application is not ready
	 */
	503: {
		/**
		 * Whether the application is ready to receive traffic
		 */
		ready: boolean
		/**
		 * Readiness status message
		 */
		message: string
		/**
		 * ISO timestamp when the readiness check was performed
		 */
		timestamp: string
		checks: {
			/**
			 * Database readiness status
			 */
			database: boolean
			/**
			 * Dependencies readiness status
			 */
			dependencies: boolean
			/**
			 * Configuration readiness status
			 */
			configuration: boolean
		}
	}
}

export type GetHealthReadyPublicError =
	GetHealthReadyPublicErrors[keyof GetHealthReadyPublicErrors]

export type GetHealthReadyPublicResponses = {
	/**
	 * Application is ready
	 */
	200: {
		/**
		 * Whether the application is ready to receive traffic
		 */
		ready: boolean
		/**
		 * Readiness status message
		 */
		message: string
		/**
		 * ISO timestamp when the readiness check was performed
		 */
		timestamp: string
		checks: {
			/**
			 * Database readiness status
			 */
			database: boolean
			/**
			 * Dependencies readiness status
			 */
			dependencies: boolean
			/**
			 * Configuration readiness status
			 */
			configuration: boolean
		}
	}
}

export type GetHealthReadyPublicResponse =
	GetHealthReadyPublicResponses[keyof GetHealthReadyPublicResponses]

export type GetHealthLiveData = {
	body?: never
	path?: never
	query?: never
	url: '/health/live'
}

export type GetHealthLiveErrors = {
	/**
	 * Liveness check failed - internal server error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
	/**
	 * Application is not alive
	 */
	503: {
		/**
		 * Whether the application is alive
		 */
		alive: boolean
		/**
		 * Liveness status message
		 */
		message: string
		/**
		 * ISO timestamp when the liveness check was performed
		 */
		timestamp: string
		/**
		 * Application uptime in seconds
		 */
		uptime: number
	}
}

export type GetHealthLiveError = GetHealthLiveErrors[keyof GetHealthLiveErrors]

export type GetHealthLiveResponses = {
	/**
	 * Application is alive
	 */
	200: {
		/**
		 * Whether the application is alive
		 */
		alive: boolean
		/**
		 * Liveness status message
		 */
		message: string
		/**
		 * ISO timestamp when the liveness check was performed
		 */
		timestamp: string
		/**
		 * Application uptime in seconds
		 */
		uptime: number
	}
}

export type GetHealthLiveResponse =
	GetHealthLiveResponses[keyof GetHealthLiveResponses]

export type GetHealthConfigData = {
	body?: never
	path?: never
	query?: never
	url: '/health/config'
}

export type GetHealthConfigErrors = {
	/**
	 * Configuration validation failed - internal server error
	 */
	500: {
		/**
		 * Internal server error message
		 */
		message: string
	}
}

export type GetHealthConfigError =
	GetHealthConfigErrors[keyof GetHealthConfigErrors]

export type GetHealthConfigResponses = {
	/**
	 * Configuration validation successful
	 */
	200: {
		/**
		 * Overall configuration health status
		 */
		status: 'healthy' | 'unhealthy' | 'degraded'
		/**
		 * Configuration status message
		 */
		message: string
		/**
		 * ISO timestamp when the configuration check was performed
		 */
		timestamp: string
		checks: {
			critical: {
				/**
				 * Critical configuration variables status
				 */
				ready: boolean
				/**
				 * Missing critical configuration variables
				 */
				missing: Array<string>
			}
			important: {
				/**
				 * Important configuration variables status
				 */
				ready: boolean
				/**
				 * Missing important configuration variables
				 */
				missing: Array<string>
			}
			optional: {
				/**
				 * Optional configuration variables status
				 */
				ready: boolean
				/**
				 * Missing optional configuration variables
				 */
				missing: Array<string>
			}
		}
	}
}

export type GetHealthConfigResponse =
	GetHealthConfigResponses[keyof GetHealthConfigResponses]

export type ClientOptions = {
	baseURL: 'http://localhost:3040/api' | (string & {})
}
